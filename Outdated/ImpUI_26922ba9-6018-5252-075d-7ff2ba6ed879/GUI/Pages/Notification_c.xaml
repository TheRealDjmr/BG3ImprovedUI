<ls:UIWidget x:Name="Notification_c"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:ls="clr-namespace:ls;assembly=Code"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             mc:Ignorable="d"
             ls:UIWidget.ContextName="Notifications" d:DataContext="{d:DesignInstance {x:Type ls:DCNotifications}, IsDesignTimeCreatable=True}"
             d:DesignHeight="2160" d:DesignWidth="3840">

    <ls:UIWidget.Resources>
        <ResourceDictionary>
            <Thickness x:Key="NotificationPosition">0,582,0,0</Thickness>
            <Thickness x:Key="CombatNotificationPosition">0,0,0,440</Thickness>
        </ResourceDictionary>

    </ls:UIWidget.Resources>

    <ls:UIWidget.Template>
        <ControlTemplate>
            <Grid>
                <ContentControl x:Name="Notifications" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="{StaticResource NotificationPosition}" DataContext="{Binding CurrentPlayer.UIData.Notification}" Style="{StaticResource Notification.TemplateSwitcher}" />
                <ItemsControl x:Name="SideTutorials" Style="{StaticResource SideTutorialsStyle}" Margin="220,220,0,0" />
                <Control x:Name="TurnIndicationCombat" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="{StaticResource CombatNotificationPosition}" DataContext="{Binding CurrentPlayer.UIData.Notification}" Opacity="0">
                    <Control.Template>
                        <ControlTemplate>
                            <ls:LSNineSliceImage Margin="0,0,-7,0" x:Name="LabelBorder" Style="{DynamicResource SmallNotification9Slice}">
                                <StackPanel Orientation="Horizontal" Margin="-20,8,-20,8">
                                    <TextBlock x:Name="PlayerMessage" Text="{Binding Source='h1c278dadg8809g4a06g912dgf84a5f10736a',Converter={StaticResource TranslatedStringConverter}, StringFormat='{}{0} - '}" Foreground="{StaticResource LS_PrimaryColor}" FontSize="{StaticResource ScaledLargeFontSize}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,-4,0,0" Visibility="Collapsed"/>
                                    <TextBlock Margin="0,-4,0,0" Text="{Binding Source='h454f2809gcc4ag4ab6gac72gccec15c0dda3',Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_PrimaryColor}" FontSize="{StaticResource ScaledLargeFontSize}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                </StackPanel>
                            </ls:LSNineSliceImage>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding DataContext.Data.LocalPlayers.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                                        <Condition Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PlayerMessage" Property="Visibility" Value="Visible" />
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="2">
                                    <Setter TargetName="PlayerMessage" Property="Text" Value="{Binding Source='h71215b67gfc23g492fga295gcdf11253fd60', StringFormat='{}{0} - ' ,Converter={StaticResource TranslatedStringConverter}}"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Control.Template>
                </Control>
                <Control x:Name="WorldTurnNotification" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,440">
                    <Control.Template>
                        <ControlTemplate>
                            <ControlTemplate.Resources>
                                <BitmapImage x:Key="CastBarBackground" UriSource="pack://application:,,,/Core;component/Assets/TargetInfo/target_bar_cast.png"/>
                            </ControlTemplate.Resources>
                            <ls:LSNineSliceImage x:Name="BGImage" Slices="180,40" Padding="180,28" ImageSource="{StaticResource CastBarBackground}">
                                <TextBlock Margin="0,-4,0,0" VerticalAlignment="Center" HorizontalAlignment="Center" Text="{Binding Source=h4a900067gbe92g4e60gaf15g90a1b9dac93a, Converter={StaticResource TranslatedStringConverter}}" />
                            </ls:LSNineSliceImage>
                        </ControlTemplate>
                    </Control.Template>
                </Control>
                <Control x:Name="CampLongRestWarning" Template="{StaticResource FixedLongRestNotificationTemplate}" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,80" Visibility="Collapsed"/>

                <b:Interaction.Triggers>
                    <b:DataTrigger Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="StartTurnFTB">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Operator="NotEqual" RightOperand="InFTB"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:InvokeCommandAction Command="{Binding SkipNotificationCommand}"/>
                    </b:DataTrigger>
                </b:Interaction.Triggers>
            </Grid>

            <ControlTemplate.Triggers>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Data.LongRest.ArePlayersDreaming}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.ActiveDialogue}" Value="{x:Null}"/>
                        <Condition Binding="{Binding CurrentPlayer.UIData.InPlayerPanels}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" TargetName="CampLongRestWarning" Value="Visible"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="None">
                    <Setter TargetName="Notifications" Property="Visibility" Value="Collapsed" />
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="Warning">
                    <Setter TargetName="Notifications" Property="VerticalAlignment" Value="Bottom" />
                    <Setter TargetName="Notifications" Property="Margin" Value="0,0,0,440" />
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.UIData.AreRadialsOpen}" Value="True">
                    <Setter TargetName="TurnIndicationCombat" Property="Visibility" Value="Hidden" />
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="RewardPanel">
                    <Setter TargetName="Notifications" Property="Margin" Value="0,200,0,0" />
                </DataTrigger>

                <!-- Show Your Turn Label in Combat -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.IsCurrentTurn}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.IsOwnerActiveInSplitscreenFullscreenTurn}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InCombat"/>
                    </MultiDataTrigger.Conditions>

                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard Storyboard.TargetName="TurnIndicationCombat">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseInOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                    <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseInOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                    <EasingDoubleKeyFrame KeyTime="0:0:2.4" Value="1">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseInOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                    <EasingDoubleKeyFrame KeyTime="0:0:6.0" Value="1">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseInOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                    <EasingDoubleKeyFrame KeyTime="0:0:7.0" Value="0">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseInOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>

                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="TurnIndicationCombat" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>

                <!-- FORCED GLOBAL NOTIFICATIONS-->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="SavegameFinished"/>
                        <Condition Binding="{Binding Layout}" Value="Left"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="RenderTransform">
                        <Setter.Value>
                            <TransformGroup>
                                <TranslateTransform X="{Binding ActualWidth,  ElementName=Notification_c, Converter={StaticResource DivideConverter}, ConverterParameter=2}" Y="0" />
                            </TransformGroup>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="SavegameFinished"/>
                        <Condition Binding="{Binding Layout}" Value="Right"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="WaypointUnlocked"/>
                        <Condition Binding="{Binding Layout}" Value="Left"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="RenderTransform">
                        <Setter.Value>
                            <TransformGroup>
                                <TranslateTransform X="{Binding ActualWidth,  ElementName=Notification_c, Converter={StaticResource DivideConverter}, ConverterParameter=2}" Y="0" />
                            </TransformGroup>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="WaypointUnlocked"/>
                        <Condition Binding="{Binding Layout}" Value="Right"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="BackgroundGoal"/>
                        <Condition Binding="{Binding Layout}" Value="Left"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="RenderTransform">
                        <Setter.Value>
                            <TransformGroup>
                                <TranslateTransform X="{Binding ActualWidth,  ElementName=Notification_c, Converter={StaticResource DivideConverter}, ConverterParameter=2}" Y="0" />
                            </TransformGroup>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="BackgroundGoal"/>
                        <Condition Binding="{Binding Layout}" Value="Right"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="ApprovalRating"/>
                        <Condition Binding="{Binding Layout}" Value="Left"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="RenderTransform">
                        <Setter.Value>
                            <TransformGroup>
                                <TranslateTransform X="{Binding ActualWidth,  ElementName=Notification_c, Converter={StaticResource DivideConverter}, ConverterParameter=2}" Y="0" />
                            </TransformGroup>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="ApprovalRating"/>
                        <Condition Binding="{Binding Layout}" Value="Right"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="NewSpell"/>
                        <Condition Binding="{Binding Layout}" Value="Left"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="RenderTransform">
                        <Setter.Value>
                            <TransformGroup>
                                <TranslateTransform X="{Binding ActualWidth,  ElementName=Notification_c, Converter={StaticResource DivideConverter}, ConverterParameter=2}" Y="0" />
                            </TransformGroup>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="NewSpell"/>
                        <Condition Binding="{Binding Layout}" Value="Right"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="WildMagicSurge"/>
                        <Condition Binding="{Binding Layout}" Value="Left"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="RenderTransform">
                        <Setter.Value>
                            <TransformGroup>
                                <TranslateTransform X="{Binding ActualWidth,  ElementName=Notification_c, Converter={StaticResource DivideConverter}, ConverterParameter=2}" Y="0" />
                            </TransformGroup>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="WildMagicSurge"/>
                        <Condition Binding="{Binding Layout}" Value="Right"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="System"/>
                        <Condition Binding="{Binding Layout}" Value="Left"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="RenderTransform">
                        <Setter.Value>
                            <TransformGroup>
                                <TranslateTransform X="{Binding ActualWidth,  ElementName=Notification_c, Converter={StaticResource DivideConverter}, ConverterParameter=2}" Y="0" />
                            </TransformGroup>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="System"/>
                        <Condition Binding="{Binding Layout}" Value="Right"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>


                <!-- NOTIFICATIONS DEPENDING ON THE CAMERA STATE (SPLIT/MERGE) -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="Region"/>
                        <Condition Binding="{Binding Layout}" Value="Left"/>
                        <Condition Binding="{Binding DataContext.Data.IsCameraSplit, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="RenderTransform">
                        <Setter.Value>
                            <TranslateTransform X="{Binding ActualWidth, ElementName=Notification_c, Converter={StaticResource DivideConverter}, ConverterParameter=2}" Y="0"/>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="Region"/>
                        <Condition Binding="{Binding Layout}" Value="Right"/>
                        <Condition Binding="{Binding DataContext.Data.IsCameraSplit, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="JournalUpdate"/>
                        <Condition Binding="{Binding Layout}" Value="Left"/>
                        <Condition Binding="{Binding DataContext.Data.IsCameraSplit, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="RenderTransform">
                        <Setter.Value>
                            <TranslateTransform X="{Binding ActualWidth, ElementName=Notification_c, Converter={StaticResource DivideConverter}, ConverterParameter=2}" Y="0"/>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="JournalUpdate"/>
                        <Condition Binding="{Binding Layout}" Value="Right"/>
                        <Condition Binding="{Binding DataContext.Data.IsCameraSplit, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="Quest_Done"/>
                        <Condition Binding="{Binding Layout}" Value="Left"/>
                        <Condition Binding="{Binding DataContext.Data.IsCameraSplit, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="RenderTransform">
                        <Setter.Value>
                            <TranslateTransform X="{Binding ActualWidth, ElementName=Notification_c, Converter={StaticResource DivideConverter}, ConverterParameter=2}" Y="0"/>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="Quest_Done"/>
                        <Condition Binding="{Binding Layout}" Value="Right"/>
                        <Condition Binding="{Binding DataContext.Data.IsCameraSplit, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Data.LocalPlayers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                        <Condition Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource Mode=Self}}" Value="Common"/>
                        <Condition Binding="{Binding Data.IsFullScreenSharedInitiativeEnabled}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.IsOwnerActiveInSplitscreenFullscreenTurn}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Notifications" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InFTB"/>
                        <Condition Binding="{Binding Path=CurrentPlayer.SelectedCharacter.IsCurrentTurn}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter TargetName="WorldTurnNotification" Property="Visibility" Value="Visible"/>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InFTB"/>
                        <Condition Binding="{Binding Path=CurrentPlayer.SelectedCharacter.IsCurrentTurn}" Value="False"/>
                        <Condition Binding="{Binding CurrentPlayer.UIData.Notification.Type}" Value="StartTurnFTB"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter TargetName="Notifications" Property="Visibility" Value="Collapsed"/>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding Layout}" Value="Right">
                    <Setter TargetName="SideTutorials" Property="Margin" Value="0,40,40,0"/>
                    <Setter TargetName="SideTutorials" Property="HorizontalAlignment" Value="Right"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Layout}" Value="Left">
                    <Setter TargetName="SideTutorials" Property="Margin" Value="40,40,0,0"/>
                </DataTrigger>
               
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>
</ls:UIWidget>