<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors" 

                    mc:Ignorable="d">

    <System:Double x:Key="MaxTooltipContentWidth">789</System:Double>
    <System:Double x:Key="DetailSectionWidth">750</System:Double>
    <System:Double x:Key="MaxWideTooltipContentWidth">860</System:Double>
    <System:Double x:Key="MinNarrowTooltipContentWidth">500</System:Double>
    <Thickness x:Key="ExtraPadSpace">0,0,0,0</Thickness>
    <System:Double x:Key="TooltipStripOpacity">0.2</System:Double>
    <System:Double x:Key="MaxWidthOnCollisionWithImage">550</System:Double>

    <System:Double x:Key="TooltipActionIconSize">64</System:Double>
    <System:Double x:Key="TooltipActionIconFrameSize">86</System:Double>
    <System:Double x:Key="IconActionPointSize">48</System:Double>

    <System:Double x:Key="TurnOrderScale">0.8</System:Double>

    <System:Double x:Key="InvSlotSize">104</System:Double>
    <System:Double x:Key="ItemIconSize">100</System:Double>
    <!-- Remove this when SplitItem panel is updated! -->
    <System:Double x:Key="InvSpacing">10</System:Double>

    <System:Double x:Key="StatusHeight">88</System:Double>
    <System:Double x:Key="StatusWidth">80</System:Double>
    <ImageBrush x:Key="InventoryCell2x2Brush"  ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/slot_invT_2x2.png" TileMode="Tile" Stretch="None"  ViewportUnits="Absolute" Viewport="0,0,228,228"  />

    <System:Double x:Key="ContInvSlotSize">104</System:Double>
    <System:Double x:Key="ContItemIconSize">100</System:Double>
    <System:Double x:Key="ContInvSpacing">10</System:Double>
    <ImageBrush x:Key="ContInventoryCell2x2Brush"  ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/slot_invT_2x2.png" TileMode="Tile" Stretch="None"  ViewportUnits="Absolute" Viewport="0,0,228,228"  />

    <Style TargetType="{x:Type Control}" x:Key="baseStyle">
        <Setter Property="FontSize" Value="{StaticResource DefaultFontSize}" />
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}" />
    </Style>

    <!-- ============== TOOLTIPS ============== -->

    <!-- Base Tooltip Template -->
    <ControlTemplate x:Key="BaseTooltipTemplate" TargetType="ContentControl">
        <StackPanel>
            <!-- Inspect message -->
            <ls:LSNineSliceImage x:Name="uiHintContainer" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="4,0,0,-42" Visibility="Collapsed" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/TT_inspect_bg_3.png" Padding="32,16,32,50" Slices="29,28" Focusable="False" Opacity="0.94">
                <TextBlock x:Name="HintText" HorizontalAlignment="Center" TextAlignment="Center" Foreground="{StaticResource TooltipColor.Secondary}" FontSize="{StaticResource SmallFontSize}" Margin="0,8,0,-12">
                    <b:Interaction.Behaviors>
                        <ls:CtxTransStringRunGeneratorBehavior LocaSource="{Binding Source='h26997a86g15fag45f0ga225g817a90445b22', Converter={StaticResource TranslatedStringConverter}}" PlayerId="{Binding PlayerId,RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <ls:CtxTransStringRunGeneratorBehavior.NamedParamContentStyle>
                                <Style TargetType="ContentControl">
                                    <Setter Property="Margin" Value="-14,-14,0,-14" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <ls:LSNineSliceImage ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_square_d.png" Slices="12 12 12 12" MinHeight="46" MinWidth="46" MaxWidth="{DynamicResource MaxTooltipContentWidth}" Padding="10,0,10,0">
                                                    <TextBlock Text="{Binding Shortcut}" Foreground="{StaticResource TooltipColor.Secondary}" FontSize="{StaticResource MiniFontSize}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,2,0,-2" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
                                                </ls:LSNineSliceImage>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ls:CtxTransStringRunGeneratorBehavior.NamedParamContentStyle>
                        </ls:CtxTransStringRunGeneratorBehavior>
                    </b:Interaction.Behaviors>
                </TextBlock>
            </ls:LSNineSliceImage>

            <!-- Tooltip -->
            <ls:LSNineSliceImage Style="{DynamicResource DefaultTooltip9Slice}" VerticalAlignment="Top" HorizontalAlignment="Left">
                <Grid>
                    <Rectangle x:Name="tooltipBottomGradient" Style="{DynamicResource TooltipBottomGradientStyle}" />
                    <ContentPresenter x:Name="tooltipContent" MaxWidth="{DynamicResource MaxTooltipContentWidth}" />
                    <!--<Image x:Name="PART_tooltipBottomArrow" Style="{DynamicResource TooltipBottomArrow}" />-->
                    <!-- We want to re-enable this in the future, so just comment it -->
                </Grid>

                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <ls:LSPlaySound Sound="UI_HUD_Shared_Tooltip_Show"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="Unloaded">
                        <ls:LSPlaySound Sound="UI_HUD_Shared_Tooltip_Hide"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ls:LSNineSliceImage>
        </StackPanel>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding CanBePinned, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter TargetName="uiHintContainer" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CanBePinned, RelativeSource={RelativeSource AncestorType={x:Type ls:LSTooltip}}}" Value="True">
                <Setter TargetName="uiHintContainer" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding PlayerCanPin, RelativeSource={RelativeSource Mode=Self}}" Value="False">
                <Setter TargetName="uiHintContainer" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                <!-- It has been pinned, so keep the space to prevent position jumps -->
                <Setter TargetName="uiHintContainer" Property="Visibility" Value="Hidden"/>
            </DataTrigger>

            <Trigger Property="ls:AttachedProperties.InheritedTag" Value="Equipped">
                <Setter TargetName="uiHintContainer" Property="Visibility" Value="Visible"/>
                <Setter TargetName="HintText" Property="Text" Value="{Binding Source='ha1ff7c28g1ddcg41d2g92e4g3b15371c596d',Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>

            <DataTrigger Binding="{Binding ., Converter={StaticResource TypeConverter}}" Value="ls.VMStat">
                <Setter TargetName="tooltipContent" Property="Width" Value="{DynamicResource MaxWideTooltipContentWidth}"/>
                <Setter TargetName="tooltipContent" Property="MaxWidth" Value="{DynamicResource MaxWideTooltipContentWidth}"/>
                <Setter TargetName="uiHintContainer" Property="MaxWidth" Value="{DynamicResource MaxWideTooltipContentWidth}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=DataContext, Converter={StaticResource TypeConverter} ,RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="ls.VMContextTransStringDamageParam">
                <Setter TargetName="tooltipContent" Property="MaxWidth" Value="{DynamicResource MaxCombatEntryTooltipWidth}"/>
                <Setter TargetName="uiHintContainer" Property="MaxWidth" Value="{DynamicResource MaxCombatEntryTooltipWidth}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

   <Style x:Key="TooltipStripBottomStyle" TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
        <Setter Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/TT_hStrip_footer.png"/>
        <Setter Property="Slices" Value="25"/>
        <Setter Property="IconWidth" Value="55"/>
        <Setter Property="MinHeight" Value="74"/>
        <Setter Property="Padding" Value="38,16"/>
        <Setter Property="Margin" Value="-36,0,-36,-25"/>
    </Style>

    <Style x:Key="TooltipControlTitleStyle" TargetType="Control" >
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}" />
        <Setter Property="Margin" Value="{StaticResource TitleMargin}"/>
        <Setter Property="FontSize" Value="{StaticResource BigFontSize}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{StaticResource TooltipColor.Title}" />
    </Style>

    <Style x:Key="TooltipTitleStyle" TargetType="TextBlock" BasedOn="{StaticResource TooltipDefaultTextStyle}">
        <Setter Property="Margin" Value="{StaticResource TitleMargin}"/>
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="FontSize" Value="{StaticResource BigFontSize}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{StaticResource TooltipColor.Title}" />
        <Setter Property="LineHeight" Value="{StaticResource TooltipTitleLineHeight}"/>
        <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
    </Style>

    <Style x:Key="TooltipMainIconStyle" TargetType="Image">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Stretch" Value="Uniform" />
        <Setter Property="MaxWidth" Value="328" />
        <Setter Property="MaxHeight" Value="328" />
        <Setter Property="Panel.ZIndex" Value="1"/>
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Margin" Value="0,-85,-95,0" />
        <Setter Property="ls:MeasurementProperties.CalculateMeasures" Value="True" />
    </Style>

    <Style x:Key="roundStatusIcon" TargetType="Ellipse">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Width" Value="56" />
        <Setter Property="Height" Value="56" />
        <Setter Property="Margin" Value="8,4,0,4" />
    </Style>

    <Style TargetType="TextBlock" x:Key="SectionResourceNameStyle">
        <Setter Property="Text" Value="{Binding Name}"/>
        <Setter Property="FontSize" Value="{DynamicResource MediumFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource TooltipColor.Special}"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
        <Style.Triggers>
            <MultiDataTrigger >
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Value}" Value="0"/>
                    <Condition Binding="{Binding IgnoreCost}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Foreground" Value="{StaticResource LS_alertTxtColor}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TooltipCtxTransStringDefaultTitleStyle" TargetType="TextBlock" BasedOn="{StaticResource TooltipBaseTextStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding NameCTS.Text}" Value="">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding NameCTS.Text}" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TooltipCtxTransStringTitleStyle" TargetType="TextBlock" BasedOn="{StaticResource TooltipCtxTransStringDefaultTitleStyle}">
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="FontSize" Value="{StaticResource BigFontSize}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{StaticResource TooltipColor.Title}" />
        <Setter Property="LineHeight" Value="{StaticResource TooltipTitleLineHeight}"/>
        <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
    </Style>

    <Style x:Key="TooltipTitleSurround" TargetType="StackPanel">
        <Setter Property="Margin" Value="0,0,0,0" />
    </Style>

    <Style x:Key="TooltipStripTopStyle" TargetType="ls:LSNineSliceImage" >
        <Setter Property="Visibility" Value="Collapsed" />
    </Style>

    <Style x:Key="TooltipSubTitleStyle" TargetType="TextBlock" BasedOn="{StaticResource TooltipDefaultTextStyle}">
        <Setter Property="FontSize" Value="{StaticResource MediumFontSize}" />
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{StaticResource TooltipColor.SubTitle}" />
        <Setter Property="Margin" Value="{StaticResource SubtitleMargin}" />
    </Style>

    <Style x:Key="TooltipSubTitleNoCollapseStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource MediumFontSize}" />
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{StaticResource TooltipColor.SubTitle}" />
        <Setter Property="Margin" Value="{StaticResource SubtitleMargin}" />
    </Style>

    <Style x:Key="CampFireIcon" TargetType="Image">
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_campSupplies.png" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="-16,4,0,0" />
        <Setter Property="DockPanel.Dock" Value="Left" />
        <Setter Property="Stretch" Value="None" />
    </Style>

    <Style x:Key="TooltipItemRarityTextStyle" TargetType="TextBlock" BasedOn="{StaticResource TooltipTitleStyle}">
        <Setter Property="Foreground" Value="{StaticResource TooltipColor.Title}" />
        <Style.Triggers>
            <!-- Common is not displayed -->
            <DataTrigger Binding="{Binding Path=OwnerDCWidget.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:LSElementCopy}}}" Value="Controller">
                <Setter Property="FontWeight" Value="DemiBold"/>
                <Setter Property="FontSize" Value="{StaticResource LargeFontSize}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Rarity}" Value="Uncommon">
                <Setter Property="Foreground" Value="{StaticResource ItemRarityColour.Uncommon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Rarity}" Value="Rare">
                <Setter Property="Foreground" Value="{StaticResource ItemRarityColour.Rare}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Rarity}" Value="VeryRare">
                <Setter Property="Foreground" Value="{StaticResource ItemRarityColour.VeryRare}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Rarity}" Value="Legendary">
                <Setter Property="Foreground" Value="{StaticResource ItemRarityColour.Legendary}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsStoryItem}" Value="True">
                <Setter Property="Foreground" Value="{StaticResource LS_storyColor}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TooltipItemRarityRectangleStyleBase" TargetType="Rectangle">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Height" Value="400"/>
        <Setter Property="Margin" Value="-60,-30,-60,0"/>
        <Setter Property="Opacity" Value="0.25"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="Clip">
            <Setter.Value>
                <PathGeometry Transform="{Binding ElementName=ActualContainer,Path=RenderTransform}">
                    <PathGeometry.Figures>
                        <PathFigure StartPoint="25,600" IsClosed="True">
                            <LineSegment Point="25,20"/>
                            <LineSegment Point="27,17"/>
                            <LineSegment Point="30,14"/>
                            <LineSegment Point="33,11"/>
                            <LineSegment Point="36,10"/>

                            <LineSegment Point="872,10"/>
                            <LineSegment Point="876,11"/>
                            <LineSegment Point="881,16"/>
                            <LineSegment Point="883,18"/>
                            <LineSegment Point="884,20"/>
                            <LineSegment Point="885,28"/>
                            <LineSegment Point="885,600"/>
                        </PathFigure>
                    </PathGeometry.Figures>
                </PathGeometry>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Special Tooltip Template without pin message (it must be added manually) -->
    <ControlTemplate x:Key="NoPinTooltipTemplate" TargetType="ContentControl">
        <ls:LSNineSliceImage Style="{DynamicResource DefaultTooltip9Slice}" HorizontalAlignment="Left">
            <Grid x:Name="tooltipContentParent">
                <Rectangle Style="{DynamicResource TooltipBottomGradientStyle}" />
                <ContentPresenter x:Name="tooltipContent" MaxWidth="{DynamicResource MaxTooltipContentWidth}" />
            </Grid>

            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:LSPlaySound Sound="UI_HUD_Shared_Tooltip_Show"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="Unloaded">
                    <ls:LSPlaySound Sound="UI_HUD_Shared_Tooltip_Hide"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </ls:LSNineSliceImage>
    </ControlTemplate>



    <!-- ToolTip Style -->
    <Style x:Key="tooltipStyle" TargetType="ToolTip" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Background" Value="{StaticResource Brush.Background.Popup}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border.Popup}"/>
        <Setter Property="Foreground" Value="{DynamicResource LS_tint100}"/>
        <Setter Property="Padding" Value="6,4"/>
        <Setter Property="Placement" Value="Mouse"/>
        <Setter Property="VerticalOffset" Value="21"/> <!-- Cursor Height -->
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template" Value="{StaticResource BaseTooltipTemplate}"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Content,RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource TypeConverter}}" Value="ls.VMItem"/>
                    <Condition Binding="{Binding Path=Content.IsEquipment,RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                    <Condition  Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                <Binding Path="(ls:TooltipExtender.Context)" RelativeSource="{RelativeSource Mode=Self}"/>
                                <Binding Source="World"/>
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{DynamicResource CompareTooltipTemplate}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DefaultTooltip9Slice" TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
        <Setter Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/TT_full_bg.png" />
        <Setter Property="Slices" Value="82" />
        <Setter Property="MinWidth" Value="152" />
        <Setter Property="MinHeight" Value="88" />
        <Setter Property="Padding" Value="100,84" />
        <Setter Property="Margin" Value="-50" />
        <!-- Compensate the big shadow surrounding the image -->
        <Setter Property="Focusable" Value="False" />
    </Style>


    <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource tooltipStyle}">
        <!-- Override the ToolTip Template with a debug message asking the developer to use LSTooltip rather than ToolTip -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <ls:LSNineSliceImage Style="{DynamicResource DefaultTooltip9Slice}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Border BorderBrush="Yellow" BorderThickness="4">
                            <ContentPresenter VerticalAlignment="Top"/>
                        </Border>
                    </ls:LSNineSliceImage>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LSTooltipStyle" TargetType="ls:LSTooltip" BasedOn="{StaticResource tooltipStyle}">
        <Style.Resources>
            <Style TargetType="TextBlock">
                <Setter Property="TextWrapping" Value="Wrap"/>
            </Style>
            <Style TargetType="ContentPresenter">
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="TextWrapping" Value="Wrap"/>
                    </Style>
                </Style.Resources>
            </Style>
        </Style.Resources>
        <Setter Property="ls:TooltipExtender.Owner" Value="{Binding (ls:TooltipExtender.Owner), Mode=OneTime, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="PlayerId" Value="{Binding Path=PlayerId , RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" />
        <Setter Property="ls:TooltipExtender.Content" Value="{Binding Path=Content,RelativeSource={RelativeSource Mode=Self}}" />
        <Setter Property="CanBePinned" Value="False"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Owner, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ls:LSElementCopy}},Converter={StaticResource NullToBoolTrueConverter}}" Value="False">
                <Setter Property="ls:TooltipExtender.Owner" Value="{Binding Path=Owner, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ls:LSElementCopy}}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ls:LSTooltip}" BasedOn="{StaticResource LSTooltipStyle}"/>

    
    
    
    <!-- AlignmentWrapper style -->
    <Style TargetType="{x:Type ls:AlignmentWrapper}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ContentPresenter x:Name="WrapperContent" HorizontalAlignment="Left" VerticalAlignment="Top">
                        <ContentPresenter.Margin>
                            <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                <Binding Path="PlacementCoordinates.X" RelativeSource="{RelativeSource Mode=TemplatedParent}"/>
                                <Binding Path="PlacementCoordinates.Y" RelativeSource="{RelativeSource Mode=TemplatedParent}"/>
                                <Binding Path="PlacementCoordinates.X" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                <Binding Path="PlacementCoordinates.Y" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                            </MultiBinding>
                        </ContentPresenter.Margin>
                        <b:Interaction.Behaviors>
                            <ls:KeepInsideParentBehavior Parent="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                        </b:Interaction.Behaviors>
                    </ContentPresenter>

                    <ControlTemplate.Triggers>

                        <!-- Top placement -->
                        <DataTrigger Binding="{Binding Path=Placement, RelativeSource={RelativeSource Mode=Self}}" Value="Top">
                            <Setter TargetName="WrapperContent" Property="VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="WrapperContent" Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Path="PlacementCoordinates.X" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}"/>
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementCoordinates.X" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                        <Binding Source="0"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Source="0"/>
                                        <Binding Source="0"/>
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementMargin.Bottom" RelativeSource="{RelativeSource Mode=Self}"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Placement, RelativeSource={RelativeSource Mode=Self}}" Value="Top"/>
                                <Condition Binding="{Binding Path=PlacementSwapped, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="WrapperContent" Property="VerticalAlignment" Value="Top"/>
                            <Setter TargetName="WrapperContent" Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Path="PlacementCoordinates.X" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}"/>
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementCoordinates.Y" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                        <Binding Source="0"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementMargin.Top" RelativeSource="{RelativeSource Mode=Self}"/>
                                        <Binding Source="0"/>
                                        <Binding Source="0"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>

                        <!-- Bottom placement -->
                        <DataTrigger Binding="{Binding Path=Placement, RelativeSource={RelativeSource Mode=Self}}" Value="Bottom">
                            <Setter TargetName="WrapperContent" Property="VerticalAlignment" Value="Top"/>
                            <Setter TargetName="WrapperContent" Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Path="PlacementCoordinates.X" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}"/>
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementCoordinates.X" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                        <Binding Source="0"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementMargin.Top" RelativeSource="{RelativeSource Mode=Self}"/>
                                        <Binding Source="0"/>
                                        <Binding Source="0"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Placement, RelativeSource={RelativeSource Mode=Self}}" Value="Bottom"/>
                                <Condition Binding="{Binding Path=PlacementSwapped, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="WrapperContent" Property="VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="WrapperContent" Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Path="PlacementCoordinates.X" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}"/>
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementCoordinates.X" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                        <Binding Source="0"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Source="0"/>
                                        <Binding Source="0"/>
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementMargin.Bottom" RelativeSource="{RelativeSource Mode=Self}"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>

                        <!-- Right placement -->
                        <DataTrigger Binding="{Binding Path=Placement, RelativeSource={RelativeSource Mode=Self}}" Value="Right">
                            <Setter TargetName="WrapperContent" Property="HorizontalAlignment" Value="Left"/>
                            <Setter TargetName="WrapperContent" Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementCoordinates.Y" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}"/>
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementCoordinates.Y" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Path="PlacementMargin.Left" RelativeSource="{RelativeSource Mode=Self}"/>
                                        <Binding Source="0"/>
                                        <Binding Source="0"/>
                                        <Binding Source="0"/>
                                        <!--<Binding Source="0"/>-->
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Placement, RelativeSource={RelativeSource Mode=Self}}" Value="Right"/>
                                <Condition Binding="{Binding Path=PlacementSwapped, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="WrapperContent" Property="HorizontalAlignment" Value="Right"/>
                            <Setter TargetName="WrapperContent" Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementCoordinates.Y" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}"/>
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementCoordinates.Y" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Source="0"/>
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementMargin.Right" RelativeSource="{RelativeSource Mode=Self}"/>
                                        <Binding Source="0"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>

                        <!-- Left placement -->
                        <DataTrigger Binding="{Binding Path=Placement, RelativeSource={RelativeSource Mode=Self}}" Value="Left">
                            <Setter TargetName="WrapperContent" Property="HorizontalAlignment" Value="Right"/>
                            <Setter TargetName="WrapperContent" Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementCoordinates.Y" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}"/>
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementCoordinates.Y" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Source="0"/>
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementMargin.Right" RelativeSource="{RelativeSource Mode=Self}"/>
                                        <Binding Source="0"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Placement, RelativeSource={RelativeSource Mode=Self}}" Value="Left"/>
                                <Condition Binding="{Binding Path=PlacementSwapped, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="WrapperContent" Property="HorizontalAlignment" Value="Left"/>
                            <Setter TargetName="WrapperContent" Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementCoordinates.Y" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}"/>
                                        <Binding Source="0"/>
                                        <Binding Path="PlacementCoordinates.Y" RelativeSource="{RelativeSource AncestorType={x:Type ls:AlignmentWrapper}}" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Path="PlacementMargin.Left" RelativeSource="{RelativeSource Mode=Self}"/>
                                        <Binding Source="0"/>
                                        <Binding Source="0"/>
                                        <Binding Source="0"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Tooltip Icons -->
    <ImageSource x:Key="IconActionPoint" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ap_d.png</ImageSource>
    <ImageSource x:Key="IconActionPointUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ap_used.png</ImageSource>
    <ImageSource x:Key="IconActionPointUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ap_missing.png</ImageSource>

    <ImageSource x:Key="IconBonusActionPoint" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_bonusActionPointTT.png</ImageSource>
    <ImageSource x:Key="IconBonusActionPointUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/bap_used.png</ImageSource>
    <ImageSource x:Key="IconBonusActionPointUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_bonusActionPointTT_missing.png</ImageSource>

    <ImageSource x:Key="IconReactionPoint" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_reactionPointTT.png</ImageSource>
    <ImageSource x:Key="IconReactionPointUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_reactionPointTT_missing.png</ImageSource>

    <ImageSource x:Key="IconSpellSlot" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_spellSlotTT.png</ImageSource>
    <ImageSource x:Key="IconSpellSlotUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_spent.png</ImageSource>
    <ImageSource x:Key="IconSpellSlotUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_spellSlotTT_missing.png</ImageSource>

    <ImageSource x:Key="IconWarlockSpellSlot" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_warlock.png</ImageSource>
    <ImageSource x:Key="IconWarlockSpellSlotUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_warlock_spent.png</ImageSource>
    <ImageSource x:Key="IconWarlockSpellSlotUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_warlock_missing.png</ImageSource>

    <ImageSource x:Key="SorceryPoint" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_sorc_d.png</ImageSource>
    <ImageSource x:Key="SorceryPointUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_sorc_spent.png</ImageSource>
    <ImageSource x:Key="SorceryPointUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_sorc_missing.png</ImageSource>

    <ImageSource x:Key="KiPoint" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_ki.png</ImageSource>
    <ImageSource x:Key="KiPointUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_ki_spent.png</ImageSource>
    <ImageSource x:Key="KiPointUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_ki_missing.png</ImageSource>

    <ImageSource x:Key="LayOnHandsCharge" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_LayOnHands.png</ImageSource>
    <ImageSource x:Key="LayOnHandsChargeUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_LayOnHands_spent.png</ImageSource>
    <ImageSource x:Key="LayOnHandsChargeUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_LayOnHands_missing.png</ImageSource>

    <ImageSource x:Key="Rage" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rage.png</ImageSource>
    <ImageSource x:Key="RageUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rage_spent.png</ImageSource>
    <ImageSource x:Key="RageUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rage_missing.png</ImageSource>

    <ImageSource x:Key="BardicInspiration" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_inspiration.png</ImageSource>
    <ImageSource x:Key="BardicInspirationUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_inspiration_spent.png</ImageSource>
    <ImageSource x:Key="BardicInspirationUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_inspiration_missing.png</ImageSource>

    <ImageSource x:Key="ChannelDivinity" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelDivinity_d.png</ImageSource>
    <ImageSource x:Key="ChannelDivinityUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelDivinity_spent.png</ImageSource>
    <ImageSource x:Key="ChannelDivinityUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelDivinity_missing.png</ImageSource>

    <ImageSource x:Key="ChannelOath" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelOath.png</ImageSource>
    <ImageSource x:Key="ChannelOathUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelOath_spent.png</ImageSource>
    <ImageSource x:Key="ChannelOathUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelOath_missing.png</ImageSource>

    <ImageSource x:Key="SuperiorityDie" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_res_superiorityDice_d.png</ImageSource>
    <ImageSource x:Key="SuperiorityDieUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_res_superiorityDice_spent.png</ImageSource>
    <ImageSource x:Key="SuperiorityDieUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_res_superiorityDice_missing.png</ImageSource>

    <ImageSource x:Key="ArcaneRecoveryPoint" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_arcaneRecovery_d.png</ImageSource>
    <ImageSource x:Key="ArcaneRecoveryPointUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_arcaneRecovery_spent.png</ImageSource>
    <ImageSource x:Key="ArcaneRecoveryPointUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_arcaneRecovery_missing.png</ImageSource>

    <ImageSource x:Key="IconMovement" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_movement.png</ImageSource>
    <ImageSource x:Key="IconMovementUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_movement_missing.png</ImageSource>

    <ImageSource x:Key="IconRitualPoint" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rituals_d.png</ImageSource>
    <ImageSource x:Key="IconRitualPointDisabled" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rituals_disabled.png</ImageSource>

    <ImageSource x:Key="NaturalRecovery">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_NaturalRecovery.png</ImageSource>
    <ImageSource x:Key="NaturalRecoverySpent">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_NaturalRecovery_spent.png</ImageSource>
    <ImageSource x:Key="NaturalRecoveryUnavailable">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_NaturalRecovery_missing.png</ImageSource>

    <ImageSource x:Key="WildShape">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_wildshape.png</ImageSource>
    <ImageSource x:Key="WildShapeSpent">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_wildshape_spent.png</ImageSource>
    <ImageSource x:Key="WildShapeUnavailable">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_wildshape_missing.png</ImageSource>

    <ImageSource x:Key="TidesOfChaos">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_tidesOfChaos_d.png</ImageSource>
    <ImageSource x:Key="TidesOfChaosSpent">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_tidesOfChaos_spent.png</ImageSource>
    <ImageSource x:Key="TidesOfChaosUnavailable">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_tidesOfChaos_missing.png</ImageSource>

    <ImageSource x:Key="WarPriestActionPoint">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_warPriest.png</ImageSource>
    <ImageSource x:Key="WarPriestActionPointSpent">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_warPriest_spent.png</ImageSource>
    <ImageSource x:Key="WarPriestActionPointUnavailable">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_warPriest_missing.png</ImageSource>

    <ImageSource x:Key="FungalInfestationCharge">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_FungalInfestationCharge.png</ImageSource>
    <ImageSource x:Key="FungalInfestationChargeSpent">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_FungalInfestationCharge.png</ImageSource>
    <ImageSource x:Key="FungalInfestationChargeUnavailable">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_FungalInfestationCharge.png</ImageSource>

    <ImageSource x:Key="LuckPoint">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_luck.png</ImageSource>
    <ImageSource x:Key="LuckPointSpent">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_luck_spent.png</ImageSource>
    <ImageSource x:Key="LuckPointUnavailable">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_luck_missing.png</ImageSource>

    <ImageSource x:Key="PsiPoint" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_psi_d.png</ImageSource>
    <ImageSource x:Key="PsiPointUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_psi_spent.png</ImageSource>
    <ImageSource x:Key="PsiPointUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_psi_missing.png</ImageSource>
	
    <ImageSource x:Key="BladesongCharge" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_bladesong_d.png</ImageSource>
    <ImageSource x:Key="BladesongChargeUsed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_bladesong_spent.png</ImageSource>
    <ImageSource x:Key="BladesongChargeUnavailable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_bladesong_missing.png</ImageSource>

    <ImageSource x:Key="IconMagicDamage" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_magic.png</ImageSource>
    <ImageSource x:Key="IconRange" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_range.png</ImageSource>
    <ImageSource x:Key="IconRadius" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_radius.png</ImageSource>
    <ImageSource x:Key="IconArmorClass" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_AC.png</ImageSource>
    <ImageSource x:Key="IconArmorClassCharacter" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_AC_character.png</ImageSource>
    <ImageSource x:Key="IconHanded" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_handedness.png</ImageSource>
    <ImageSource x:Key="IconWeight" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/ico_weight.png</ImageSource>
    <ImageSource x:Key="IconWeightWarning" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/ico_weight_warning.png</ImageSource>
    <ImageSource x:Key="IconGold" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_coin.png</ImageSource>
    <ImageSource x:Key="IconAmmunition" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_ammunitionType.png</ImageSource>
    <ImageSource x:Key="IconAttack" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_roll_attack.png</ImageSource>
    <ImageSource x:Key="IconSave" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_roll_save.png</ImageSource>
    <ImageSource x:Key="IconSaveTurn" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_roll_save_onTurn.png</ImageSource>
    <ImageSource x:Key="IconConcentration" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_concentration.png</ImageSource>
    <ImageSource x:Key="IconDippable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_dippable.png</ImageSource>
    <ImageSource x:Key="IconFinesse" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_finesse.png</ImageSource>
    <ImageSource x:Key="IconThrown" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_throwable.png</ImageSource>
    <ImageSource x:Key="IconHeavy" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_heavyWeight.png</ImageSource>
    <ImageSource x:Key="IconLight" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_lightWeight.png</ImageSource>
    <ImageSource x:Key="IconLoading" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_loading.png</ImageSource>
    <ImageSource x:Key="IconNoDuelWield" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_noDuelWield.png</ImageSource>
    <ImageSource x:Key="IconReach" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_reach.png</ImageSource>
    <ImageSource x:Key="IconPreparation" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_spellbook.png</ImageSource>
    <ImageSource x:Key="IconCastAbility" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_spellbook.png</ImageSource>
    <ImageSource x:Key="IconCooldown" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_recharge.png</ImageSource>
    <ImageSource x:Key="IconType" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_type.png</ImageSource>
    <ImageSource x:Key="IconRace" >pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/ico_race.png</ImageSource>
    <ImageSource x:Key="IconHealth" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_health.png</ImageSource>
    <ImageSource x:Key="IconSpeed" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_speed.png</ImageSource>
    <ImageSource x:Key="IconDuration" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_duration.png</ImageSource>
    <ImageSource x:Key="IconQuote" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/scrollBox_icon.png</ImageSource>
    <ImageSource x:Key="IconResistanceVulnerable" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/resistance_vulnerable.png</ImageSource>
    <ImageSource x:Key="IconResistanceResistant" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/resistance_resistant.png</ImageSource>
    <ImageSource x:Key="IconResistanceImmune" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/resistance_immune.png</ImageSource>
    <ImageSource x:Key="IconTarget" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_target.png</ImageSource>
    <ImageSource x:Key="IconProficiency" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_roll_attack.png</ImageSource>
    <ImageSource x:Key="IconProficiencyArmour" >pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/ico_AC.png</ImageSource>
    <ImageSource x:Key="IconUpcast" >pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_upcasting.png</ImageSource>
    <ImageSource x:Key="IconReroll" >pack://application:,,,/GustavNoesisGUI;component/Assets/CombatLog/ico_reroll.png</ImageSource>

    <!-- ContextMenuItem Style -->
    <Style x:Key="BaseLSContextMenuItem" TargetType="{x:Type ls:ContextMenuItem}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="ls:ContextMenuItem">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="TextWrapping" Value="Wrap"/>
                            <Setter Property="Foreground" Value="{StaticResource LS_alertTxtColor}"/>
                        </Style>

                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <ls:LSNineSliceImage x:Name="bg" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/ContextMenu/contextMenu_itemFrame.png" Slices="48 40 48 1">
                            <ls:LSNineSliceImage.Content>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>

                                    <StackPanel x:Name="content" Grid.Column="0" Margin="0 0 28 5" Orientation="Horizontal" Tag="" >
                                        <Image x:Name="pointer" VerticalAlignment="Top" Margin="0 7 5 0" Visibility="Collapsed" Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/ContextMenu/ico_arrow.png"/>

                                        <ContentPresenter x:Name="text" ContentSource="Header" Margin="20 0 17 0"/>
                                    </StackPanel>
                                    <Control Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Top" DataContext="{Binding EncumbranceStateWarning,RelativeSource={RelativeSource TemplatedParent}}" Template="{StaticResource EncumbranceStateWarningTemplate}"/>
                                </Grid>
                            </ls:LSNineSliceImage.Content>
                        </ls:LSNineSliceImage>
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="Loaded">
                                <b:ControlStoryboardAction>
                                    <b:ControlStoryboardAction.Storyboard>
                                        <Storyboard >
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" >
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </b:ControlStoryboardAction.Storyboard>
                                </b:ControlStoryboardAction>
                            </b:EventTrigger>
                            <b:TimerTrigger EventName="Loaded" MillisecondsPerTick="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:ContextMenuItem}}, Converter={StaticResource MultiplierConverter}, ConverterParameter=50}" TotalTicks="1">
                                <b:ControlStoryboardAction>
                                    <b:ControlStoryboardAction.Storyboard>
                                        <Storyboard >
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" >
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="-110"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.30" Value="0">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseOut"/>
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>

                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" >
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.30" Value="1">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseOut"/>
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </b:ControlStoryboardAction.Storyboard>
                                </b:ControlStoryboardAction>
                            </b:TimerTrigger>
                            <b:EventTrigger EventName="MouseEnter">
                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="MouseDown">
                                <ls:LSPlaySound Sound="UI_HUD_ContextMenu_Select"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="MouseUp">
                                <ls:LSPlaySound Sound="{Binding Tag, ElementName=content}"/>
                            </b:EventTrigger>

                            <b:EventTrigger EventName="MouseDown">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding TargetActionType, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TargetActionConverter}}" Operator="Equal" RightOperand="SendToUserChest" />
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <!-- Tutorial UI Event - Send To Camp-->
                                <b:InvokeCommandAction Command="{Binding DataContext.TutorialEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="0204e362-7cbe-4d8b-b2d6-1884e5ff00e0"/>
                            </b:EventTrigger>

                            <b:EventTrigger EventName="MouseDown">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding TargetActionType, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TargetActionConverter}}" Operator="Equal" RightOperand="SetJunk" />
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <!-- Tutorial UI Event - Mark As Wares-->
                                <b:InvokeCommandAction Command="{Binding DataContext.TutorialEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="ee1b1579-5e6e-426c-91bb-b28e9dc90a7e"/>
                            </b:EventTrigger>

                        </b:Interaction.Triggers>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <DataTrigger Binding="{Binding Path=TargetActionType, RelativeSource={RelativeSource Self}, Converter={StaticResource TargetActionConverter}}" Value="LearnSpell">
                            <Setter Property="Tag" Value="UI_HUD_Learn_Spell" TargetName="content"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding TargetActionType, RelativeSource={RelativeSource Self}, Converter={StaticResource TargetActionConverter}}" Value="SendToUserChest">
                            <Setter Property="Tag" Value="UI_HUD_Inventory_SendToCamp" TargetName="content"/>
                        </DataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsTitle" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="pointer" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="text" Property="Margin" Value="0"/>
                                <Setter TargetName="bg" Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ContextMenu/contextMenu_itemSelector.png"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsIndented" Value="True">
                            <Setter TargetName="content" Property="Margin" Value="12 0 28 5"/>
                        </Trigger>
                        <Trigger Property="IsTitle" Value="True">
                            <Setter TargetName="bg" Property="ImageSource" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HeaderTemplate" >
            <Setter.Value>
                <DataTemplate>
                    <Border>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock x:Name="text" Text="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Foreground="{DynamicResource LS_ActivePanelFontColor}" />
                            <TextBlock x:Name="warningText" Text="{Binding Source='h7da55b0ag5bf9g4809ga229g14d2208a11ae', Converter={StaticResource TranslatedStringConverter}}" Foreground="{Binding ElementName=text, Path=Foreground}" Margin="10,0" Visibility="Collapsed"/>
                        </StackPanel>
                    </Border>
                    <DataTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsLegal, RelativeSource={RelativeSource AncestorType=ls:ContextMenuItem}}" Value="False"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=ls:ContextMenuItem}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="text" Property="TextBlock.Foreground" Value="{DynamicResource LS_alertTxtColor}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsLegal, RelativeSource={RelativeSource AncestorType=ls:ContextMenuItem}}" Value="True"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=ls:ContextMenuItem}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="text" Property="TextBlock.Foreground" Value="{DynamicResource LS_InactivePanelFontColor}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsLegal, RelativeSource={RelativeSource AncestorType=ls:ContextMenuItem}}" Value="False"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=ls:ContextMenuItem}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="text" Property="TextBlock.Foreground" Value="{DynamicResource LS_IllegalColorDisabled}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=ls:ContextMenuItem}}" Value="True"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=ls:ContextMenuItem}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="text" Property="TextBlock.Foreground" Value="{DynamicResource LS_tint100}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsTitle, RelativeSource={RelativeSource AncestorType=ls:ContextMenuItem}}" Value="False"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=ls:ContextMenuItem}}" Value="False"/>
                                <Condition Binding="{Binding TargetActionType, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource TargetActionConverter}}" Value="SendToCharacter"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="warningText" Property="Visibility" Value="Visible"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <Style TargetType="{x:Type ls:ContextMenuItem}" BasedOn="{StaticResource BaseLSContextMenuItem}" />

    <ControlTemplate x:Key="BaseContextMenu" TargetType="{x:Type ls:ContextMenu}">
        <Viewbox x:Name="ViewboxContainer" StretchDirection="DownOnly" MaxHeight="{Binding ActualHeight, ElementName=CanvasRoot}">
            <Grid>
                <ls:LSNineSliceImage ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/ContextMenu/contextMenu_bg.png" Slices="50">
                    <ItemsPresenter HorizontalAlignment="Left" VerticalAlignment="Center" Margin="30 40 30 30"/>
                </ls:LSNineSliceImage>
                <ls:LSInputBinding BoundEvent="UICancel" Visibility="Collapsed" TriggerOnRelease="True" IsEnabled="True" PlayerId="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                   Command="{Binding DataContext.HideContextMenu, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" />
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <ls:LSPlaySound Sound="UI_HUD_ContextMenu_Open"/>
                        <!-- Tutorial UI Event - Context Menu Opened-->
                        <b:InvokeCommandAction Command="{Binding DataContext.TutorialEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="59db3193-478a-4d85-af8c-2ab29d8dbf25"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </Grid>
        </Viewbox>
    </ControlTemplate>

    <!-- ContextMenu Style-->
    <Style x:Key="BaseLSContextMenu" TargetType="{x:Type ls:ContextMenu}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="RenderTransformOrigin" Value="0.0,0.0" />
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="AlternationCount" Value="40"/>
        <Setter Property="Template" Value="{StaticResource BaseContextMenu}" />
        <Setter Property="RenderTransform" >
            <Setter.Value>
                <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform/>
                    <RotateTransform/>
                    <TranslateTransform/>
                </TransformGroup>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="Opened">
                <BeginStoryboard >
                    <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                            <LinearDoubleKeyFrame KeyTime="0:0:0" Value="0.3" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.20" Value="1.0">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <CubicEase EasingMode="EaseOut"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                            <LinearDoubleKeyFrame KeyTime="0:0:0" Value="0.3" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1.0">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <CubicEase EasingMode="EaseOut"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                            <LinearDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1.0">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <CubicEase EasingMode="EaseIn"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ls:ContextMenu}" BasedOn="{StaticResource BaseLSContextMenu}" />

    <!-- World map styles BEGIN -->
    <Style x:Key="Map.MarkerText" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource LS_tint00}" />
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="noesis:Text.Stroke" Value="{DynamicResource LS_tint100}"/>
        <Setter Property="noesis:Text.StrokeThickness" Value="4"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>
    <!-- World map styles END -->


    <!-- ============== SLIDER ============== -->

    <!-- Slider button -->
    <Style x:Key="Slider.RepeatButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Slider.ThumbStyle" TargetType="Thumb">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Grid>
                        <Image x:Name="img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_d.png" Stretch="None"/>
                        <Image x:Name="ico" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_scrubber_d.png" Stretch="None"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_h.png" TargetName="img"/>
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_scrubber_h.png" TargetName="ico"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_p.png" TargetName="img"/>
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_scrubber_h.png" TargetName="ico"/>
                            <Setter Property="Margin" Value="0,2,0,-2" TargetName="ico"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_disabled.png" TargetName="img"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Horizontal LSSlider -->
    <ControlTemplate x:Key="Slider.TemplateDisplayValue" TargetType="ls:LSSlider">
        <StackPanel>
            <TickBar x:Name="TopTick" SnapsToDevicePixels="True" Placement="Top" Height="4" Visibility="Collapsed">
                <TickBar.Fill>
                    <SolidColorBrush Color="{DynamicResource tint00}" />
                </TickBar.Fill>
            </TickBar>

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                </Grid.RowDefinitions>

                <Image HorizontalAlignment="Center" VerticalAlignment="Center" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/ItemSplitter/splitter_bar_d.png" Stretch="None" Grid.Column="0" Grid.ColumnSpan="3" />

                <!-- left arrow button -->
                <ls:LSRepeatButton Grid.Column="0" x:Name="PART_ArrowDecrease" Command="Slider.DecreaseSmall" Delay="{StaticResource Slider.RepeatDelay}" Interval="{StaticResource Slider.RepeatInterval}" SoundID="UI_HUD_Shared_Slider_LeftButton">
                    <RepeatButton.Template>
                        <ControlTemplate TargetType="RepeatButton">
                            <Grid Background="Transparent" Margin="16,6,0,6">
                                <Image x:Name="img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_d.png" Stretch="None"/>
                                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browse.png" Stretch="None">
                                    <Image.RenderTransform>
                                        <ScaleTransform ScaleX="-1" CenterX="14"/>
                                    </Image.RenderTransform>
                                </Image>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_h.png" TargetName="img"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_p.png" TargetName="img"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </RepeatButton.Template>
                </ls:LSRepeatButton>

                <!-- track and thumb -->
                <Track Grid.Column="1" x:Name="PART_Track">
                    <Track.DecreaseRepeatButton>
                        <ls:LSRepeatButton x:Name="PART_TrackBefore" Style="{StaticResource Slider.RepeatButtonStyle}" Command="Slider.DecreaseLarge" Delay="{StaticResource Slider.RepeatDelay}" Interval="{StaticResource Slider.RepeatInterval}" SoundID="UI_HUD_Shared_Slider_LeftButton"/>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <ls:LSThumb Style="{StaticResource Slider.ThumbStyle}" SoundID="UI_HUD_Shared_Slider_Thumb"/>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <ls:LSRepeatButton x:Name="PART_TrackAfter" Style="{StaticResource Slider.RepeatButtonStyle}" Command="Slider.IncreaseLarge" Delay="{StaticResource Slider.RepeatDelay}" Interval="{StaticResource Slider.RepeatInterval}" SoundID="UI_HUD_Shared_Slider_RightButton"/>
                    </Track.IncreaseRepeatButton>
                </Track>

                <!-- right arrow button -->
                <ls:LSRepeatButton Grid.Column="2" x:Name="PART_ArrowIncrease" Command="Slider.IncreaseSmall" Delay="{StaticResource Slider.RepeatDelay}" Interval="{StaticResource Slider.RepeatInterval}" SoundID="UI_HUD_Shared_Slider_RightButton" Margin="0,0,16,0">
                    <RepeatButton.Template>
                        <ControlTemplate TargetType="RepeatButton">
                            <Grid Background="Transparent" Margin="16,6,0,6">
                                <Image x:Name="img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_d.png" Stretch="None"/>
                                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_browse.png" Stretch="None"/>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_h.png" TargetName="img"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_p.png" TargetName="img"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </RepeatButton.Template>
                </ls:LSRepeatButton>
            </Grid>

            <TickBar x:Name="BottomTick" SnapsToDevicePixels="True" Fill="{TemplateBinding Foreground}" Placement="Bottom" Height="4" Visibility="Collapsed" />
        </StackPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="Slider.StyleDisplayValue" TargetType="{x:Type ls:LSSlider}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="MinHeight" Value="21" />
                <Setter Property="Template" Value="{StaticResource Slider.TemplateDisplayValue}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- ============== END SLIDER ============== -->

    <!-- ============== Base Scroll Bar Parts ============== -->

    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type ls:LSRepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />

        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Delay" Value="250"/>
        <Setter Property="Interval" Value="100"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ls:LSRepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseScrollBarDownButtonVertical" TargetType="{x:Type ls:LSRepeatButton}">
        <Style.Resources>
            <ImageSource x:Key="DownButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_down_d.png</ImageSource>
            <ImageSource x:Key="HoverDownButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_down_h.png</ImageSource>
            <ImageSource x:Key="PressedDownButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_down_d.png</ImageSource>
            <ImageSource x:Key="DisabledDownButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_down_disabled.png</ImageSource>
        </Style.Resources>

        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="BorderThickness" Value="0,0"/>
        <Setter Property="SoundID" Value="UI_HUD_Shared_Scrollbar_DownButton"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ls:LSRepeatButton}">
                    <Image x:Name="bg" Source="{DynamicResource DownButton}" SnapsToDevicePixels="True" Stretch="None"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Source" TargetName="bg" Value="{DynamicResource HoverDownButton}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" TargetName="bg" Value="{DynamicResource PressedDownButton}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Source" TargetName="bg" Value="{DynamicResource DisabledDownButton}"/>
                            <Setter Property="Visibility" TargetName="bg" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseScrollBarUpButtonVertical" TargetType="{x:Type ls:LSRepeatButton}">

        <Style.Resources>
            <ImageSource x:Key="UpButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_up_d.png</ImageSource>
            <ImageSource x:Key="HoverUpButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_up_h.png</ImageSource>
            <ImageSource x:Key="PressedUpButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_up_d.png</ImageSource>
            <ImageSource x:Key="DisabledUpButton">pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_up_disabled.png</ImageSource>
        </Style.Resources>

        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="BorderThickness" Value="0,0"/>
        <Setter Property="SoundID" Value="UI_HUD_Shared_Scrollbar_UpButton"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ls:LSRepeatButton}">
                    <Image x:Name="bg" Source="{DynamicResource UpButton}" SnapsToDevicePixels="True" Stretch="None"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" TargetName="bg" Value="{DynamicResource HoverUpButton}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" TargetName="bg" Value="{DynamicResource PressedUpButton}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Source" TargetName="bg" Value="{DynamicResource DisabledUpButton}"/>
                            <Setter Property="Visibility" TargetName="bg" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseScrollBarThumbVertical" TargetType="{x:Type ls:LSThumb}">

        <Style.Resources>
            <ImageSource x:Key="Thumb" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_btn_d.png</ImageSource>
            <ImageSource x:Key="HoverThumb" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_btn_h.png</ImageSource>
            <ImageSource x:Key="PressedThumb" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_btn_d.png</ImageSource>
        </Style.Resources>

        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="SoundID" Value="UI_HUD_Shared_Scrollbar_Thumb"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Image x:Name="bg" Source="{DynamicResource Thumb}" SnapsToDevicePixels="True" Stretch="None"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Source" TargetName="bg" Value="{DynamicResource HoverThumb}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Source" TargetName="bg" Value="{DynamicResource PressedThumb}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ============== Scroll Bar Parts ============== -->

    <Style x:Key="ScrollBarLeftButton" TargetType="{x:Type ls:LSRepeatButton}" BasedOn="{StaticResource BaseScrollBarDownButtonVertical}">
        <Style.Resources>
            <ImageSource x:Key="DownButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_h_up_d.png</ImageSource>
            <ImageSource x:Key="HoverDownButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_h_up_h.png</ImageSource>
            <ImageSource x:Key="PressedDownButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_h_up_d.png</ImageSource>
            <ImageSource x:Key="DisabledDownButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_h_up_disabled.png</ImageSource>
        </Style.Resources>
    </Style>

    <Style x:Key="ScrollBarRightButton" TargetType="{x:Type ls:LSRepeatButton}" BasedOn="{StaticResource BaseScrollBarUpButtonVertical}">
        <Style.Resources>
            <ImageSource x:Key="UpButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_h_down_d.png</ImageSource>
            <ImageSource x:Key="HoverUpButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_h_down_h.png</ImageSource>
            <ImageSource x:Key="PressedUpButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_h_down_d.png</ImageSource>
            <ImageSource x:Key="DisabledUpButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_h_down_disabled.png</ImageSource>
        </Style.Resources>
    </Style>

    <Style x:Key="GoldScrollThumb" TargetType="ls:LSThumb">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="SoundID" Value="UI_HUD_Shared_Scrollbar_Thumb"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ls:LSThumb">
                    <ls:LSNineSliceImage x:Name="Thumb" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_btnSelected_d.png" Slices="10,6,10,6" Width="20" Height="{TemplateBinding Height}" MinHeight="{TemplateBinding MinHeight}"/>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Thumb" Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_btnSelected_h.png"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="Thumb" Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_btnSelected_h.png"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GoldScrollThumbHorizontal" TargetType="ls:LSThumb">
        <Setter Property="IsTabStop" Value="True"/>
        <Setter Property="SoundID" Value="UI_HUD_Shared_Scrollbar_Thumb"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="MinWidth" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ls:LSThumb">
                    <ls:LSNineSliceImage x:Name="Thumb" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_horizontal_btnSelected_d.png" Slices="6,10,6,10" Height="20" Width="{TemplateBinding Width}" MinWidth="{TemplateBinding MinWidth}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Thumb" Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_horizontal_btnSelected_h.png"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="Thumb" Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_horizontal_btnSelected_h.png"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Gold ScrollBar-->

    <Style x:Key="GoldScrollBar" TargetType="{x:Type ScrollBar}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderBrush" Value="{StaticResource LS_tint00}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0,0"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="MinHeight" Value="28" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Border Grid.ColumnSpan="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                                <ls:LSRepeatButton  Grid.Column="0" Style="{StaticResource ScrollBarLeftButton}" Command="ScrollBar.LineLeftCommand" Margin="20,0,-20,0"/>
                                <ls:LSRepeatButton Grid.Column="2" Style="{StaticResource ScrollBarRightButton}" Command="ScrollBar.LineRightCommand" Margin="-8,0,8,0"/>
                                <Track Grid.Column="1" Margin="0,0,-12,0" x:Name="PART_Track" ViewportSize="{TemplateBinding ViewportSize}" IsDirectionReversed="false" IsEnabled="{TemplateBinding IsMouseOver}" >
                                    <Track.DecreaseRepeatButton>
                                        <ls:LSRepeatButton x:Name="DecreaseBtn" Command="ScrollBar.PageLeftCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <ls:LSThumb Style="{StaticResource GoldScrollThumbHorizontal}">
                                            <ls:LSThumb.Width>
                                                <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                                                    <Binding Path="ActualWidth" ElementName="PART_Track"/>
                                                    <Binding Path="ActualWidth" ElementName="DecreaseBtn" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                                    <Binding Path="ActualWidth" ElementName="IncreaseBtn" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                                </MultiBinding>
                                            </ls:LSThumb.Width>
                                        </ls:LSThumb>
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <ls:LSRepeatButton x:Name="IncreaseBtn" Command="ScrollBar.PageRightCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                    </Track.IncreaseRepeatButton>
                                </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="MinWidth" Value="28"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Border Grid.Row="0" Grid.RowSpan="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                                <ls:LSRepeatButton Grid.Row="0" Style="{StaticResource BaseScrollBarUpButtonVertical}" Command="ScrollBar.LineUpCommand"/>
                                <Track Grid.Row="1" x:Name="PART_Track" ViewportSize="{TemplateBinding ViewportSize}" IsDirectionReversed="True" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <ls:LSRepeatButton x:Name="DecreaseBtn" Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <ls:LSThumb x:Name="Thumb" Style="{StaticResource GoldScrollThumb}">
                                            <ls:LSThumb.Height>
                                                <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                                                    <Binding Path="ActualHeight" ElementName="PART_Track"/>
                                                    <Binding Path="ActualHeight" ElementName="DecreaseBtn" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                                    <Binding Path="ActualHeight" ElementName="IncreaseBtn" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                                </MultiBinding>
                                            </ls:LSThumb.Height>
                                        </ls:LSThumb>
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <ls:LSRepeatButton x:Name="IncreaseBtn" Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                    </Track.IncreaseRepeatButton>
                                </Track>
                                <ls:LSRepeatButton Grid.Row="2" Style="{StaticResource BaseScrollBarDownButtonVertical}" Command="ScrollBar.LineDownCommand"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding ElementName=PART_Track,Path=ViewportSize }" Value="NaN">
                                    <Setter TargetName="Thumb" Property="Height" Value="{Binding ElementName=Thumb,Path=MinHeight}"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="SimpleGoldScrollBar" TargetType="{x:Type ScrollBar}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="BorderBrush" Value="{StaticResource LS_tint00}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0,0"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="MinHeight" Value="28" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="72"/>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="72" />
                                </Grid.ColumnDefinitions>
                                <Border Grid.ColumnSpan="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                                <Track Grid.Column="1" Margin="0,0,-12,0" x:Name="PART_Track" ViewportSize="NaN" IsDirectionReversed="false" IsEnabled="{TemplateBinding IsMouseOver}" >
                                    <Track.DecreaseRepeatButton>
                                        <ls:LSRepeatButton x:Name="DecreaseBtn" Command="ScrollBar.PageLeftCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <ls:LSThumb Style="{StaticResource GoldScrollThumbHorizontal}">
                                            <ls:LSThumb.Width>
                                                <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                                                    <Binding Path="ActualWidth" ElementName="PART_Track"/>
                                                    <Binding Path="ActualWidth" ElementName="DecreaseBtn" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                                    <Binding Path="ActualWidth" ElementName="IncreaseBtn" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                                </MultiBinding>
                                            </ls:LSThumb.Width>
                                        </ls:LSThumb>
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <ls:LSRepeatButton x:Name="IncreaseBtn" Command="ScrollBar.PageRightCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                    </Track.IncreaseRepeatButton>
                                </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="MinWidth" Value="28" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Border Grid.RowSpan="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>

                                <Track Grid.Row="1" x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <ls:LSRepeatButton x:Name="DecreaseBtn" Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <ls:LSThumb Style="{StaticResource GoldScrollThumb}">
                                            <ls:LSThumb.Height>
                                                <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                                                    <Binding Path="ActualHeight" ElementName="PART_Track"/>
                                                    <Binding Path="ActualHeight" ElementName="DecreaseBtn" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                                    <Binding Path="ActualHeight" ElementName="IncreaseBtn" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                                </MultiBinding>
                                            </ls:LSThumb.Height>
                                        </ls:LSThumb>
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <ls:LSRepeatButton x:Name="IncreaseBtn" Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                    </Track.IncreaseRepeatButton>
                                </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DecorativeGoldScrollBar" TargetType="{x:Type ScrollBar}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="BorderBrush" Value="{StaticResource LS_tint00}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0,0"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="MinHeight" Value="40" />
                <Setter Property="MaxHeight" Value="60"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="72"/>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="72" />
                                </Grid.ColumnDefinitions>

                                <Grid.RowDefinitions>
                                    <RowDefinition Height="40"/>
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>

                                <Border Grid.Row="0" Grid.Column="0" x:Name="TopBg">
                                    <Border.Background>
                                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_h_decor.png" Stretch="None" AlignmentX="Left">
                                            <ImageBrush.RelativeTransform>
                                                <ScaleTransform ScaleX="-1" CenterX="0.5" CenterY="0.5"/>
                                            </ImageBrush.RelativeTransform>
                                        </ImageBrush>
                                    </Border.Background>
                                    <ls:LSRepeatButton Style="{StaticResource ScrollBarLeftButton}" Command="ScrollBar.LineLeftCommand" Margin="20,0,-20,0"/>
                                </Border>

                                <Grid Grid.Row="0" Grid.Column="2" x:Name="BottomBg">
                                    <Border>
                                        <Border.Background>
                                            <ImageBrush  ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_h_decor.png" Stretch="None" AlignmentX="Right"/>
                                        </Border.Background>
                                    </Border>
                                    <ls:LSRepeatButton Style="{StaticResource ScrollBarRightButton}" Command="ScrollBar.LineRightCommand" Margin="-8,0,8,0"/>
                                </Grid>

                                <Border Grid.Row="0" Grid.Column="1" x:Name="MidBg" Background="Transparent"/>

                                <Border Grid.Row="0" Grid.Column="1" Margin="0,0,-12,0">
                                    <Grid>
                                        <Track x:Name="PART_Track" ViewportSize="{TemplateBinding ViewportSize}" IsDirectionReversed="false" IsEnabled="{TemplateBinding IsMouseOver}" >
                                            <Track.DecreaseRepeatButton>
                                                <ls:LSRepeatButton x:Name="DecreaseBtn" Command="ScrollBar.PageLeftCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                            </Track.DecreaseRepeatButton>
                                            <Track.Thumb>
                                                <ls:LSThumb Style="{StaticResource GoldScrollThumbHorizontal}">
                                                    <ls:LSThumb.Width>
                                                        <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                                                            <Binding Path="ActualWidth" ElementName="PART_Track"/>
                                                            <Binding Path="ActualWidth" ElementName="DecreaseBtn" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                                            <Binding Path="ActualWidth" ElementName="IncreaseBtn" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                                        </MultiBinding>
                                                    </ls:LSThumb.Width>
                                                </ls:LSThumb>
                                            </Track.Thumb>
                                            <Track.IncreaseRepeatButton>
                                                <ls:LSRepeatButton x:Name="IncreaseBtn" Command="ScrollBar.PageRightCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                            </Track.IncreaseRepeatButton>
                                        </Track>
                                    </Grid>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="MinWidth" Value="40" />
                <Setter Property="MaxWidth" Value="60"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="72"/>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="72" />
                                </Grid.RowDefinitions>

                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="40"/>
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <Border Grid.Row="0" Grid.Column="0" x:Name="TopBg">
                                    <Border.Background>
                                        <ImageBrush  ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_decor.png" Stretch="None" AlignmentY="Top" />
                                    </Border.Background>
                                    <ls:LSRepeatButton Style="{StaticResource BaseScrollBarUpButtonVertical}" Command="ScrollBar.LineUpCommand" VerticalAlignment="Bottom" Margin="0,0,0,12"/>
                                </Border>

                                <Grid Grid.Row="2" Grid.Column="0" x:Name="BottomBg">
                                    <Border Margin="0,14,0,-14">
                                        <Border.Background>
                                            <ImageBrush  ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/scroll_decor.png" Stretch="None" AlignmentY="Bottom">
                                                <ImageBrush.RelativeTransform>
                                                    <ScaleTransform ScaleY="-1" CenterY="0.5"/>
                                                </ImageBrush.RelativeTransform>
                                            </ImageBrush>
                                        </Border.Background>
                                    </Border>
                                    <ls:LSRepeatButton Style="{StaticResource BaseScrollBarDownButtonVertical}" Command="ScrollBar.LineDownCommand" VerticalAlignment="Bottom" Margin="0,0,0,32"/>
                                </Grid>

                                <Border Grid.Row="1" Grid.Column="0" x:Name="MidBg" Background="Transparent"/>

                                <Grid x:Name="Part_BookmarkHolder" Grid.ColumnSpan="2" Grid.Row="1" Height="{Binding Height, ElementName=PART_Track}" Width="60" HorizontalAlignment="Left" Margin="1,0,0,0"/>

                                <Border Grid.Row="1" Grid.Column="0" Margin="0,-12,0,-12">
                                    <Grid>
                                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" >
                                            <Track.DecreaseRepeatButton>
                                                <ls:LSRepeatButton x:Name="DecreaseBtn" Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                            </Track.DecreaseRepeatButton>
                                            <Track.Thumb>
                                                <ls:LSThumb Style="{StaticResource GoldScrollThumb}">
                                                    <ls:LSThumb.Height>
                                                        <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                                                            <Binding Path="ActualHeight" ElementName="PART_Track"/>
                                                            <Binding Path="ActualHeight" ElementName="DecreaseBtn" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                                            <Binding Path="ActualHeight" ElementName="IncreaseBtn" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-1"/>
                                                        </MultiBinding>
                                                    </ls:LSThumb.Height>
                                                </ls:LSThumb>
                                            </Track.Thumb>
                                            <Track.IncreaseRepeatButton>
                                                <ls:LSRepeatButton x:Name="IncreaseBtn" Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                            </Track.IncreaseRepeatButton>
                                        </Track>
                                    </Grid>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="ScrollBar" BasedOn="{StaticResource GoldScrollBar}"/>
    <Style x:Key="BaseScrollBar" TargetType="ScrollBar" BasedOn="{StaticResource GoldScrollBar}" />
    <Style x:Key="DecorativeScrollBar" TargetType="ScrollBar" BasedOn="{StaticResource DecorativeGoldScrollBar}" />
    <Style x:Key="SimpleScrollBar" TargetType="ScrollBar" BasedOn="{StaticResource SimpleGoldScrollBar}" />

    <!-- Scroll Viewers -->

    <ControlTemplate x:Key="ScrollViewerTemplate" TargetType="ScrollViewer">
        <ControlTemplate.Resources>
            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource DecorativeScrollBar}"/>
            <GridLength x:Key="Top">0</GridLength>
            <GridLength x:Key="Bottom">0</GridLength>
            <GridLength x:Key="Left">0</GridLength>
            <GridLength x:Key="Right">0</GridLength>
        </ControlTemplate.Resources>

        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" CanContentScroll="{TemplateBinding CanContentScroll}"/>

            <Grid Grid.Row="0" Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="{DynamicResource Top}"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="{DynamicResource Bottom}"/>
                </Grid.RowDefinitions>
                <ScrollBar x:Name="PART_VerticalScrollBar" Margin="{TemplateBinding Padding}" Grid.Row="1" Value="{TemplateBinding VerticalOffset}"  Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}"  Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
            </Grid>

            <Grid Grid.Row="1" Grid.Column="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{DynamicResource Left}"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="{DynamicResource Right}"/>
                </Grid.ColumnDefinitions>
                <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Column="1" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}"  Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

            </Grid>
        </Grid>

    </ControlTemplate>

    <ControlTemplate x:Key="NoForcedStyleScrollViewerTemplate" TargetType="ScrollViewer">
        <ControlTemplate.Resources>

            <GridLength x:Key="Top">0</GridLength>
            <GridLength x:Key="Bottom">0</GridLength>
            <GridLength x:Key="Left">0</GridLength>
            <GridLength x:Key="Right">0</GridLength>
        </ControlTemplate.Resources>

        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" CanContentScroll="{TemplateBinding CanContentScroll}"/>

            <Grid Grid.Row="0" Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="{DynamicResource Top}"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="{DynamicResource Bottom}"/>
                </Grid.RowDefinitions>
                <ScrollBar x:Name="PART_VerticalScrollBar" Margin="{TemplateBinding Padding}" Grid.Row="1" Value="{TemplateBinding VerticalOffset}"  Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}"  Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
            </Grid>

            <Grid Grid.Row="1" Grid.Column="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{DynamicResource Left}"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="{DynamicResource Right}"/>
                </Grid.ColumnDefinitions>
                <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Column="1" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}"  Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

            </Grid>
        </Grid>

    </ControlTemplate>

    <ControlTemplate x:Key="FlippedScrollViewerTemplate"  TargetType="ScrollViewer">
        <ControlTemplate.Resources>
            <Style x:Key="ScrollBarStyle" TargetType="ScrollBar" BasedOn="{StaticResource DecorativeGoldScrollBar}"/>
            <GridLength x:Key="Top">0</GridLength>
            <GridLength x:Key="Bottom">0</GridLength>
        </ControlTemplate.Resources>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid Panel.ZIndex="1" Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="{DynamicResource Top}"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="{DynamicResource Bottom}"/>
                </Grid.RowDefinitions>

                <ScrollBar Grid.Row="1" Style="{DynamicResource ScrollBarStyle}"  Value="{TemplateBinding VerticalOffset}"  Maximum="{TemplateBinding ScrollableHeight}"  ViewportSize="{TemplateBinding ViewportHeight}"  Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
            </Grid>
            <ScrollContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" Panel.ZIndex="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" CanContentScroll="{TemplateBinding CanContentScroll}" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="FlippedSimpleScrollViewerTemplate"  TargetType="ScrollViewer">
        <ControlTemplate.Resources>
            <Style x:Key="ScrollBarStyle" TargetType="ScrollBar" BasedOn="{StaticResource BaseScrollBar}"/>
            <GridLength x:Key="Top">0</GridLength>
            <GridLength x:Key="Bottom">0</GridLength>
        </ControlTemplate.Resources>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid Panel.ZIndex="1" Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="{DynamicResource Top}"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="{DynamicResource Bottom}"/>
                </Grid.RowDefinitions>

                <ScrollBar x:Name="Bar" Grid.Row="1" Style="{DynamicResource ScrollBarStyle}" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="Hidden"/>
            </Grid>
            <ScrollContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" Panel.ZIndex="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" CanContentScroll="{TemplateBinding CanContentScroll}" />
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ComputedVerticalScrollBarVisibility, RelativeSource={RelativeSource Self}}" Value="Visible">
                <Setter TargetName="Bar" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="ls:LSScrollBookmark" x:Key="BaseScrollBookmark">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ls:LSScrollBookmark">
                    <Image HorizontalAlignment="Left" VerticalAlignment="Top" Width="60" Margin="0,-7,0,0" x:Name="Holder">
                        <Image.ToolTip>
                            <ls:LSTooltip Content="{Binding Path=Tag, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:LSScrollBookmark}}}"/>
                        </Image.ToolTip>
                        <Image.Style>
                            <Style TargetType="Image">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/scroll_bookmark_d.png" />
                                <Style.Triggers>
                                    <Trigger  Property="Image.IsMouseOver" Value="True">
                                        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/scroll_bookmark_h.png"></Setter>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ls:LSScrollBookmark" BasedOn="{ StaticResource BaseScrollBookmark }" />

    <Style x:Key="BookmarkScrollViewer" TargetType="{x:Type ls:LSScrollViewer}">
        <Style.Resources>
            <GridLength x:Key="Top">0</GridLength>
            <GridLength x:Key="Bottom">0</GridLength>
        </Style.Resources>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="MinWidth" Value="15"/>
        <Setter Property="MinHeight" Value="15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <ScrollContentPresenter x:Name="PART_ContentPresenter" Grid.Column="0" Grid.Row="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" CanContentScroll="{TemplateBinding CanContentScroll}"/>

                        <Rectangle x:Name="Corner" Grid.Column="1" Grid.Row="1" Fill="{StaticResource Brush.Track.Bg}"/>

                        <!-- The visibility of the ScrollBars is controlled by the implementation of the control -->
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="0" Grid.Row="1" Orientation="Horizontal" MaxHeight="{TemplateBinding MinHeight}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}"/>

                        <Grid Grid.Column="1" Grid.Row="0">

                            <Grid.RowDefinitions>
                                <RowDefinition Height="{DynamicResource Top}"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="{DynamicResource Bottom}"/>
                            </Grid.RowDefinitions>

                            <ScrollBar Grid.Row="1" x:Name="PART_VerticalScrollBar" Orientation="Vertical" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" Margin="{TemplateBinding Padding}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Corner" Property="Fill" Value="{StaticResource Brush.Track.Normal}"/>
                            <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Disabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OverlappingScrollViewer" TargetType="{x:Type ls:LSScrollViewer}">
        <Style.Resources>
            <GridLength x:Key="Top">0</GridLength>
            <GridLength x:Key="Bottom">0</GridLength>
        </Style.Resources>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="MinWidth" Value="15"/>
        <Setter Property="MinHeight" Value="15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <ScrollContentPresenter x:Name="PART_ContentPresenter" Grid.Column="0" Grid.Row="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" CanContentScroll="{TemplateBinding CanContentScroll}"/>
                        <!-- The visibility of the ScrollBars is controlled by the implementation of the control -->
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="0" Grid.Row="1" Orientation="Horizontal" MaxHeight="{TemplateBinding MinHeight}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" VerticalAlignment="Bottom"/>

                        <Grid HorizontalAlignment="Right">

                            <Grid.RowDefinitions>
                                <RowDefinition Height="{DynamicResource Top}"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="{DynamicResource Bottom}"/>
                            </Grid.RowDefinitions>

                            <ls:LSNineSliceImage Grid.Row="1" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/scrollbarBG.png" Slices="16,20,15,20" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" Width="32" Padding="0,14" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" >
                                <ScrollBar  x:Name="PART_VerticalScrollBar" Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" Margin="{TemplateBinding Padding}"/>
                            </ls:LSNineSliceImage>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource Brush.Foreground.Disabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Scroll Views End -->

    <!-- ============== Dialogue Mini Portrait ============== -->
    <Style x:Key="Dialogue.MiniPortrait.Canvas" TargetType="{x:Type Canvas}">
        <Setter Property="Width" Value="120" />
        <Setter Property="Height" Value="188" />
        <Setter Property="Margin" Value="2,0" />
    </Style>

    <Style x:Key="Dialogue.MiniPortrait.Canvas.Border" TargetType="{x:Type Border}">
        <Setter Property="Canvas.Left" Value="10" />
        <Setter Property="Canvas.Top" Value="12" />
        <Setter Property="Width" Value="102" />
        <Setter Property="Height" Value="154" />
        <Setter Property="Background" Value="Black" />
    </Style>

    <Style x:Key="Dialogue.MiniPortrait.Canvas.Health" TargetType="{x:Type Border}">
        <Setter Property="Canvas.Left" Value="12" />
        <Setter Property="Canvas.Top" Value="164" />
        <Setter Property="Width" Value="98" />
        <Setter Property="Height" Value="4" />
        <Setter Property="Background" Value="Black" />
    </Style>

    <!--ComboBoxItem -->
    <Style x:Key="ComboBoxItem" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Height" Value="64"/>
        <Setter Property="Margin" Value="0,2,0,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border" Padding="6">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="MouseEnter">
                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                        <TextBlock Text="{Binding Name}" Foreground="{DynamicResource LS_accent100TxtColor}" Margin="4,4,0,0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Border" Property="Background">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_dropdown_flyout_selected.png" Stretch="UniformToFill"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxScrollBar" TargetType="{x:Type ScrollBar}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="BorderBrush" Value="{StaticResource LS_tint00}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0,0"/>
        <Setter Property="MinWidth" Value="44" />
        <Setter Property="MaxWidth" Value="60"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="40"/>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Border Grid.Row="0" Grid.Column="0" x:Name="TopBg">
                            <Border.Background>
                                <ImageBrush  ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_dropdown_flyoutScroll_top.png" Stretch="None" AlignmentY="Top" />
                            </Border.Background>
                            <ls:LSRepeatButton Style="{StaticResource BaseScrollBarUpButtonVertical}" Command="ScrollBar.LineUpCommand" VerticalAlignment="Bottom" Margin="0,8,0,12"/>
                        </Border>

                        <Border Grid.Row="2" Grid.Column="0" x:Name="BottomBg">
                            <Border.Background>
                                <ImageBrush  ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_dropdown_flyoutScroll_bottom.png" Stretch="None" AlignmentY="Bottom" />
                            </Border.Background>
                            <ls:LSRepeatButton Style="{StaticResource BaseScrollBarDownButtonVertical}" Command="ScrollBar.LineDownCommand" VerticalAlignment="Bottom" Margin="0,14,0,8"/>
                        </Border>

                        <Border Grid.Row="1" Grid.Column="0" x:Name="MidBg">
                            <Border.Background>
                                <ImageBrush  ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_dropdown_flyoutScroll_mid.png" Stretch="Fill" />
                            </Border.Background>
                        </Border>

                        <Border Grid.Row="1" Grid.Column="0" Margin="0,-12,0,-12">
                            <Grid>
                                <Track x:Name="PART_Track" ViewportSize="NaN" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" >
                                    <Track.DecreaseRepeatButton>
                                        <ls:LSRepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <ls:LSThumb Style="{StaticResource BaseScrollBarThumbVertical}"/>
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <ls:LSRepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                    </Track.IncreaseRepeatButton>
                                </Track>
                            </Grid>
                        </Border>
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Combo Box -->
    <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItem}"/>
        <Setter Property="Width" Value="560"/>
        <Setter Property="MaxDropDownHeight" Value="480"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_dropdown_d.png" Stretch="None"/>
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" Margin="36,8,0,0" MaxWidth="440" Text="{TemplateBinding Text}" Foreground="{StaticResource LS_accent100TxtColor}" IsHitTestVisible="False"/>
                        <ToggleButton Style="{DynamicResource ComboBoxToggleButton}" Width="568" HorizontalAlignment="Right" Margin="0,0,-8,0" Foreground="{StaticResource LS_accent100TxtColor}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Popup Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}">
                            <Grid MinHeight="184" Margin="8,-20,0,0">

                                <Grid HorizontalAlignment="Left" Width="560" VerticalAlignment="Top" >
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Image Grid.Row ="0" Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_dropdown_flyout_top.png"/>
                                    <Image Grid.Row ="1" Stretch="Fill" Width="564" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_dropdown_flyout_mid.png"/>
                                    <Image Grid.Row ="2" Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_dropdown_flyout_bottom.png"/>

                                    <ScrollViewer Grid.Row ="1" VerticalAlignment="Top" VerticalScrollBarVisibility="Auto" x:Name="content" Margin="24,-20,0,-10" Padding="12,10,6,4" MaxHeight="{TemplateBinding MaxDropDownHeight}" Template="{StaticResource ScrollViewerTemplate}">
                                        <ScrollViewer.Resources>
                                            <Style x:Key="ScrollBarStyle" TargetType="ScrollBar" BasedOn="{StaticResource ComboBoxScrollBar}"/>
                                        </ScrollViewer.Resources>
                                        <StackPanel VerticalAlignment="Center" Margin="0,18,0,14" IsItemsHost="True" Width="464" Background="Transparent" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                    </ScrollViewer>
                                </Grid>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Enabled}" Value="False">
                <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxStyle}" />

    <ControlTemplate x:Key="SortComboTemplate" TargetType="ComboBox">
        <Grid HorizontalAlignment="Center">
            <ToggleButton Content="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=Text, Mode=OneWay}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left">
                <ToggleButton.Template>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid>
                            <Image x:Name="img" Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/sort_dropdown_d.png" HorizontalAlignment="Left"/>
                            <Image x:Name="btnBg" Margin="4,0,0,0" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_d.png" Stretch="None" HorizontalAlignment="Left"/>
                            <Image x:Name="btnIco" Margin="24,0,0,0" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_sorting_d.png" Stretch="None" ToolTipService.IsEnabled="True" ToolTipService.Placement="Bottom" HorizontalAlignment="Left">
                                <Image.ToolTip>
                                    <ls:LSTooltip Content="{Binding Source='h809e08f9g0ae8g4057g8941g245023916247', Converter={StaticResource TranslatedStringConverter}}" IsHitTestVisible="False"/>
                                </Image.ToolTip>
                            </Image>
                            <TextBlock VerticalAlignment="Center" TextAlignment="Left" HorizontalAlignment="Left" Margin="110,4,0,0" MaxWidth="400" Text="{Binding Path=Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToggleButton}}}" Foreground="{DynamicResource LS_baseTxtColor}" IsHitTestVisible="False"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/sort_dropdown_h.png"/>
                                <Setter TargetName="btnIco" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_sorting_h.png"/>
                                <Setter TargetName="btnBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_h.png"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/sort_dropdown_d.png"/>
                                <Setter TargetName="btnBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_p.png"/>
                                <Setter TargetName="btnIco" Property="Margin" Value="24,4,0,0"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ToggleButton.Template>
            </ToggleButton>
            <Popup Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" >
                <Grid HorizontalAlignment="Center" MinHeight="184" Width="404" VerticalAlignment="Top" Margin="0,-36,0,0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Image Grid.Row ="0" Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/sort_pane_01.png"/>
                    <Image Grid.Row ="1" Stretch="Fill" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/sort_pane_02.png"/>
                    <Image Grid.Row ="2" Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/sort_pane_03.png"/>

                    <ScrollViewer Grid.Row ="1" VerticalAlignment="Top" x:Name="content" Margin="20,-18,10,-20" Padding="6,20,6,20" MaxHeight="{TemplateBinding MaxDropDownHeight}" Template="{StaticResource ScrollViewerTemplate}" VerticalScrollBarVisibility="Auto">
                        <ScrollViewer.Resources>
                            <Style TargetType="ScrollBar" BasedOn="{StaticResource GoldScrollBar}"/>
                        </ScrollViewer.Resources>
                        <StackPanel VerticalAlignment="Center" Margin="0,18,10,14" IsItemsHost="True" Background="Transparent" KeyboardNavigation.DirectionalNavigation="Contained"/>
                    </ScrollViewer>
                </Grid>
            </Popup>
        </Grid>
    </ControlTemplate>

    <Style x:Key="TargetInfoTextStyle" TargetType="TextBlock">
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_PrimaryColorOutlineColor}"/>
        <Setter Property="noesis:Text.StrokeThickness" Value="4"/>
        <Setter Property="FontSize" Value="{DynamicResource ScaledMediumFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}"/>
    </Style>

    <!-- Map marker (inside viewport) -->
    <ControlTemplate x:Key="Map.MarkerDataTemplate" TargetType="{x:Type ls:LSWorldMapMarker}">
        <Canvas x:Name="canvas" >

            <!-- we need this wrapper to be able to horizontally center the text on the origin of the canvas -->
            <Border x:Name="nameContainer" Visibility="Collapsed" Canvas.Left="{Binding ElementName=name, Path=ActualWidth, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}" Canvas.Bottom="20">
                <TextBlock x:Name="name" Text="{Binding Name}" Style="{StaticResource Map.MarkerText}" />
            </Border>

            <Border Canvas.Left="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"
                    Canvas.Top="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}">
                <Border.ToolTip>
                    <ls:LSTooltip x:Name="Tooltip" Content="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}}" ToolTipService.Placement="Bottom"/>
                </Border.ToolTip>

                <Button x:Name="IconBtn" Background="{x:Null}"
                        Command="{Binding DataContext.SetCameraOnGameObject,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                        CommandParameter="{Binding Path=DataContext.GameObject, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                        RenderTransformOrigin="0.5 0.5">
                   
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Click" >
                            <b:InvokeCommandAction Command="{Binding DataContext.SelectMapMarker, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding .}"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                    <Button.RenderTransform>
                        <RotateTransform Angle="{Binding Rotation, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Button.RenderTransform>
                    <Image x:Name="Icon" Width="48" Margin="-20"  Style="{StaticResource MapMarkerIconStyle}">
                        <Image.RenderTransform>
                            <TransformGroup>
                                <RotateTransform Angle="0"/>
                            </TransformGroup>
                        </Image.RenderTransform>
                    </Image>
                </Button>
            </Border>
            <Image x:Name="HeightIndicator" Style="{StaticResource MarkerHeightIndicatorStyle}"/>
        </Canvas>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Type}" Value="Waypoint">
                <Setter TargetName="nameContainer" Property="Visibility" Value="Visible" />
                <Setter TargetName="IconBtn" Property="RenderTransform" Value="{x:Null}" />
                <Setter TargetName="IconBtn" Property="Command" Value="{Binding DataContext.GoToWaypoint, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" />
                <Setter TargetName="IconBtn" Property="CommandParameter" Value="{Binding .}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Portal">
                <Setter TargetName="nameContainer" Property="Visibility" Value="Visible" />
                <Setter TargetName="IconBtn" Property="RenderTransform" Value="{x:Null}" />
                <Setter TargetName="IconBtn" Property="Command" Value="{x:Null}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CampChest">
                <Setter TargetName="canvas" Property="IsHitTestVisible" Value="False" />
                <Setter TargetName="IconBtn" Property="RenderTransform" Value="{x:Null}" />
            </DataTrigger>
	        <DataTrigger Binding="{Binding Type}" Value="Trader">
		        <Setter TargetName="IconBtn" Property="RenderTransform" Value="{x:Null}" />
	        </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Custom">
                <Setter TargetName="HeightIndicator" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="IconBtn" Property="Command" Value="{Binding DataContext.OpenMessageBox, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" />
                <Setter TargetName="IconBtn" Property="CommandParameter" Value="{DynamicResource MessageBoxRemoveCustomMarker}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="QuestMarker">
                <Setter TargetName="IconBtn" Property="Command" Value="{x:Null}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding QuestViews.Count}" Value="1"/>
                    <Condition Binding="{Binding Type}" Value="QuestMarker"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Tooltip" Property="Content" Value="{Binding DataContext.QuestViews[0], RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="IconBtn" Property="Command" Value="{Binding DataContext.ShowInJournal, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="LocationMarker">
                <Setter TargetName="nameContainer" Property="Visibility" Value="Visible" />
                <Setter TargetName="IconBtn" Property="Command" Value="{x:Null}" />
            </DataTrigger> 
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Name, Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="True"/>
                    <Condition Binding="{Binding QuestViews.Count}" Value="0"/>
                    <Condition Binding="{Binding CombinedMapMarkers.Count}" Value="0"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="canvas" Property="ToolTipService.IsEnabled" Value="False"/>
            </MultiDataTrigger>
            <Trigger Property="IsInsideViewport" Value="False">
                <Setter Property="Visibility" Value="Hidden"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="Map.MiniMarkerDataTemplateInAndOutViewport" TargetType="{x:Type ls:LSWorldMapMarker}">
        <Canvas x:Name="canvas" ToolTipService.IsEnabled="True">
            <Canvas.ToolTip>
                <ls:LSTooltip x:Name="Tooltip" Content="{Binding Path=DataContext, ElementName=canvas}" ToolTipService.Placement="Left" />
            </Canvas.ToolTip>
            <!-- IF Inside == inside the minimap view-->
            <Canvas x:Name="Inside" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent},Path=IsInsideViewport, Converter={StaticResource BoolToVisibleConverter}}" RenderTransformOrigin="0.5 0.5">
                <!-- we need this wrapper to be able to horizontally center the text on the origin of the canvas -->
                <Border x:Name="nameContainer" Visibility="Collapsed" Canvas.Left="{Binding ElementName=name, Path=ActualWidth, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}" Canvas.Bottom="20">
                    <TextBlock x:Name="name" Text="{Binding Name}" Style="{StaticResource Map.MarkerText}" />
                </Border>

                <Button x:Name="IconBtn" Background="{x:Null}" Command="{Binding DataContext.SetCameraOnGameObject,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                    CommandParameter="{Binding Path=DataContext.GameObject, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                    Canvas.Left="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"
                    Canvas.Top="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"
                    RenderTransformOrigin="0.5 0.5">
                    <Button.RenderTransform>
                        <RotateTransform Angle="{Binding Rotation, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Button.RenderTransform>
                    <Image x:Name="Icon" Width="48" Margin="-20"  Style="{StaticResource MapMarkerIconStyle}">
                        <Image.RenderTransform>
                            <TransformGroup>
                                <RotateTransform Angle="0"/>
                            </TransformGroup>
                        </Image.RenderTransform>
                    </Image>
                </Button>
                <Image x:Name="HeightIndicator" Style="{StaticResource MarkerHeightIndicatorStyle}"/>
               
            </Canvas>
            <!-- IF Outside == outside the minimap view -->
            <Canvas x:Name="Outside" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent},Path=IsInsideViewport, Converter={StaticResource BoolToCollapsedConverter}}" RenderTransformOrigin="0.5 0.5">
                <Button x:Name="MarkerBtn" Background="{x:Null}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Padding="0"
                        Command="{Binding DataContext.SetCameraOnGameObject,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                        CommandParameter="{Binding GameObject}">
                    <Canvas x:Name="IconHolder" RenderTransformOrigin="0.5 0.0" Tag="1">
                        <Canvas.RenderTransform>
                            <TransformGroup>
                            <RotateTransform Angle="{Binding Rotation, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <ScaleTransform ScaleX="{Binding ElementName=IconHolder,Path=Tag}" ScaleY="{Binding ElementName=IconHolder,Path=Tag}"/>
                            </TransformGroup>
                        </Canvas.RenderTransform>
                        <Ellipse x:Name="OutIcon" Fill="{Binding GameObject.Icon}" RenderTransformOrigin="0.5 0.5" Width="80" Height="80">
                            <Ellipse.RenderTransform>
                                <RotateTransform Angle="{Binding CounterRotation, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Ellipse.RenderTransform>
                        </Ellipse>
                    </Canvas>
                </Button>
            </Canvas>
        </Canvas>
        <ControlTemplate.Triggers>
            <Trigger Property="IsInsideViewport" Value="False">
                <Setter Property="IgnoreMapRotation" Value="True" />
            </Trigger>
            <DataTrigger Binding="{Binding Name}" Value="">
                <Setter TargetName="canvas" Property="ToolTipService.IsEnabled" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="QuestMarker">
                <Setter TargetName="IconBtn" Property="RenderTransform" Value="{x:Null}" />
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Quest}" TargetName="IconHolder"/>
                <Setter Property="Height" Value="64" TargetName="IconHolder"/>
                <Setter Property="Width" Value="68" TargetName="IconHolder"/>
                <Setter Property="Canvas.Left" Value="-34" TargetName="MarkerBtn"/>
                <Setter Property="Fill" Value="{StaticResource Map.OffscreenIcon.Quest}" TargetName="OutIcon"/>
                <Setter Property="Height" Value="30" TargetName="OutIcon"/>
                <Setter Property="Width" Value="30" TargetName="OutIcon"/>
                <Setter Property="IsEnabled" Value="False" TargetName="IconHolder"/>
                <Setter Property="Canvas.Left" Value="19" TargetName="OutIcon"/>
                <Setter Property="Canvas.Top" Value="26" TargetName="OutIcon"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="LocationMarker">
                <Setter TargetName="IconBtn" Property="RenderTransform" Value="{x:Null}" />
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Quest}" TargetName="IconHolder" />
                <Setter Property="Height" Value="64" TargetName="IconHolder"/>
                <Setter Property="Width" Value="68" TargetName="IconHolder"/>
                <Setter Property="Canvas.Left" Value="-34" TargetName="MarkerBtn"/>
                <Setter Property="Fill" Value="{StaticResource Map.OffscreenIcon.Location}" TargetName="OutIcon"/>
                <Setter Property="Height" Value="30" TargetName="OutIcon"/>
                <Setter Property="Width" Value="30" TargetName="OutIcon"/>
                <Setter Property="Canvas.Left" Value="19" TargetName="OutIcon"/>
                <Setter Property="Canvas.Top" Value="26" TargetName="OutIcon"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="MarkerBtn"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Type}" Value="SecretMarker">
                <Setter TargetName="IconBtn" Property="RenderTransform" Value="{x:Null}" />
            </DataTrigger>

                <!--BTN SHELL:   MarkerBtn.IconHolder.OutIcon     -->
            <DataTrigger Binding="{Binding Type}" Value="Player">
                <Setter Property="Canvas.Left" Value="-56" TargetName="MarkerBtn"/>
                <Setter Property="Height" Value="116" TargetName="MarkerBtn"/>
                <Setter Property="Width" Value="116" TargetName="MarkerBtn"/>

                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Selected}" TargetName="IconHolder"/>
                <Setter Property="Height" Value="116" TargetName="IconHolder"/>
                <Setter Property="Width" Value="112" TargetName="IconHolder"/>
                <Setter Property="Tag" Value="0.75" TargetName="IconHolder"/>

                <Setter Property="Visibility" Value="visible" TargetName="OutIcon"/>
                <Setter Property="Canvas.Left" Value="20" TargetName="OutIcon"/>
                <Setter Property="Canvas.Top" Value="25" TargetName="OutIcon"/>
                <Setter Property="Height" Value="72" TargetName="OutIcon"/>
                <Setter Property="Width" Value="72" TargetName="OutIcon"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="Player"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.SelectedHighlight}" />
            </MultiDataTrigger>            
            
            <DataTrigger Binding="{Binding Type}" Value="CharacterFriendly">
                <Setter Property="Canvas.Left" Value="-56" TargetName="MarkerBtn"/>

                <Setter Property="Height" Value="116" TargetName="MarkerBtn"/>
                <Setter Property="Width" Value="116" TargetName="MarkerBtn"/>

                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Friendly}" TargetName="IconHolder"/>
                <Setter Property="Height" Value="116" TargetName="IconHolder"/>
                <Setter Property="Width" Value="112" TargetName="IconHolder"/>
                <Setter Property="Tag" Value="0.75" TargetName="IconHolder"/>

                <Setter Property="Visibility" Value="visible" TargetName="OutIcon"/>
                <Setter Property="Canvas.Left" Value="20" TargetName="OutIcon"/>
                <Setter Property="Canvas.Top" Value="25" TargetName="OutIcon"/>
                <Setter Property="Height" Value="72" TargetName="OutIcon"/>
                <Setter Property="Width" Value="72" TargetName="OutIcon"/>                
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="CharacterFriendly"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.FriendlyHighlight}" TargetName="IconHolder"/>
            </MultiDataTrigger>                


            <DataTrigger Binding="{Binding Type}" Value="CharacterParty">
                <Setter Property="Canvas.Left" Value="-56" TargetName="MarkerBtn"/>
                <Setter Property="Height" Value="116" TargetName="MarkerBtn"/>
                <Setter Property="Width" Value="116" TargetName="MarkerBtn"/>

                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Party}" TargetName="IconHolder"/>
                <Setter Property="Height" Value="116" TargetName="IconHolder"/>
                <Setter Property="Width" Value="112" TargetName="IconHolder"/>
                <Setter Property="Tag" Value="0.75" TargetName="IconHolder"/>

                <Setter Property="Visibility" Value="visible" TargetName="OutIcon"/>
                <Setter Property="Canvas.Left" Value="20" TargetName="OutIcon"/>
                <Setter Property="Canvas.Top" Value="25" TargetName="OutIcon"/>
                <Setter Property="Height" Value="72" TargetName="OutIcon"/>
                <Setter Property="Width" Value="72" TargetName="OutIcon"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="CharacterParty"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.PartyHighlight}" TargetName="IconHolder"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Type}" Value="CharacterEnemy">
                <Setter Property="Canvas.Left" Value="-56" TargetName="MarkerBtn"/>
                <Setter Property="Height" Value="116" TargetName="MarkerBtn"/>
                <Setter Property="Width" Value="116" TargetName="MarkerBtn"/>

                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Enemy}" TargetName="IconHolder"/>
                <Setter Property="Height" Value="116" TargetName="IconHolder"/>
                <Setter Property="Width" Value="112" TargetName="IconHolder"/>
                <Setter Property="Tag" Value="0.75" TargetName="IconHolder"/>
                
                <Setter Property="Visibility" Value="visible" TargetName="OutIcon"/>
                <Setter Property="Canvas.Left" Value="20" TargetName="OutIcon"/>
                <Setter Property="Canvas.Top" Value="25" TargetName="OutIcon"/>
                <Setter Property="Height" Value="72" TargetName="OutIcon"/>
                <Setter Property="Width" Value="72" TargetName="OutIcon"/>                
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="CharacterEnemy"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.EnemyHighlight}" TargetName="IconHolder"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Type}" Value="Custom">
                <!--properties inside minimap-->
                <Setter TargetName="HeightIndicator" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="IconBtn" Property="RenderTransform" Value="{x:Null}" />
                <Setter TargetName="IconBtn" Property="Command" Value="{x:Null}" />

                <!--properties outside minimap-->
                <Setter Property="Height" Value="64" TargetName="IconHolder"/>
                <Setter Property="Width" Value="68" TargetName="IconHolder"/>
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Quest}" TargetName="IconHolder" />                
                <Setter Property="Canvas.Left" Value="-34" TargetName="MarkerBtn"/>                
                <Setter Property="Fill" Value="{StaticResource Map.OffscreenIcon.Custom}" TargetName="OutIcon"/>
                <Setter Property="Height" Value="30" TargetName="OutIcon"/>
                <Setter Property="Width" Value="30" TargetName="OutIcon"/>
                <Setter Property="Canvas.Left" Value="19" TargetName="OutIcon"/>
                <Setter Property="Canvas.Top" Value="26" TargetName="OutIcon"/>
                <Setter TargetName="MarkerBtn" Property="Command" Value="{x:Null}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Type}" Value="QuestMarker">
                <Setter TargetName="IconBtn" Property="Command" Value="{x:Null}" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding QuestViews.Count}" Value="1"/>
                    <Condition Binding="{Binding Type}" Value="QuestMarker"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Tooltip" Property="Content" Value="{Binding DataContext.QuestViews[0], RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="IconBtn" Property="Command" Value="{Binding DataContext.ShowInJournal, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="LocationMarker">
                <Setter TargetName="nameContainer" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Name, Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="True"/>
                    <Condition Binding="{Binding QuestViews.Count}" Value="0"/>
                    <Condition Binding="{Binding CombinedMapMarkers.Count}" Value="0"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="canvas" Property="ToolTipService.IsEnabled" Value="False"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


</ResourceDictionary>