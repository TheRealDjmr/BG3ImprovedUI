<!--

    Resources for keyboard version of CC & LevelUp
    
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
                    xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
					mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Library/CCLib.xaml"/>
        <ResourceDictionary Source="../Library/OptionTemplates.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <System:Single x:Key="gameplayPanelHeight">1850</System:Single>
    <System:Single x:Key="gameplayPanelWidth">1000</System:Single>

    <System:Single x:Key="summaryPanelWidth">500</System:Single>
    <System:Single x:Key="rightRotationRate">1.5</System:Single>
    <System:Single x:Key="leftRotationRate">-1.5</System:Single>
    <System:Single x:Key="stopRotationRate">0.0</System:Single>

    <System:Double x:Key="IconTextWidth">250</System:Double>

    <System:Double x:Key="OverlayBackgroundContentFade">0.5</System:Double>

    <System:TimeSpan x:Key="LevelUpShowItemsStartTime">0:0:2</System:TimeSpan>
    <Duration x:Key="LevelUpTextAndBannerDuration">0:0:0.4</Duration>
    <Duration x:Key="LevelUpItemAppearDuration">0:0:0.2</Duration>
    <Duration x:Key="LevelUpAfterItemsDuration">0:0:0.2</Duration>
    <Duration x:Key="LevelUpSkipDuration">0:0:0.0</Duration>

    <BitmapImage x:Key="ButtonActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnNormal_d_active.png"/>
    <BitmapImage x:Key="DetailsBoxSmallActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/detailsBox_small_active.png"/>
    <BitmapImage x:Key="DetailsBoxPointerActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/detailsBox_pointer_active.png"/>
    <BitmapImage x:Key="FeatEditBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/overPane_appearance.png"/>
    <BitmapImage x:Key="IconGridSelector" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/selector_CC.png"/>
    <BitmapImage x:Key="IconEdit_d" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_edit_d.png"/>
    <BitmapImage x:Key="IconEdit_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_edit_h.png"/>
    <BitmapImage x:Key="IconTabCheck_d" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/tab_icoCheck_d.png"/>
    <BitmapImage x:Key="IconTabCheck_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/tab_icoCheck_h.png"/>
    <BitmapImage x:Key="IconSubTab_d" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_subtab_d.png"/>
    <BitmapImage x:Key="IconSubTab_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_subtab_h.png"/>
    <BitmapImage x:Key="IconLine" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_line.png"/>
    <BitmapImage x:Key="IconPopup" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_popup_d.png"/>
    <BitmapImage x:Key="IconPopup_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_popup_h.png"/>
    <BitmapImage x:Key="IconProficient" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_proficient.png"/>
    <BitmapImage x:Key="IconSpellSaveDC" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_spellSaveDC.png"/>
    <BitmapImage x:Key="IconSpellAttackBonus" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/ico_spellAttackBonus.png"/>
    <BitmapImage x:Key="TabBackground_d" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/tab_inactive_d.png"/>
    <BitmapImage x:Key="TabBackground_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/tab_inactive_h.png"/>
    <BitmapImage x:Key="ButtonDecorativeBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnAppearance_bg.png"/>
    <BitmapImage x:Key="SpellSlot" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/spellslot.png"/>
    <BitmapImage x:Key="SelectorSpellSlot" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/selector_spellslot.png"/>
    <BitmapImage x:Key="RemoverSpellSlot" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/remover_spellslot.png"/>
    <BitmapImage x:Key="CheckBoxSelected" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/checkHolder_skills_selected.png"/>
    <BitmapImage x:Key="BGDecoration" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/levelUp_newAddition_bg.png" />
    <BitmapImage x:Key="BtnNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnNormal_d.png" />
    <BitmapImage x:Key="BtnNormal_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnNormal_h.png" />
    <BitmapImage x:Key="BtnNormal_p" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnNormal_p.png" />
    <BitmapImage x:Key="BtnSmallRound_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_h.png" />
    <BitmapImage x:Key="TickActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_tick_active_d.png" />
    <BitmapImage x:Key="TickActive_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_tick_active_h.png" />
    <BitmapImage x:Key="TickInactive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_tick_inactive_d.png" />

    <!-- Action Resource Decorative Icons-->
    <BitmapImage x:Key="ActionPointIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ap_d.png" />
    <BitmapImage x:Key="BonusActionPointIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/bap_d.png" />
    <BitmapImage x:Key="ReactionPointIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_mini_spellSlot_reaction_d.png" />
    <BitmapImage x:Key="MovementSpeedIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_speed.png" />
    <BitmapImage x:Key="WarlockSpellslotIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_mini_spellSlot_warlock.png" />
    <BitmapImage x:Key="SpellSlotIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_mini_spellSlot.png" />
    <BitmapImage x:Key="SorceryPointIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_sorc_d.png" />
    <BitmapImage x:Key="KiPointIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_ki.png" />
    <BitmapImage x:Key="LayOnHandsIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_LayOnHands.png" />
    <BitmapImage x:Key="RagePointIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_rage.png" />
    <BitmapImage x:Key="BardicInspirationIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_inspiration.png" />
    <BitmapImage x:Key="ChannelDivinityIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_channelDivinity_d.png" />
    <BitmapImage x:Key="ChannelOathIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_channelOath.png" />
    <BitmapImage x:Key="SuperiorityDieIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_superiorityDice_d.png" />
    <BitmapImage x:Key="ArcaneRecoveryIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_arcaneRecovery_d.png" />
    <BitmapImage x:Key="NaturalRecoveryIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_NaturalRecovery.png" />
    <BitmapImage x:Key="WildshapeIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_wildshape.png" />
    <BitmapImage x:Key="TidesOfChaosIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_tidesOfChaos_d.png" />
    <BitmapImage x:Key="WarPriestPointIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_warPriest.png" />
    <BitmapImage x:Key="FungalInfestationIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_FungalInfestationCharge.png" />
    <BitmapImage x:Key="LuckPointIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_luck.png" />
    <BitmapImage x:Key="PsiPointIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_resources/ico_classRes_psipoint.png" />


    <Style x:Key="CCButtonStyle" TargetType="{x:Type ls:LSButton}"  BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="FontSize" Value="{StaticResource MediumFontSize}"/>
        <Setter Property="ls:ButtonHelper.ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnNormal_d.png"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ls:ButtonHelper.ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnNormal_h.png" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="ls:ButtonHelper.ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnNormal_p.png"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="ls:ButtonHelper.ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnNormal_disabled.png" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="MissingRequirementsErrorTemplate">
        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
            <Image x:Name="cross" Stretch="None" Margin="-16,0,8,0" VerticalAlignment="Center">
                <Image.Triggers>
                    <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                        <BeginStoryboard Storyboard="{StaticResource ExclamationAnim}"/>
                    </EventTrigger>
                </Image.Triggers>
            </Image>
            <TextBlock Foreground="{StaticResource CCTabToDo}" Text="{Binding Source='hb23440cag3dbdg4bb4ga508g3b052e85189f', Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Center" />
        </StackPanel>
    </DataTemplate>

    <ControlTemplate x:Key="decoratedHeader">
        <ControlTemplate.Resources>
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
                <Setter Property="FontSize" Value="{StaticResource ScaledMediumFontSize}"/>
            </Style>
        </ControlTemplate.Resources>
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/decor_header.png" Stretch="None"/>
            <ContentPresenter Margin="30,0,30,0"/>
            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/decor_header.png" Stretch="None">
                <Image.RenderTransform>
                    <ScaleTransform ScaleX="-1" CenterX="42"/>
                </Image.RenderTransform>
            </Image>
        </StackPanel>
    </ControlTemplate>

    <Style x:Key="PanelHeaderIconStyle" TargetType="Image">
        <Setter Property="Source" Value="{StaticResource IconRace}"/>
        <Setter Property="Stretch" Value="None"/>
        <Setter Property="Margin" Value="0,64,0,0"/>
    </Style>

    <Style x:Key="PanelHeaderText" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledTitleFontSize}"/>
    </Style>

    <Style x:Key="PanelDescriptionText" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource CCTextLightest}"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="MaxWidth" Value="900"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledMediumFontSize}"/>
    </Style>


    <Style x:Key="companionHeaderStyle" TargetType="TextBlock">
        <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_PrimaryColorOutlineColor}"/>
        <Setter Property="noesis:Text.StrokeThickness" Value="4"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledTitleFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="TextBlock.Effect">
            <Setter.Value>
                <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="5.0"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="gameplayPanelScrollViewerStyle" TargetType="ls:LSScrollViewer" BasedOn="{StaticResource {x:Type ls:LSScrollViewer}}">
        <Setter Property="Template" Value="{StaticResource NoForcedStyleScrollViewerTemplate}"/>
        <Setter Property="Height" Value="1600"/>
        <Setter Property="Margin" Value="100,0,88,0"/>
        <Setter Property="Padding" Value="0,0,40,60"/>
    </Style>

    <Style x:Key="gameplayScrolledStackPanelStyle" TargetType="StackPanel">
        <Setter Property="Width" Value="{StaticResource gameplayPanelWidth}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="40,0,0,0"/>
    </Style>

    <Style x:Key="overpanelScrollViewerStyle" TargetType="ls:LSScrollViewer" BasedOn="{StaticResource {x:Type ls:LSScrollViewer}}">
        <Setter Property="Template" Value="{StaticResource ScrollViewerTemplate}"/>
        <Setter Property="Height" Value="1400"/>
        <Setter Property="Margin" Value="100,0,70,0"/>
    </Style>

    <Style x:Key="overpanelScrolledStackPanelStyle" TargetType="StackPanel">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="40,0,0,0"/>
    </Style>

    <Style x:Key="SummarySpellsDecorationStyle" TargetType="Image">
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/decorated_box.png"/>
        <Setter Property="Stretch" Value="None"/>
    </Style>

    <Style TargetType="Image" x:Key="ActionResourceDecorativeIcon">
        <Style.Triggers>
            <DataTrigger Binding="{Binding TypeId}" Value="ActionPoint">
                <Setter Property="Source" Value="{StaticResource ActionPointIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="BonusActionPoint">
                <Setter Property="Source" Value="{StaticResource BonusActionPointIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="ReactionActionPoint">
                <Setter Property="Source" Value="{StaticResource ReactionPointIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="Movement">
                <Setter Property="Source" Value="{StaticResource MovementSpeedIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="WarlockSpellSlot">
                <Setter Property="Source" Value="{StaticResource WarlockSpellslotIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="SpellSlot">
                <Setter Property="Source" Value="{StaticResource SpellSlotIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="SorceryPoint">
                <Setter Property="Source" Value="{StaticResource SorceryPointIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="KiPoint">
                <Setter Property="Source" Value="{StaticResource KiPointIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="LayOnHandsCharge">
                <Setter Property="Source" Value="{StaticResource LayOnHandsIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="Rage">
                <Setter Property="Source" Value="{StaticResource RagePointIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="BardicInspiration">
                <Setter Property="Source" Value="{StaticResource BardicInspirationIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="ChannelDivinity">
                <Setter Property="Source" Value="{StaticResource ChannelDivinityIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="ChannelOath">
                <Setter Property="Source" Value="{StaticResource ChannelOathIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="SuperiorityDie">
                <Setter Property="Source" Value="{StaticResource SuperiorityDieIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="ArcaneRecoveryPoint">
                <Setter Property="Source" Value="{StaticResource ArcaneRecoveryIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="NaturalRecoveryPoint">
                <Setter Property="Source" Value="{StaticResource NaturalRecoveryIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="WildShape">
                <Setter Property="Source" Value="{StaticResource WildshapeIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="TidesOfChaos">
                <Setter Property="Source" Value="{StaticResource TidesOfChaosIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="WarPriestActionPoint">
                <Setter Property="Source" Value="{StaticResource WarPriestPointIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="FungalInfestationCharge">
                <Setter Property="Source" Value="{StaticResource FungalInfestationIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="LuckPoint">
                <Setter Property="Source" Value="{StaticResource LuckPointIcon}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="PsiPoint">
                <Setter Property="Source" Value="{StaticResource PsiPointIcon}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="FeatureIcon" DataType="ls:VMFeatureBoost">
        <Grid ToolTip="{StaticResource CCSpellTooltip}" Margin="4">
            <Ellipse x:Name="icon" Fill="{Binding Icon}" Width="80" Height="80"/>
            <Image x:Name="actionResource" Style="{StaticResource ActionResourceDecorativeIcon}" Width="80" Height="80"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Icon}" Value="{x:Null}">
                <Setter TargetName="icon" Property="Fill" Value="{StaticResource missingIconBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActualWidth, ElementName=actionResource, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="icon" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="SpellOverrideBorder" TargetType="Border">
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="4"/>
    </Style>

    <ControlTemplate x:Key="SpellIconTemplate">
        <Border x:Name="border" Style="{StaticResource SpellOverrideBorder}" Background="Transparent">
            <Grid x:Name="base" Width="80" Height="80" ToolTip="{StaticResource CCSpellTooltip}" ToolTipService.ShowOnDisabled="True">
                <Rectangle Fill="{Binding Icon}" />

                <Grid x:Name="hover" Visibility="Collapsed"  HorizontalAlignment="Center" VerticalAlignment="Center">
                    <Rectangle x:Name="hoverRect" Fill="{StaticResource LS_HoverColor}" Width="80" Height="80"/>
                    <Ellipse Fill="{StaticResource LS_HoverColor}" Visibility="{Binding Visibility, ElementName=hoverRect, Converter={StaticResource InvertVisibilityConverter}}" Width="80" Height="80"/>
                </Grid>

                <TextBlock x:Name="LevelText" 
                           ls:TextBlockFormatter.SourceText="{Binding Level, Converter={StaticResource DecimalToRomanConverter}}" 
                           FontSize="{StaticResource ScaledMediumFontSize}" 
                           IsHitTestVisible="False" Foreground="{StaticResource LS_specialTxtColor}" 
                           noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" 
                           noesis:Text.StrokeThickness="6" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,0,10,-4"
                           Visibility="Visible"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                    <Condition Binding="{Binding Datacontext, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource NullToBoolTrueConverter}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="hover" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Override}" Value="Worse">
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource LS_SpellOverrideWorse}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Override}" Value="Equal">
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource LS_SpellOverrideEqual}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Override}" Value="Better">
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource LS_SpellOverrideBetter}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Override}" Value="Different">
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource LS_SpellOverrideDifferent}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="HideSpellLevel">
                <Setter TargetName="LevelText" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="SpellRefIcon">
        <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding Spell}"/>
    </DataTemplate>

    <Style x:Key="spellSelectorSpellListStyle" TargetType="ItemsControl">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel MaxWidth="704"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding NotAvailable}" Value="True">
                            <Setter Property="Control.Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="spellSelectionSpellListStyle" TargetType="ItemsControl" BasedOn="{StaticResource spellSelectorSpellListStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">
                    <StackPanel Orientation="Horizontal">
                        <Image x:Name="cross" Visibility="Collapsed" Stretch="None" Margin="-44,0,0,0">
                            <Image.Triggers>
                                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                    <BeginStoryboard Storyboard="{StaticResource ExclamationAnim}"/>
                                </EventTrigger>
                            </Image.Triggers>
                        </Image>

                        <ItemsPresenter/>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsComplete}" Value="False">
                            <Setter TargetName="cross" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger  Binding="{Binding SpellPrepare.IsComplete}" Value="False">
                            <Setter TargetName="cross" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="NewItemStripTemplate" TargetType="ContentControl">

        <ls:LSNineSliceImage x:Name="Container" Slices="46,56,46,46" IconWidth="100" Margin="0,20,0,0" Padding="40,60,40,30" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/holder_newItem.png" Width="800" HorizontalAlignment="Center">

            <ls:LSNineSliceImage.RenderTransform>
                <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1" CenterX="400" CenterY="100"/>
                    <TranslateTransform X="0" Y="0"/>
                </TransformGroup>
            </ls:LSNineSliceImage.RenderTransform>

            <b:Interaction.Triggers>

                <b:DataTrigger Binding="{Binding DataContext.LevelUpStep, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Started">
                    <b:ChangePropertyAction TargetName="Container" PropertyName="Opacity" Value="0"/>
                </b:DataTrigger>

                <b:DataTrigger Binding="{Binding Path=(ls:SequenceBehavior.PlayElement), RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="True">
                    <b:ControlStoryboardAction ControlStoryboardOption="Play">
                        <b:ControlStoryboardAction.Storyboard>
                            <Storyboard>
                                <!-- item fading and scaling in -->
                                <DoubleAnimation Storyboard.TargetName="Container" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="{StaticResource LevelUpItemAppearDuration}"/>

                                <DoubleAnimation Storyboard.TargetName="Container" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" From="2" To="1" Duration="{StaticResource LevelUpItemAppearDuration}"/>
                                <DoubleAnimation Storyboard.TargetName="Container" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" From="2" To="1" Duration="{StaticResource LevelUpItemAppearDuration}"/>

                                <!-- arrow "stabbing" downwards -->
                                <DoubleAnimation Storyboard.TargetName="separatorArrow" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" From="0" To="-50" BeginTime="0:0:0.1" Duration="0:0:0.1" AutoReverse="True"/>

                            </Storyboard>
                        </b:ControlStoryboardAction.Storyboard>
                    </b:ControlStoryboardAction>
                </b:DataTrigger>
                <b:DataTrigger Binding="{Binding DataContext.LevelUpStep, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="SkipAnimation">
                    <b:ControlStoryboardAction ControlStoryboardOption="Play">
                        <b:ControlStoryboardAction.Storyboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="Container" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource LevelUpSkipDuration}"/>
                                <DoubleAnimation Storyboard.TargetName="Container" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" To="1" Duration="{StaticResource LevelUpSkipDuration}"/>
                                <DoubleAnimation Storyboard.TargetName="Container" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" To="1" Duration="{StaticResource LevelUpSkipDuration}"/>
                            </Storyboard>
                        </b:ControlStoryboardAction.Storyboard>
                    </b:ControlStoryboardAction>                    
                </b:DataTrigger>
            </b:Interaction.Triggers>

            <ContentPresenter x:Name="Content" VerticalAlignment="Center" />

        </ls:LSNineSliceImage>

    </ControlTemplate>

    <ControlTemplate x:Key="spellSelectionHeaderInfoTemplate">
        <Grid>
            <Grid.Resources>
                <GridLength x:Key="EqualColWidth">168</GridLength>

                <Style TargetType="TextBlock">
                    <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
                </Style>
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{StaticResource EqualColWidth}"/>
                <ColumnDefinition Width="{StaticResource EqualColWidth}"/>
                <ColumnDefinition Width="{StaticResource EqualColWidth}"/>
            </Grid.ColumnDefinitions>

            <Image x:Name="Background" Grid.Column="0" Grid.ColumnSpan="3" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/SpellBook/header_infoSlots.png" Stretch="None"/>

            <StackPanel x:Name="CastAbilityContainer" Orientation="Horizontal" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center" ToolTipService.Placement="Bottom">
                <StackPanel.ToolTip>
                    <ls:LSTooltip>
                        <StackPanel>
                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h3289692bg0388g4f68gad45g82b8fd0ffbf8, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipTitleStyle}"/>
                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h91535f32g4f47g4d5bgbf59ge05726ecb96e, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipDefaultTextStyle}"/>
                        </StackPanel>
                    </ls:LSTooltip>
                </StackPanel.ToolTip>
                <Image x:Name="CastAbilityIcon" Source="{StaticResource IconProficient}" Stretch="None" VerticalAlignment="Center" Margin="-12,0,0,0"/>

                <Control x:Name="CastAbility" DataContext="{Binding Path=(ls:TooltipExtender.Owner).Stats.SpellCastAbility, RelativeSource={RelativeSource Mode=Self}}" Template="{StaticResource AbilityShortDisplayName}" VerticalAlignment="Center"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" ToolTipService.Placement="Bottom">
                <StackPanel.ToolTip>
                    <ls:LSTooltip Content="{Binding Path=(ls:TooltipExtender.Owner).Stats.SpellDifficultyCheck, RelativeSource={RelativeSource Mode=Self}}"/>
                </StackPanel.ToolTip>
                <Image x:Name="SpellDCIcon"  Source="{StaticResource IconSpellSaveDC}" Stretch="None" VerticalAlignment="Center" Margin="-8,0,0,0"/>
                <TextBlock x:Name="SpellDC" Text="{Binding Path=(ls:TooltipExtender.Owner).Stats.SpellDifficultyCheck.Value, RelativeSource={RelativeSource Mode=Self}}" VerticalAlignment="Center"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Grid.Column="2" VerticalAlignment="Center" HorizontalAlignment="Center">
                <StackPanel.ToolTip>
                    <ls:LSTooltip Content="{Binding Path=(ls:TooltipExtender.Owner).Stats.SpellAttackBonus, RelativeSource={RelativeSource Mode=Self}}"/>
                </StackPanel.ToolTip>
                <Image x:Name="SpellAttackIcon"  Source="{StaticResource IconSpellAttackBonus}" Stretch="None" VerticalAlignment="Center" Margin="-10,0,0,0"/>
                <TextBlock x:Name="SpellAttackBonus" Text="{Binding Path=(ls:TooltipExtender.Owner).Stats.SpellAttackBonus.Value, RelativeSource={RelativeSource Mode=Self}, StringFormat={}{0:+#;-#;0}}" VerticalAlignment="Center"/>
            </StackPanel>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="selectedSpellTemplate" TargetType="{x:Type ls:LSButton}">
        <Grid>
            <Image x:Name="slot" Source="{StaticResource SpellSlot}" Stretch="None"/>
            <Image x:Name="cross" Source="{StaticResource IconLevelUpCross}" Stretch="None"/>
            <ContentControl ContentTemplate="{StaticResource SpellRefIcon}" Content="{Binding}"/>
            <Image x:Name="remover" Visibility="Collapsed" Source="{StaticResource RemoverSpellSlot}" Stretch="None" IsHitTestVisible="False"/>
            <Image x:Name="selected" Visibility="Hidden" Source="{StaticResource SelectorSpellSlot}" Stretch="None" IsHitTestVisible="False"/>
            <Border x:Name="empty" Visibility="Collapsed" Background="{StaticResource CCTabToDo}" Opacity="0.5"/>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Spell}" Value="{x:Null}"/>
                    <Condition Binding="{Binding Path=DataContext.IsComplete, FallbackValue=False, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="empty" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                    <Condition Binding="{Binding Selected, FallbackValue=False}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="selected" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="remover" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="availableSpellTemplate" TargetType="{x:Type ls:LSButton}">
        <Grid>
            <ContentControl x:Name="icon" ContentTemplate="{StaticResource SpellRefIcon}" Content="{Binding}"/>
            <Image x:Name="selected" Visibility="Hidden" Source="{StaticResource SelectorSpellSlot}" Stretch="None" IsHitTestVisible="False"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter TargetName="selected" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Selected}" Value="True">
                <Setter TargetName="selected" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding NotAvailable}" Value="True">
                <Setter Property="IsEnabled" Value="False"/>
                <Setter TargetName="icon" Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                <Setter TargetName="selected" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="FeatSpellSelector">
        <StackPanel x:Name="base">
            <Image Source="{StaticResource IconClass}" Stretch="None" Margin="0,64,0,0"/>
            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Title}" Style="{StaticResource PanelHeaderText}"/>

            <ls:LSScrollViewer Template="{StaticResource ScrollViewerTemplate}" VerticalScrollBarVisibility="Auto" Width="800" Margin="0,0,0,0"
                               Height="1400" Padding="0,0,20,20">
                <StackPanel Width="800" HorizontalAlignment="Left">

                    <Control Template="{StaticResource spellSelectionHeaderInfoTemplate}" HorizontalAlignment="Center" Margin="0,40,0,0"/>

                    <ContentControl Template="{StaticResource decoratedHeader}" Margin="0,50,0,10">
                        <TextBlock x:Name="SelectorStripTitle" ls:TextBlockFormatter.SourceText="{Binding Source='hff5ad48cg038fg45d3g8bccg5c520054d4b6', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ContentControl>
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Description}" Style="{StaticResource PanelDescriptionText}"
                               Foreground="{StaticResource CCTextNormal}" FontSize="{StaticResource ScaledMediumFontSize}" Width="600"/>

                    <ContentControl Template="{StaticResource decoratedHeader}" Margin="0,40,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h46206b54gae33g4546ga5dfg13de4a4c66aa', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ContentControl>
                    <ItemsControl ItemsSource="{Binding Additions}" Style="{StaticResource spellSelectionSpellListStyle}" MaxWidth="530">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel MaxWidth="530"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMSpellReference}">
                                <ls:LSButton Template="{StaticResource selectedSpellTemplate}" DataContext="{Binding .}"
                                             Command="{Binding DataContext.DeselectSpell,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                    <ls:LSButton.CommandParameter>
                                        <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                            <Binding Path="DataContext" ElementName="base"/>
                                            <Binding Path="."/>
                                        </MultiBinding>
                                    </ls:LSButton.CommandParameter>
                                </ls:LSButton>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <ContentControl Template="{StaticResource decoratedHeader}" Margin="0,40,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h76bfc212gcdd9g4c2ag899eg6bbeaf84f1e5', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ContentControl>
                    <ItemsControl ItemsSource="{Binding Available}" Style="{StaticResource spellSelectorSpellListStyle}" Width="530">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel MaxWidth="530"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMSpellReference}">
                                <ls:LSButton Template="{StaticResource availableSpellTemplate}" DataContext="{Binding}" Command="{Binding DataContext.SelectSpell,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                    <ls:LSButton.CommandParameter>
                                        <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                            <Binding Path="DataContext" ElementName="base"/>
                                            <Binding Path="."/>
                                        </MultiBinding>
                                    </ls:LSButton.CommandParameter>
                                </ls:LSButton>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>
            </ls:LSScrollViewer>
        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsCantrips}" Value="True">
                <Setter TargetName="SelectorStripTitle" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hc1b7e817gdd47g4f48g9d05gd8d8b0353160', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsActions}" Value="True">
                <Setter TargetName="SelectorStripTitle" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h346b7170gf25ag4c8dgbc45gb21b421b6833', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="SelectableSpell" DataType="{x:Type ls:VMSpellReference}">
        <ls:LSButton Template="{StaticResource availableSpellTemplate}" DataContext="{Binding}" Command="{Binding DataContext.SelectSpell,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
            <ls:LSButton.CommandParameter>
                <MultiBinding Converter="{StaticResource PassThroughConverter}">
                    <Binding Path="DataContext.SpellPrepare" ElementName="base"/>
                    <Binding Path="."/>
                </MultiBinding>
            </ls:LSButton.CommandParameter>
        </ls:LSButton>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ls:VMSpellSelector}">

        <StackPanel x:Name="base">

            <Image Source="{StaticResource IconClass}" Stretch="None" Margin="0,64,0,0"/>
            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Title}" Style="{StaticResource PanelHeaderText}"/>

            <ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" VerticalScrollBarVisibility="Auto">
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                    <Control Template="{StaticResource spellSelectionHeaderInfoTemplate}" HorizontalAlignment="Center" Margin="0,100,0,0"/>

                    <ContentControl Template="{StaticResource decoratedHeader}" Margin="0,50,0,10">
                        <TextBlock x:Name="SelectorStripTitle" ls:TextBlockFormatter.SourceText="{Binding Source='hff5ad48cg038fg45d3g8bccg5c520054d4b6', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ContentControl>
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Description}" Style="{StaticResource PanelDescriptionText}"
                               Foreground="{StaticResource CCTextNormal}" FontSize="{StaticResource ScaledMediumFontSize}" Width="750"/>

                    <ContentControl Template="{StaticResource decoratedHeader}" Margin="0,40,0,0">
                        <TextBlock x:Name="SelectionStripTitle" ls:TextBlockFormatter.SourceText="{Binding Source='h46206b54gae33g4546ga5dfg13de4a4c66aa', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ContentControl>
                    <ItemsControl ItemsSource="{Binding Additions}" Style="{StaticResource spellSelectionSpellListStyle}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMSpellReference}">
                                <ls:LSButton Template="{StaticResource selectedSpellTemplate}" DataContext="{Binding .}" Command="{Binding DataContext.DeselectSpell,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                    <ls:LSButton.CommandParameter>
                                        <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                            <Binding Path="DataContext" ElementName="base"/>
                                            <Binding Path="."/>
                                        </MultiBinding>
                                    </ls:LSButton.CommandParameter>
                                </ls:LSButton>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <ContentControl Template="{StaticResource decoratedHeader}" Margin="0,40,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h76bfc212gcdd9g4c2ag899eg6bbeaf84f1e5', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ContentControl>
                    <ItemsControl ItemsSource="{Binding Available}" Style="{StaticResource spellSelectorSpellListStyle}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMSpellReference}">
                                <ls:LSButton Template="{StaticResource availableSpellTemplate}" DataContext="{Binding}" Command="{Binding DataContext.SelectSpell,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                    <ls:LSButton.CommandParameter>
                                        <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                            <Binding Path="DataContext" ElementName="base"/>
                                            <Binding Path="."/>
                                        </MultiBinding>
                                    </ls:LSButton.CommandParameter>
                                </ls:LSButton>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                </StackPanel>
            </ls:LSScrollViewer>
        </StackPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsCantrips}" Value="True">
                <Setter TargetName="SelectorStripTitle" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hc1b7e817gdd47g4f48g9d05gd8d8b0353160', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsActions}" Value="True">
                <Setter TargetName="SelectorStripTitle" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h346b7170gf25ag4c8dgbc45gb21b421b6833', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsComplete}" Value="False">
                <Setter TargetName="SelectionStripTitle" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ls:VMCharacterCreationPassives}">
        <DockPanel Height="1700">

            <StackPanel DockPanel.Dock="Top" Width="{StaticResource gameplayPanelWidth}" HorizontalAlignment="Left" Margin="142,-40,0,0">
                <Image Source="{StaticResource IconClass}" Stretch="None"/>

                <ContentControl DockPanel.Dock="Top" ContentTemplate="{DynamicResource PassiveSelectorItemTemplate}" Content="{Binding .}"/>
            </StackPanel>

            <ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" Height="Auto" VerticalScrollBarVisibility="Auto">
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                    <!-- Features that may depend on passive selection above -->
                    <!-- ToDo: only show things that actually depend, also separate class/subclass -->
                    <ItemsControl ItemsSource="{Binding FilteredItems, ElementName=ClassPassiveFeatures}" ItemTemplate="{StaticResource ProgressionSpellsTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=ClassPassiveFeatures, Converter={StaticResource CountToVisibilityConverter}}" Margin="0,20,0,0"/>

                    <ItemsControl ItemsSource="{Binding FilteredItems, ElementName=SubClassPassiveFeatures}" ItemTemplate="{StaticResource ProgressionSpellsTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=SubClassPassiveFeatures, Converter={StaticResource CountToVisibilityConverter}}" Margin="0,20,0,0"/>

                    <StackPanel x:Name="PiercingSelector" Visibility="Collapsed" Margin="0,50,0,0">
                        <TextBlock Text="{Binding Source='h261cce55g1d1eg4c09g9675ge5c1be13e820', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}"/>

                        <ListBox Template="{DynamicResource SelectableCarouselTemplate}" ItemsSource="{Binding DataContext.SelectablePiercings, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" SelectedItem="{Binding DataContext.SelectedPiercing, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                    </StackPanel>

                </StackPanel>
            </ls:LSScrollViewer>

        </DockPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.IsLevelUp, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, FallbackValue=False}" Value="True">
                <Setter TargetName="PiercingSelector" Property="Visibility" Value="{Binding DataContext.SelectablePiercings.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource CountToVisibilityConverter}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ls:VMCharacterCreationEquipments}">
        <StackPanel>

            <Image Source="{StaticResource IconClass}" Stretch="None" Margin="0,64,0,0"/>

            <ContentControl ContentTemplate="{DynamicResource EquipmentSelectorItemTemplate}" Content="{Binding .}"/>

        </StackPanel>
    </DataTemplate>

    <Style x:Key="gameplayTabTextStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
        <Setter Property="MaxWidth" Value="300"/>
        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
        <Setter Property="LineHeight" Value="{StaticResource ScaledMediumFontSize}"/>
        <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
        <Setter Property="Foreground" Value="{StaticResource CCTabToDo}"/>
        <Setter Property="Margin" Value="0,2"/>
    </Style>

    <DataTemplate x:Key="gameplayTabSpellSelectorTemplate" DataType="{x:Type ls:VMSpellSelector}">
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" MinWidth="324" Background="Transparent">
            <b:Interaction.Triggers>
                <!-- Set the DataContext for the sub panel -->
                <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                    <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="DataContext" Value="{Binding .}" />
                    <!-- deselect any non-subtabs-->
                    <b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsPassivesList" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsEquipmentList" PropertyName="SelectedIndex" Value="-1" />
                </b:DataTrigger>
                <b:EventTrigger EventName="MouseLeftButtonUp">
                    <ls:LSPlaySound Sound="UI_Shared_Click"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseLeftButtonDown">
                    <ls:LSPlaySound Sound="UI_Shared_Press"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseEnter">
                    <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <Grid>
                <Image x:Name="ring" Source="{StaticResource TabBackground_d}" Stretch="None"/>
                <Image x:Name="icon" Source="{StaticResource IconSubTab_d}" Stretch="None"/>
                <Image x:Name="tick" Source="{StaticResource IconTabCheck_d}" Stretch="None"/>
                <Image x:Name="cross" Visibility="Collapsed" Stretch="None">
                    <Image.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <BeginStoryboard Storyboard="{StaticResource ExclamationAnim}"/>
                        </EventTrigger>
                    </Image.Triggers>
                </Image>
            </Grid>

            <StackPanel VerticalAlignment="Center" Margin="8,0,0,0">
                <TextBlock x:Name="label" Text="{Binding Title}" Style="{StaticResource gameplayTabTextStyle}"/>
                <TextBlock x:Name="selection" Style="{StaticResource gameplayTabTextStyle}">
                    <TextBlock.Text>
                        <MultiBinding StringFormat="{}{0}/{1}">
                            <Binding Path="AddedCount"/>
                            <Binding Path="Additions.Count"/>
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
            </StackPanel>

        </StackPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsComplete}" Value="False">
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <!-- Show red exclamation if no tick present -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=tick, Path=Visibility}" Value="Collapsed"/>
                    <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="cross" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=tick, Path=Visibility}" Value="Collapsed"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="cross" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding ElementName=tick, Path=Visibility}" Value="Visible">
                <Setter TargetName="icon" Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabDone}"/>
                <Setter TargetName="selection" Property="Foreground" Value="{StaticResource CCTabDone}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="icon" Property="Source" Value="{StaticResource IconSubTab_h}"/>
                <Setter TargetName="ring" Property="Source" Value="{StaticResource TabBackground_h}"/>
                <Setter TargetName="tick" Property="Source" Value="{StaticResource IconTabCheck_h}"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
                <Setter TargetName="selection" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
                <Setter TargetName="selection" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
            </DataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="gameplayTabPassiveSelectorTemplate" DataType="{x:Type ls:VMCharacterCreationPassives}">
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" MinWidth="324" Background="Transparent">

            <b:Interaction.Triggers>
                <!-- Set the DataContext for the sub panel -->
                <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                    <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="DataContext" Value="{Binding .}" />
                    <!-- deselect any non-subtabs-->
                    <b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsSpellsList" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsEquipmentList" PropertyName="SelectedIndex" Value="-1" />
                </b:DataTrigger>
                <b:EventTrigger EventName="MouseLeftButtonUp">
                    <ls:LSPlaySound Sound="UI_Shared_Click"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseLeftButtonDown">
                    <ls:LSPlaySound Sound="UI_Shared_Press"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseEnter">
                    <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <Grid>
                <Image x:Name="ring" Source="{StaticResource TabBackground_d}" Stretch="None"/>
                <Image x:Name="icon" Source="{StaticResource IconSubTab_d}" Stretch="None"/>
                <Image x:Name="tick" Source="{StaticResource IconTabCheck_d}" Stretch="None"/>
                <Image x:Name="cross" Visibility="Collapsed" Stretch="None">
                    <Image.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <BeginStoryboard Storyboard="{StaticResource ExclamationAnim}"/>
                        </EventTrigger>
                    </Image.Triggers>
                </Image>
            </Grid>

            <StackPanel VerticalAlignment="Center" Margin="8,0,0,0">
                <TextBlock x:Name="label" Text="{Binding Name}" Style="{StaticResource gameplayTabTextStyle}"/>
                <TextBlock x:Name="selection" Style="{StaticResource gameplayTabTextStyle}">
                    <TextBlock.Text>
                        <MultiBinding StringFormat="{}{0}/{1}">
                            <Binding Path="SelectedPassiveCount"/>
                            <Binding Path="MaxSelectedPassiveCount"/>
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
            </StackPanel>

        </StackPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsComplete}" Value="False">
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <!-- Show red exclamation if no tick present -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=tick, Path=Visibility}" Value="Collapsed"/>
                    <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="cross" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=tick, Path=Visibility}" Value="Collapsed"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="cross" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding ElementName=tick, Path=Visibility}" Value="Visible">
                <Setter TargetName="icon" Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabDone}"/>
                <Setter TargetName="selection" Property="Foreground" Value="{StaticResource CCTabDone}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="icon" Property="Source" Value="{StaticResource IconSubTab_h}"/>
                <Setter TargetName="ring" Property="Source" Value="{StaticResource TabBackground_h}"/>
                <Setter TargetName="tick" Property="Source" Value="{StaticResource IconTabCheck_h}"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
                <Setter TargetName="selection" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
                <Setter TargetName="selection" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
            </DataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="gameplayTabEquipmentSelectorTemplate" DataType="{x:Type ls:VMCharacterCreationEquipments}">
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" MinWidth="324" Background="Transparent">

            <b:Interaction.Triggers>
                <!-- Set the DataContext for the sub panel -->
                <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                    <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="DataContext" Value="{Binding .}" />
                    <!-- deselect any non-subtabs-->
                    <b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsSpellsList" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsPassivesList" PropertyName="SelectedIndex" Value="-1" />
                </b:DataTrigger>
                <b:EventTrigger EventName="MouseLeftButtonUp">
                    <ls:LSPlaySound Sound="UI_Shared_Click"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseLeftButtonDown">
                    <ls:LSPlaySound Sound="UI_Shared_Press"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseEnter">
                    <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <Grid>
                <Image x:Name="ring" Source="{StaticResource TabBackground_d}" Stretch="None"/>
                <Image x:Name="icon" Source="{StaticResource IconSubTab_d}" Stretch="None"/>
                <Image x:Name="tick" Source="{StaticResource IconTabCheck_d}" Stretch="None"/>
                <Image x:Name="cross" Visibility="Collapsed" Stretch="None">
                    <Image.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <BeginStoryboard Storyboard="{StaticResource ExclamationAnim}"/>
                        </EventTrigger>
                    </Image.Triggers>
                </Image>
            </Grid>

            <TextBlock x:Name="label" Text="{Binding Name}" Style="{StaticResource gameplayTabTextStyle}" VerticalAlignment="Center" Margin="8,0,0,0"/>
        </StackPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.Validity.ClassSelectors.EquipmentSelectors}" Value="False">
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <!-- Show red exclamation if no tick present -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=tick, Path=Visibility}" Value="Collapsed"/>
                    <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="cross" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=tick, Path=Visibility}" Value="Collapsed"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="cross" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding ElementName=tick, Path=Visibility}" Value="Visible">
                <Setter TargetName="icon" Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabDone}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="icon" Property="Source" Value="{StaticResource IconSubTab_h}"/>
                <Setter TargetName="ring" Property="Source" Value="{StaticResource TabBackground_h}"/>
                <Setter TargetName="tick" Property="Source" Value="{StaticResource IconTabCheck_h}"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="gameplaySubTabItemStyle" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Visibility" Value="Collapsed"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding UpdateState}" Value="New">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding UpdateState}" Value="Replaced">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="gameplayTabTemplate" TargetType="ListBoxItem">

        <StackPanel>
            <StackPanel x:Name="mainTab" Orientation="Horizontal" HorizontalAlignment="Left" MinWidth="324" MinHeight="136" Background="Transparent">
                <Grid>
                    <Image x:Name="ring" Source="{StaticResource TabBackground_d}" Stretch="None"/>
                    <Image x:Name="icon" Source="{DynamicResource tabIcon}" Stretch="None"/>
                    <Image x:Name="tick" Source="{StaticResource IconTabCheck_d}" Stretch="None"/>
                    <Image x:Name="cross" Visibility="Collapsed" Stretch="None">
                        <Image.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                <BeginStoryboard Storyboard="{StaticResource ExclamationAnim}"/>
                            </EventTrigger>
                        </Image.Triggers>
                    </Image>
                </Grid>

                <StackPanel VerticalAlignment="Center" Margin="8,0,0,0">
                    <TextBlock x:Name="label" Style="{StaticResource gameplayTabTextStyle}"/>
                    <TextBlock x:Name="selection" Style="{StaticResource gameplayTabTextStyle}"/>
                </StackPanel>

                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseLeftButtonUp">
                        <ls:LSPlaySound Sound="UI_Shared_Click"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="MouseLeftButtonDown">
                        <ls:LSPlaySound Sound="UI_Shared_Press"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="MouseEnter">
                        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>

            </StackPanel>

            <Grid x:Name="subTabs" Visibility="Collapsed">

                <Image Source="{StaticResource IconLine}" HorizontalAlignment="Left" Width="4" Stretch="Fill" Margin="44,-32,0,12"/>

                <StackPanel>
                    <ListBox x:Name="subTabsSpellsList" ItemTemplate="{StaticResource gameplayTabSpellSelectorTemplate}">
                        <b:Interaction.Triggers>
                            <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=subTabsSpellsList}">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding Path=SelectedIndex, ElementName=subTabsSpellsList}" Operator="NotEqual" RightOperand="-1"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="Tag" Value="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
                            </b:PropertyChangedTrigger>

                            <!-- deselect this ListBox if selection is made elsewhere -->
                            <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=gameplayTabs}">
                                <b:ChangePropertyAction TargetName="subTabsSpellsList" PropertyName="SelectedIndex" Value="-1" />
                            </b:PropertyChangedTrigger>
                            <b:PropertyChangedTrigger Binding="{Binding Path=Tag, ElementName=gameplaySubPanel}">
                                <b:ChangePropertyAction TargetName="subTabsSpellsList" PropertyName="SelectedIndex" Value="-1" />
                            </b:PropertyChangedTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>

                    <ListBox x:Name="subTabsPassivesList" ItemTemplate="{StaticResource gameplayTabPassiveSelectorTemplate}" ItemContainerStyle="{StaticResource gameplaySubTabItemStyle}">
                        <b:Interaction.Triggers>
                            <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=subTabsPassivesList}">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding Path=SelectedIndex, ElementName=subTabsPassivesList}" Operator="NotEqual" RightOperand="-1"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="Tag" Value="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
                            </b:PropertyChangedTrigger>

                            <!-- deselect this ListBox if selection is made elsewhere -->
                            <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=gameplayTabs}">
                                <b:ChangePropertyAction TargetName="subTabsPassivesList" PropertyName="SelectedIndex" Value="-1" />
                            </b:PropertyChangedTrigger>
                            <b:PropertyChangedTrigger Binding="{Binding Path=Tag, ElementName=gameplaySubPanel}">
                                <b:ChangePropertyAction TargetName="subTabsPassivesList" PropertyName="SelectedIndex" Value="-1" />
                            </b:PropertyChangedTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>

                    <ListBox x:Name="subTabsEquipmentList" ItemTemplate="{StaticResource gameplayTabEquipmentSelectorTemplate}" ItemContainerStyle="{StaticResource gameplaySubTabItemStyle}">
                        <b:Interaction.Triggers>
                            <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=subTabsEquipmentList}">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding Path=SelectedIndex, ElementName=subTabsEquipmentList}" Operator="NotEqual" RightOperand="-1"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="Tag" Value="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
                            </b:PropertyChangedTrigger>

                            <!-- deselect this ListBox if selection is made elsewhere -->
                            <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=gameplayTabs}">
                                <b:ChangePropertyAction TargetName="subTabsEquipmentList" PropertyName="SelectedIndex" Value="-1" />
                            </b:PropertyChangedTrigger>
                            <b:PropertyChangedTrigger Binding="{Binding Path=Tag, ElementName=gameplaySubPanel}">
                                <b:ChangePropertyAction TargetName="subTabsEquipmentList" PropertyName="SelectedIndex" Value="-1" />
                            </b:PropertyChangedTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
            </Grid>

        </StackPanel>

        <ControlTemplate.Triggers>

            <Trigger Property="Tag" Value="levelup">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='he3ccedd0gceaeg4b1fg8e74g9dfc6da58cd2', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="selection" Property="Text" Value="{Binding SelectedMultiClass.Name}"/>
                <Setter TargetName="tick" Property="Visibility" Value="{Binding SelectedOrigin, Converter={StaticResource NullToCollapsedConverter}}"/>
            </Trigger>

            <Trigger Property="Tag" Value="origin">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='hd0d4922ag7581g43eag9142g44e22c131fa8', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="selection" Property="Text" Value="{Binding SelectedOrigin.Name}"/>
                <Setter TargetName="tick" Property="Visibility" Value="{Binding SelectedOrigin, Converter={StaticResource NullToCollapsedConverter}}"/>
            </Trigger>
            <Trigger Property="Tag" Value="race">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='hadf27237ge191g4922ga84cg055b984c9b1f', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="selection" Property="Text" Value="{Binding SelectedRace.Name}"/>
                <Setter TargetName="tick" Property="Visibility" Value="{Binding SelectedRace, Converter={StaticResource NullToCollapsedConverter}}"/>
            </Trigger>
            <Trigger Property="Tag" Value="subrace">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='hf4977710g272bg4334g84aegf749a3b18205', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="selection" Property="Text" Value="{Binding SelectedSubRace.Name}"/>
                <Setter TargetName="tick" Property="Visibility" Value="{Binding SelectedSubRace, Converter={StaticResource NullToCollapsedConverter}}"/>
            </Trigger>
            <Trigger Property="Tag" Value="class">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h4d0d00cfg4edeg42c3gaa4agcc3908351b8d', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="class"/>
                    <Condition Binding="{Binding SelectedMultiClass.Level, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="label" Property="Text" Value="{Binding Source='hcbc3c9a8g9e80g4139g952bga971015c1f41', Converter={StaticResource TranslatedStringConverter}}"/>
            </MultiDataTrigger>
            <Trigger Property="Tag" Value="subclass">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h1e67bc9cg0f53g4218g8ce8geb6a6636f141', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="selection" Property="Text" Value="{Binding SelectedSubClass.Name}"/>
            </Trigger>
            <!-- For LevelUp only (in CC this tab is part of appearance) -->
            <Trigger Property="Tag" Value="draconic">
                <Setter TargetName="label" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h0e1fded7g681ag4e5fgb0a2gc5928ab399a1', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="Tag" Value="deity">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h5238a9c6gb90fg40bbg9335gfb37d6e91b94', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="selection" Property="Text" Value="{Binding SelectedDeity.Name}"/>
                <Setter TargetName="tick" Property="Visibility" Value="{Binding SelectedDeity, Converter={StaticResource NullToCollapsedConverter}}"/>
            </Trigger>
            <Trigger Property="Tag" Value="background">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='hebf1e383g9a70g42d6gb3e2g3906281a90b8', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="selection" Property="Text" Value="{Binding SelectedBackground.Name}"/>
                <Setter TargetName="tick" Property="Visibility" Value="{Binding SelectedBackground, Converter={StaticResource NullToCollapsedConverter}}"/>
            </Trigger>
            <Trigger Property="Tag" Value="ability">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h6406727cg0668g4fdag9ca1g72c679c0aeab', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="selection" Property="Text">
                    <Setter.Value>
                        <MultiBinding StringFormat="{}{0}/{1}">
                            <Binding Path="UsedAbilityPoints"/>
                            <Binding Path="TotalAbilityPoints"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Tag" Value="feat">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h86926dd9g4332g4ae2g9954g29f5fb4b7b26', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="selection" Property="Text" Value="{Binding SelectedFeat.Name}"/>
                <Setter TargetName="tick" Property="Visibility" Value="{Binding SelectedFeat, Converter={StaticResource NullToCollapsedConverter}}"/>
            </Trigger>

            <Trigger Property="Tag" Value="spellreplace">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h000011feg0be5g4f09g978eg030b3e2e62c6', Converter={StaticResource TranslatedStringConverter}}"/>
                <!-- Spell Replacement is optional -->
                <Setter TargetName="tick" Property="Visibility" Value="Visible"/>
            </Trigger>

            <Trigger Property="Tag" Value="spellprep">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h23ac2ed9g60c8g4d02gaedag5f37282cd1a5', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="selection" Property="Text">
                    <Setter.Value>
                        <MultiBinding StringFormat="{}{0}/{1}">
                            <Binding Path="SpellPrepare.PreparedCount"/>
                            <Binding Path="SpellPrepare.Prepared.Count"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="ring" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/tab_inactive_disabled.png"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
                <Setter TargetName="selection" Property="Visibility" Value="Collapsed"/>
            </Trigger>

            <DataTrigger Binding="{Binding ElementName=selection, Path=Text}" Value="">
                <Setter TargetName="selection" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <!-- more complex validation/tick Conditions -->

            <!-- Any subtabs -->
            <!-- Spell subtabs -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="race"/>
                    <Condition Binding="{Binding Path=FilteredItems.Count, ElementName=RaceSpellSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding FilteredItems, ElementName=RaceSpellSelectors}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="subrace"/>
                    <Condition Binding="{Binding Path=FilteredItems.Count, ElementName=SubRaceSpellSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding FilteredItems, ElementName=SubRaceSpellSelectors}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="class"/>
                    <Condition Binding="{Binding Path=FilteredItems.Count, ElementName=ClassSpellSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding FilteredItems, ElementName=ClassSpellSelectors}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="subclass"/>
                    <Condition Binding="{Binding Path=FilteredItems.Count, ElementName=SubClassSpellSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding FilteredItems, ElementName=SubClassSpellSelectors}"/>
            </MultiDataTrigger>
            <!-- Spell subtabs for LevelUp (if there is not a new subclass)-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="levelup"/>
                    <Condition Binding="{Binding Path=SelectableSubClasses.Count}" Value="0"/>
                    <Condition Binding="{Binding ClassProgressionDetails.SpellSelectors.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding ClassProgressionDetails.SpellSelectors}"/>
            </MultiDataTrigger>
            <!-- Spell subtabs for LevelUp (if there is a new subclass tab)-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="levelup"/>
                    <Condition Binding="{Binding Path=SelectableSubClasses.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                    <Condition Binding="{Binding Path=FilteredItems.Count, ElementName=ClassSpellSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding FilteredItems, ElementName=ClassSpellSelectors}"/>
            </MultiDataTrigger>

            <!-- Passive subtabs -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="class"/>
                    <Condition Binding="{Binding Path=DataContext.ClassPassives.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsPassivesList" Property="ItemsSource" Value="{Binding ClassProgressionDetails.NotSubPassiveSelectors}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="subclass"/>
                    <Condition Binding="{Binding Path=DataContext.SubClassPassives.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsPassivesList" Property="ItemsSource" Value="{Binding ClassProgressionDetails.SubPassiveSelectors}"/>
            </MultiDataTrigger>
            <!-- Passive subtabs for Level Up (if there is not a new subclass tab) -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="levelup"/>
                    <Condition Binding="{Binding Path=SelectableSubClasses.Count}" Value="0"/>
                    <Condition Binding="{Binding ClassAndSubClassPassives.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsPassivesList" Property="ItemsSource" Value="{Binding ClassAndSubClassPassives}"/>
            </MultiDataTrigger>
            <!-- Passive subtabs for Level Up (when there is a new subclass tab) -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="levelup"/>
                    <Condition Binding="{Binding Path=SelectableSubClasses.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                    <Condition Binding="{Binding Path=DataContext.ClassPassives.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsPassivesList" Property="ItemsSource" Value="{Binding ClassProgressionDetails.NotSubPassiveSelectors}"/>
            </MultiDataTrigger>

            <!-- Equipment subtabs -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="class"/>
                    <Condition Binding="{Binding Path=DataContext.ClassEquipments.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsEquipmentList" Property="ItemsSource" Value="{Binding ClassProgressionDetails.NotSubEquipmentSelectors}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="subclass"/>
                    <Condition Binding="{Binding Path=DataContext.SubClassEquipments.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsEquipmentList" Property="ItemsSource" Value="{Binding ClassProgressionDetails.SubEquipmentSelectors}"/>
            </MultiDataTrigger>

            <!-- Ticks -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="class"/>
                    <Condition Binding="{Binding SelectableClasses.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="selection" Property="Text" Value="{Binding SelectedClass.Name}"/>
                <Setter TargetName="tick" Property="Visibility" Value="{Binding SelectedClass, Converter={StaticResource NullToCollapsedConverter}}"/>
            </MultiDataTrigger>
            <!-- For class tab on LevelUp -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="class"/>
                    <Condition Binding="{Binding SelectableMultiClasses.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="selection" Property="Text" Value="{Binding SelectedMultiClass.Name}"/>
                <Setter TargetName="tick" Property="Visibility" Value="{Binding SelectedMultiClass, Converter={StaticResource NullToCollapsedConverter}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="class"/>
                    <Condition Binding="{Binding SelectedMultiClass.Level, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.RaceSkills.IsComplete}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="class"/>
                    <Condition Binding="{Binding SelectedMultiClass.Level, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.ClassSkills.IsComplete}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="class"/>
                    <Condition Binding="{Binding SelectedMultiClass.Level, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.AllSkills.ExpertiseSkills.IsComplete}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="subclass"/>
                    <Condition Binding="{Binding SelectableSubClasses.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                    <Condition Binding="{Binding SelectedSubClass}" Value="{x:Null}"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="ability"/>
                    <Condition Binding="{Binding SelectedClass}" Value="{x:Null}"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="selection" Property="Text" Value=""/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="ability"/>
                    <Condition Binding="{Binding SelectableMultiClasses.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="selection" Property="Text" Value=""/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="ability"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.UnusedAbilityPoints, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="ability"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.RaceSkills.IsComplete}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="ability"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.ClassSkills.IsComplete}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="ability"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.AllSkills.ExpertiseSkills.IsComplete}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="ability"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.Validity.RacialSelectors.AbilitySelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="ability"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.Validity.ClassSelectors.AbilitySelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="ability"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.Validity.RacialSelectors.AbilityBonusSelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="ability"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.Validity.ClassSelectors.AbilityBonusSelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>

            <!-- skill selectors on level up -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="levelup"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.RaceSkills.IsComplete}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="levelup"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.ClassSkills.IsComplete}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="levelup"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.AllSkills.ExpertiseSkills.IsComplete}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="spellprep"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.SpellPrepare.IsInvalid}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="spellprep"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.SpellPrepare.IsComplete}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>

            <!-- Feats with ability points (e.g., Athlete) -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="feat"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.Validity.RacialSelectors.AbilitySelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="feat"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.Validity.ClassSelectors.AbilitySelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>

            <!-- Feats with passives (e.g., Elemental Adept) -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="feat"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.Validity.RacialSelectors.PassiveSelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="feat"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.Validity.ClassSelectors.PassiveSelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>

            <!-- Feats with spells and/or cantrips (e.g., Magic Initiate: Wizard) -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="feat"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.Validity.RacialSelectors.SpellSelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="feat"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.Validity.ClassSelectors.SpellSelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>

            <!-- Feats with skills (e.g., Skilled) -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="feat"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.Validity.RacialSelectors.SkillProficiencySelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="feat"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},Path=DataContext.Validity.ClassSelectors.SkillProficiencySelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="tick" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>

            <!-- Show red exclamation if no tick present -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=tick, Path=Visibility}" Value="Collapsed"/>
                    <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="cross" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=tick, Path=Visibility}" Value="Collapsed"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="cross" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding ElementName=tick, Path=Visibility}" Value="Visible">
                <Setter TargetName="icon" Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabDone}"/>
                <Setter TargetName="selection" Property="Foreground" Value="{StaticResource CCTabDone}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsMouseOver, ElementName=mainTab}" Value="True">
                <Setter TargetName="icon" Property="Source" Value="{DynamicResource tabIconHover}"/>
                <Setter TargetName="ring" Property="Source" Value="{StaticResource TabBackground_h}"/>
                <Setter TargetName="tick" Property="Source" Value="{StaticResource IconTabCheck_h}"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
                <Setter TargetName="selection" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
            </DataTrigger>

            <Trigger Property="IsSelected" Value="True">
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
                <Setter TargetName="selection" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>



    <ControlTemplate x:Key="ColorOptionTickBoxTemplate">
        <ls:LSToggleButton IsChecked="{Binding Value}">
            <ls:LSToggleButton.Template>
                <ControlTemplate TargetType="ToggleButton">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,0,0,20">
                        <Grid>
                            <Image x:Name="img" Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/checkBox_d.png"/>
                            <Image x:Name="check" Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_check_d.png" Visibility="Hidden"/>
                        </Grid>
                        <TextBlock VerticalAlignment="Center" Margin="20,0,0,0" TextWrapping="Wrap" ls:TextBlockFormatter.SourceText="{Binding Text}" Foreground="{DynamicResource LS_accent75TxtColor}"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="check" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/checkBox_disabled.png"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/checkBox_h.png"/>
                            <Setter TargetName="check" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_check_h.png"/>
                        </Trigger>
                        <Trigger Property="IsPressed"  Value="True">
                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/checkBox_p.png"/>
                            <Setter TargetName="check" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_check_h.png"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </ls:LSToggleButton.Template>
        </ls:LSToggleButton>
    </ControlTemplate>

    <Style x:Key="ColorSwatchStyle" TargetType="ItemsControl">
        <Setter Property="ItemsSource" Value="{Binding ColorSwatch}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel MaxWidth="700" HorizontalAlignment="Center"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>

                    <Border x:Name="colorCell" Width="60" Height="60" BorderBrush="Transparent" BorderThickness="4">
                        <ls:LSButton x:Name="btn" Command="{Binding DataContext.SetColor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type StackPanel}}}" CommandParameter="{Binding}" SoundID="UI_HUD_CC_ColorCellButton">
                            <ls:LSButton.ToolTip>
                                <ls:LSTooltip Content="{Binding DataContext.ColorName, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource TranslatedStringConverter}, ConverterParameter='LocaKey'}"/>
                            </ls:LSButton.ToolTip>
                            <ls:LSButton.Template>
                                <ControlTemplate>
                                    <Rectangle Fill="{Binding Color}"/>
                                </ControlTemplate>
                            </ls:LSButton.Template>
                        </ls:LSButton>
                    </Border>

                    <DataTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="colorCell" Property="BorderBrush" Value="{StaticResource CCTextPrimary}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Selected}" Value="True">
                            <Setter TargetName="colorCell" Property="BorderBrush" Value="{StaticResource CCTextPrimary}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ItemsPanelTemplate x:Key="selectableColourPanel">
        <WrapPanel MaxWidth="650" HorizontalAlignment="Center"/>
    </ItemsPanelTemplate>

    <DataTemplate x:Key="selectableColourTemplate" DataType="{x:Type ls:VMSelectableColour}">
        <Border x:Name="colorCell" Width="60" Height="60" BorderBrush="Transparent" BorderThickness="4">
            <Border.ToolTip>
                <ls:LSTooltip>
                    <TextBlock Text="{Binding Path=DataContext.Name, ElementName=colorCell}" TextWrapping="Wrap"/>
                </ls:LSTooltip>
            </Border.ToolTip>
            <Rectangle Fill="{Binding Colour}"/>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseLeftButtonDown">
                    <ls:LSPlaySound Sound="UI_Shared_Select"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseEnter">
                    <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="colorCell" Property="BorderBrush" Value="{StaticResource CCTextPrimary}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}},Path=IsMouseOver}" Value="True">
                <Setter TargetName="colorCell" Property="BorderBrush" Value="{StaticResource CCTextPrimary}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="CCIconTextListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}" >
        <Setter Property="noesis:StyleInteraction.Triggers">
            <Setter.Value>
                <noesis:StyleTriggerCollection>
                    <b:EventTrigger EventName="PreviewMouseLeftButtonUp">
                        <ls:LSPlaySound Sound="UI_Shared_Panel_Select"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="MouseLeftButtonDown">
                        <ls:LSPlaySound Sound="UI_Shared_Secondary_Press"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="MouseEnter">
                        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                    </b:EventTrigger>
                </noesis:StyleTriggerCollection>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="OriginPortraitTemplate" DataType="{x:Type ls:VMSelectableOrigin}">
        <StackPanel x:Name="base" Background="Transparent" Width="{StaticResource IconTextWidth}" Margin="0,0,0,10" ToolTipService.ShowOnDisabled="True">
            <StackPanel.ToolTip>
                <ls:LSTooltip>
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Path=DataContext.DisableReason, ElementName=base}"/>
                </ls:LSTooltip>
            </StackPanel.ToolTip>
            <Grid>
                <Rectangle x:Name="portrait" Fill="{Binding Portrait}" Width="132" Height="196" RadiusX="20" RadiusY="20"/>
                <Image x:Name="lock" Visibility="Collapsed" Source="{StaticResource IconLock}" Stretch="None" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="46,0,0,20"/>

                <Ellipse Height="50" Width="50" Fill="{Binding OtherPlayerChoice.CommunityIcon}" ToolTipService.ShowOnDisabled="True" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,46,22">
                    <Ellipse.ToolTip>
                        <ls:LSTooltip Content="{Binding DataContext.OtherPlayerChoice.Name , RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                    </Ellipse.ToolTip>
                </Ellipse>

                <Image x:Name="cross" Visibility="Collapsed" Stretch="None">
                    <Image.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <BeginStoryboard Storyboard="{StaticResource ExclamationAnim}"/>
                        </EventTrigger>
                    </Image.Triggers>
                </Image>

                <ls:LSNineSliceImage x:Name="frame" Visibility="Hidden" ImageSource="{StaticResource IconGridSelector}" Slices="32,32,32,32" Width="168" Padding="0,18,0,18">
                    <Rectangle Fill="Transparent" Width="164" Height="196"/>
                </ls:LSNineSliceImage>
            </Grid>
            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Name}" HorizontalAlignment="Center" TextWrapping="Wrap" IsHitTestVisible="False"/>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsSelectable}" Value="True">
                <Setter TargetName="base" Property="ToolTip" Value="{x:Null}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSelectable}" Value="False">
                <Setter TargetName="lock" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True"/>
                    <Condition Binding="{Binding DataContext.Validity.SameOriginSelectedByMultiplePlayers,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard>
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="cross">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0.5" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard>
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="cross">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0.5" Value="{x:Static Visibility.Collapsed}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="frame" Property="Visibility" Value="Visible"/>
                <Setter TargetName="base" Property="ToolTip" Value="{x:Null}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}},Path=IsMouseOver}" Value="True">
                <Setter TargetName="frame" Property="Visibility" Value="Visible"/>
                <Setter TargetName="frame" Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/selector_CC_h.png"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="ClassIconTemplate" DataType="ls:VMSelectableClass">
        <StackPanel>
            <StackPanel.Resources>
                <Style TargetType="TextBlock">
                    <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
                </Style>
            </StackPanel.Resources>

            <Grid HorizontalAlignment="Center">
                <Image Style="{StaticResource ClassIconHotbarStyle}" Width="144" Stretch="Uniform"/>
                <ls:LSNineSliceImage x:Name="frame" Visibility="Hidden" ImageSource="{StaticResource IconGridSelector}" Slices="32,32,32,32" Padding="16" Width="208" Height="208" Margin="-6"/>
            </Grid>
            <TextBlock x:Name="label" ls:TextBlockFormatter.SourceText="{Binding ShortName}" Foreground="{StaticResource CCTextNormal}" Width="{DynamicResource IconTextWidth}" 
                       TextWrapping="Wrap" TextAlignment="Center" HorizontalAlignment="Center" Margin="0,0,0,12"/>
            <TextBlock x:Name="level" Foreground="{StaticResource CCTextNormal}" HorizontalAlignment="Center">
                <TextBlock.Text>
                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                        <Binding Source="hd678d4eeg181fg499dg9e81g2146ab24e03a"/>
                        <Binding Path="DataContext.Level" RelativeSource="{RelativeSource Mode=Self}"/>
                        <Binding Source=""/>
                    </MultiBinding>
                </TextBlock.Text>
            </TextBlock>
        </StackPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ShortName}" Value="">
                <Setter TargetName="label" Property="Text" Value="{Binding Name}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="frame" Property="Visibility" Value="Visible"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
                <Setter TargetName="level" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}},Path=IsMouseOver}" Value="True">
                <Setter TargetName="frame" Property="Visibility" Value="Visible"/>
                <Setter TargetName="frame" Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/selector_CC_h.png"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Level}" Value="0">
                <Setter TargetName="level" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="ReducedClassIconTemplate" DataType="ls:VMSelectableClass">
        <DataTemplate.Resources>
            <BitmapImage x:Key="LevelBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundSmall_d.png" />
        </DataTemplate.Resources>
        <StackPanel>
            <Grid HorizontalAlignment="Center">
                <Image x:Name="icon" Style="{StaticResource ClassIconHotbarStyle}" Stretch="None"/>
                <ls:LSNineSliceImage x:Name="frame" Visibility="Hidden" ImageSource="{StaticResource IconGridSelector}" Slices="32,32,32,32" Width="148" Height="148"/>

                <Grid x:Name="level" Margin="4,6" HorizontalAlignment="Left" VerticalAlignment="Top">
                    <Image Source="{StaticResource LevelBg}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <TextBlock Foreground="{StaticResource CCTextPrimary}" Text="{Binding Level}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </Grid>
            </Grid>
            <TextBlock x:Name="label" ls:TextBlockFormatter.SourceText="{Binding ShortName}" Foreground="{StaticResource CCTextNormal}" FontSize="{StaticResource ScaledDefaultFontSize}" Width="230" TextWrapping="Wrap" TextAlignment="Center" HorizontalAlignment="Center"/>
        </StackPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ShortName}" Value="">
                <Setter TargetName="label" Property="Text" Value="{Binding Name}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="frame" Property="Visibility" Value="Visible"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}},Path=IsMouseOver}" Value="True">
                <Setter TargetName="frame" Property="Visibility" Value="Visible"/>
                <Setter TargetName="frame" Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/selector_CC_h.png"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Level}" Value="0">
                <Setter TargetName="level" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="False">
                <Setter TargetName="icon" Property="Opacity" Value="0.5"/>
                <Setter TargetName="frame" Property="Opacity" Value="0.5"/>
                <Setter TargetName="label" Property="Opacity" Value="0.5"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="CustomIconTemplate" DataType="{x:Type ls:VMSelectable}">
        <StackPanel>
            <Grid HorizontalAlignment="Center">
                <Rectangle x:Name="icon" Width="188" Height="188" Fill="{StaticResource CCIconDefault}" Style="{DynamicResource CustomIconStyle}"/>
                <ls:LSNineSliceImage x:Name="frame" Visibility="Hidden" ImageSource="{StaticResource IconGridSelector}" Slices="32,32,32,32" Padding="16" Width="208" Height="208" Margin="-6"/>
            </Grid>
            <TextBlock x:Name="label" ls:TextBlockFormatter.SourceText="{Binding Name}" Foreground="{StaticResource CCTextLightest}" Width="{DynamicResource IconTextWidth}" 
                       TextWrapping="Wrap" TextAlignment="Center" HorizontalAlignment="Center" FontSize="{StaticResource ScaledDefaultFontSize}" Margin="0,0,0,12"/>
        </StackPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="icon" Property="Fill" Value="{StaticResource CCIconSelected}"/>
                <Setter TargetName="frame" Property="Visibility" Value="Visible"/>
                <Setter TargetName="label" Property="Foreground" Value="White"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}},Path=IsMouseOver}" Value="True">
                <Setter TargetName="icon" Property="Fill" Value="{StaticResource CCIconHovered}"/>
                <Setter TargetName="frame" Property="Visibility" Value="Visible"/>
                <Setter TargetName="frame" Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/selector_CC_h.png"/>
                <Setter TargetName="label" Property="Foreground" Value="White"/>
            </DataTrigger>

            <!--Custom strings for Dragonborn subraces-->
            <!-- Dragonborn race name -->
            <DataTrigger Binding="{Binding Guid}" Value="9c61a74a-20df-4119-89c5-d996956b6c66">
                <Setter TargetName="label" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h0d41cdbfgd9b0g4ce2gb1dcgea2622b3a620',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <!--Black-->
            <DataTrigger Binding="{Binding Guid}" Value="fdae09c5-7bfc-47bc-8996-01f797e0c170">
                <Setter TargetName="label" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h638ec065gd59dg4780gb0f6g147f6ff5dc3d',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <!--Blue-->
            <DataTrigger Binding="{Binding Guid}" Value="2103e15a-1eae-4dc0-a9b7-3b96c3a08869">
                <Setter TargetName="label" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h6a1c993bgbefeg41cdg83ccg66974414f604',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <!--Brass-->
            <DataTrigger Binding="{Binding Guid}" Value="32f676f0-41ca-4469-baa6-341d5c95a708">
                <Setter TargetName="label" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h8d9f1a28g0ad2g4d26gae17g132be9e3bab5',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <!--Bronze-->
            <DataTrigger Binding="{Binding Guid}" Value="48318453-8aa8-4924-827d-173c957ac1de">
                <Setter TargetName="label" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h1c0f28acg348dg4f8fg8fa6g6df514c93166',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <!--Copper-->
            <DataTrigger Binding="{Binding Guid}" Value="3f7e4753-277e-4259-9b29-423b9149cfb4">
                <Setter TargetName="label" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hc530246dg9d89g478egb052g9ebf8de2b081',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <!--Gold-->
            <DataTrigger Binding="{Binding Guid}" Value="fe648fc4-3bc9-412c-b692-15fecddc3c69">
                <Setter TargetName="label" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h406620e5g846cg4c3eg9e50g1fb3041a894c',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <!--Green-->
            <DataTrigger Binding="{Binding Guid}" Value="d6eadf47-54f7-4b05-84b3-0a83eb88d016">
                <Setter TargetName="label" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h559850ceg9952g4739g8344g76105541e93a',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <!--Red-->
            <DataTrigger Binding="{Binding Guid}" Value="61a2c59d-fe8d-4644-8d04-6fae2b239eaf">
                <Setter TargetName="label" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h9685c582g8143g44f9ga0beg8e2800dba07b',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <!--Silver-->
            <DataTrigger Binding="{Binding Guid}" Value="dff74c31-2ddc-4270-9615-01a1438ee61c">
                <Setter TargetName="label" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h293ee565ga0a8g40b5g8d68ga119da15668f',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <!--White-->
            <DataTrigger Binding="{Binding Guid}" Value="cbe10ab9-11a6-450e-844a-175bcca25de7">
                <Setter TargetName="label" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h6f244511g84dag44f2g884dg48475c76d9bb',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="CustomBrushIconTemplate" DataType="{x:Type ls:VMSelectable}">
        <Grid x:Name="base" HorizontalAlignment="Center">
            <Grid.ToolTip>
                <ls:LSTooltip Content="{Binding DataContext.Name, ElementName=base}"/>
            </Grid.ToolTip>
            <Rectangle x:Name="icon" Fill="{Binding Icon}" Width="196" Height="196" RadiusX="20" RadiusY="20"/>
            <ls:LSNineSliceImage x:Name="frame" Visibility="Hidden" ImageSource="{StaticResource IconGridSelector}" Slices="32,32,32,32" Padding="16" Width="216" Height="216"/>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseLeftButtonUp">
                    <ls:LSPlaySound Sound="UI_Shared_Panel_Select"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseLeftButtonDown">
                    <ls:LSPlaySound Sound="UI_Shared_Secondary_Press"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseEnter">
                    <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="frame" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}},Path=IsMouseOver}" Value="True">
                <Setter TargetName="frame" Property="Visibility" Value="Visible"/>
                <Setter TargetName="frame" Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/selector_CC_h.png"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="appearanceScrollerTemplate" TargetType="ListBox">
        <ls:LSScrollViewer Template="{StaticResource NoForcedStyleScrollViewerTemplate}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" VerticalScrollBarVisibility="Auto">
            <ItemsPresenter/>
        </ls:LSScrollViewer>
    </ControlTemplate>

    <Style x:Key="appearanceIconGridStyle" TargetType="ListBox">
        <Setter Property="Template" Value="{StaticResource appearanceScrollerTemplate}"/>
        <Setter Property="ItemTemplate" Value="{StaticResource CustomBrushIconTemplate}"/>
        <Setter Property="Width" Value="1060"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel MaxWidth="1000" HorizontalAlignment="Left" Margin="100,0,0,0" FlowDirection="LeftToRight"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>  

    <Style x:Key="headAppearanceIconGridStyle" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate" Value="{StaticResource CustomBrushIconTemplate}"/>
        <!-- MOD START - Remove scroll limit for heads -->
        <!--<Setter Property="MaxHeight" Value="736"/> -->
		<!-- MOD END -->
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel HorizontalAlignment="Center"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ChangeButtonTemplate" TargetType="{x:Type ls:LSToggleButton}">
        <Grid Background="Transparent">
            <Image x:Name="bg" Source="{StaticResource BtnNormal}" Stretch="None"/>
            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=hbe10cd88g9f76g4626g8e4dgb2ebb22f0dc7, Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
            <Image x:Name="icon" Source="{StaticResource IconPopup}" Stretch="None" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,24,0"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{StaticResource BtnNormal_h}" TargetName="bg"/>
                <Setter Property="Source" Value="{StaticResource IconPopup_h}" TargetName="icon"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="{StaticResource BtnNormal_p}" TargetName="bg"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="EditButtonTemplate" TargetType="{x:Type ls:LSToggleButton}">
        <Grid Background="Transparent" Width="350">
            <Image x:Name="bg" Source="{StaticResource BtnNormal}" Stretch="None"/>
            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=hbdf1d009gc270g429fga462ge991f6d381ee, Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
            <Image x:Name="icon" Source="{StaticResource IconEdit_d}" Stretch="None" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,34,0"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{StaticResource BtnNormal_h}" TargetName="bg"/>
                <Setter Property="Source" Value="{StaticResource IconEdit_h}" TargetName="icon"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="{StaticResource BtnNormal_p}" TargetName="bg"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Source" Value="{StaticResource ButtonActive}" TargetName="bg"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="EditSkillsButtonTemplate" TargetType="{x:Type ls:LSToggleButton}">
        <Grid>
            <Image x:Name="bg" Source="{StaticResource BtnNormal}" Stretch="None"/>
            <TextBlock x:Name="text" ls:TextBlockFormatter.SourceText="{Binding Source=hbe10cd88g9f76g4626g8e4dgb2ebb22f0dc7, Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center"/>

            <Image x:Name="cross" Visibility="Collapsed" Stretch="Uniform" Height="54" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="20,0,0,0">
                <Image.Triggers>
                    <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                        <BeginStoryboard Storyboard="{StaticResource ExclamationAnim}"/>
                    </EventTrigger>
                </Image.Triggers>
            </Image>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding RaceSkills.IsComplete}" Value="False">
                <Setter TargetName="cross" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ClassSkills.IsComplete}" Value="False">
                <Setter TargetName="cross" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding AllSkills.ExpertiseSkills.IsComplete}" Value="False">
                <Setter TargetName="cross" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="FrameWithIconButtonTemplate" TargetType="Button">
        <Grid x:Name="panel">
            <Image x:Name="frame" Source="{DynamicResource FrameNormal}" Stretch="None"/>
            <Image x:Name="icon" Source="{DynamicResource IconNormal}" Stretch="None"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{DynamicResource FrameHighlight}" TargetName="frame"/>
                <Setter Property="Source" Value="{DynamicResource IconHighlight}" TargetName="icon"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="{DynamicResource FramePressed}" TargetName="frame"/>
                <Setter Property="Source" Value="{DynamicResource IconPressed}" TargetName="icon"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Source" Value="{DynamicResource FrameDisabled}" TargetName="frame"/>
                <Setter Property="Source" Value="{DynamicResource IconDisabled}" TargetName="icon"/>
                <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}" TargetName="panel"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="FramedIconWithTextButtonTemplate" TargetType="ls:LSButton">
        <StackPanel Orientation="Horizontal" Background="Transparent">
            <TextBlock x:Name="leftText" Visibility="Collapsed" ls:TextBlockFormatter.SourceText="{TemplateBinding Content}" VerticalAlignment="Center" Margin="0,0,8,0"/>
            <Grid>
                <Image x:Name="frame" Source="{DynamicResource FrameNormal}" Stretch="None"/>
                <Image x:Name="icon" Source="{DynamicResource IconNormal}" Stretch="None">
                    <Image.RenderTransform>
                        <ScaleTransform ScaleX="{DynamicResource XScale}" CenterX="{DynamicResource XCenter}"/>
                    </Image.RenderTransform>
                </Image>
            </Grid>
            <TextBlock x:Name="rightText" Visibility="Collapsed" ls:TextBlockFormatter.SourceText="{TemplateBinding Content}" VerticalAlignment="Center" Margin="8,0,0,0"/>
        </StackPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="Tag" Value="TextOnLeft">
                <Setter TargetName="leftText" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="Tag" Value="TextOnRight">
                <Setter TargetName="rightText" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{DynamicResource FrameHighlight}" TargetName="frame"/>
                <Setter Property="Source" Value="{DynamicResource IconHighlight}" TargetName="icon"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="{DynamicResource FramePressed}" TargetName="frame"/>
                <Setter Property="Source" Value="{DynamicResource IconPressed}" TargetName="icon"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Source" Value="{DynamicResource FrameDisabled}" TargetName="frame"/>
                <Setter Property="Source" Value="{DynamicResource IconDisabled}" TargetName="icon"/>
                <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}" TargetName="icon"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="SpellSelectorPreviewTemplate" DataType="ls:VMSpellSelector">
        <ls:LSNineSliceImage Padding="50,0,50,32" Slices="100,80,100,80" MinWidth="388" MaxWidth="1000" MinHeight="200" ImageSource="{StaticResource DetailsBoxSmall}" Visibility="{Binding Count, Converter={StaticResource CountToVisibilityConverter}}" HorizontalAlignment="Center" Margin="0,20,0,0">
            <StackPanel>
                <TextBlock Text="{Binding Title}" MaxWidth="534" Style="{StaticResource selectorPreviewText}"/>
                <ItemsControl Style="{StaticResource SpellSelectorItemControlStyle}" ItemsSource="{Binding Additions}" HorizontalAlignment="Center" Margin="0,8,0,0"/>
            </StackPanel>
        </ls:LSNineSliceImage>
    </DataTemplate>

    <DataTemplate x:Key="LevelUpSpellSelectorPreviewTemplate" DataType="ls:VMSpellSelector">
        <ContentControl Template="{StaticResource NewItemStripTemplate}">
            <StackPanel x:Name="previewPanel" Background="Transparent">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseLeftButtonUp">
                        <b:InvokeCommandAction Command="{Binding DataContext.SelectGameplaySubTabCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                            <b:InvokeCommandAction.CommandParameter>
                                <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                    <Binding ElementName="gameplayTabs"/>
                                    <Binding Path="."/>
                                </MultiBinding>
                            </b:InvokeCommandAction.CommandParameter>
                        </b:InvokeCommandAction>
                    </b:EventTrigger>
                </b:Interaction.Triggers>

                <TextBlock x:Name="previewText" Text="{Binding Title}" HorizontalAlignment="Center" FontSize="{StaticResource ScaledDefaultFontSize}"/>
                <ItemsControl ItemsSource="{Binding Additions}" HorizontalAlignment="Center">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel MaxWidth="630"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="ls:VMSpellReference">
                            <Grid>
                                <Image x:Name="slot" Source="{StaticResource SpellSlot}" Stretch="None"/>
                                <Image x:Name="cross" Source="{StaticResource IconLevelUpCross}" Stretch="None"/>
                                <ContentControl ContentTemplate="{StaticResource SpellRefIcon}" Content="{Binding}"/>
                            </Grid>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </StackPanel>
        </ContentControl>
        <DataTemplate.Triggers>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsCantrips}" Value="True"/>
                    <Condition Binding="{Binding Additions.Count}" Value="1"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="previewText" Property="Text" Value="{Binding Source='h6fab4aa1g78cfg4ba0g8780g9cd83024c867', Converter={StaticResource TranslatedStringConverter}}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsCantrips}" Value="True"/>
                    <Condition Binding="{Binding Additions.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="previewText" Property="Text">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="ha189856cg69abg41abg9dc7gecd0cae356b6"/>
                            <Binding Path="Additions.Count"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsCantrips}" Value="False"/>
                    <Condition Binding="{Binding Additions.Count}" Value="1"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="previewText" Property="Text" Value="{Binding Source='h81cb54a5g6cbag4863g8aa6g7f2df64e495c', Converter={StaticResource TranslatedStringConverter}}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsCantrips}" Value="False"/>
                    <Condition Binding="{Binding Additions.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="previewText" Property="Text">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h22529f71gf109g4c76g8846ga2c6b3e1367a"/>
                            <Binding Path="Additions.Count"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding ElementName=previewPanel, Path=IsMouseOver}" Value="True">
                <Setter TargetName="previewText" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="LevelUpPassiveSelectorPreviewTemplate" DataType="ls:VMCharacterCreationPassives">
        <ContentControl Template="{StaticResource NewItemStripTemplate}">
            <StackPanel x:Name="previewPanel" Background="Transparent">

                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseLeftButtonUp">
                        <b:InvokeCommandAction Command="{Binding DataContext.SelectGameplaySubTabCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                            <b:InvokeCommandAction.CommandParameter>
                                <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                    <Binding ElementName="gameplayTabs"/>
                                    <Binding Path="."/>
                                </MultiBinding>
                            </b:InvokeCommandAction.CommandParameter>
                        </b:InvokeCommandAction>
                    </b:EventTrigger>
                </b:Interaction.Triggers>

                <TextBlock x:Name="previewTitle" Text="{Binding Source='hc2370fb0gadbcg4794g9607gbf3552a7ba15', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" FontSize="{StaticResource ScaledDefaultFontSize}"/>
                <TextBlock x:Name="name" Text="{Binding Name}" HorizontalAlignment="Center" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource CCTextLightest}" Margin="0,10,0,0"/>
            </StackPanel>
        </ContentControl>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding MaxSelectedPassiveCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True">
                <Setter TargetName="previewTitle" Property="Text">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h2e7cf7cag5ca9g48ecgb8d0g9359dd139a5a"/>
                            <Binding Path="MaxSelectedPassiveCount"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
                     
            <DataTrigger Binding="{Binding ElementName=previewPanel, Path=IsMouseOver}" Value="True">
                <Setter TargetName="previewTitle" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Old UI design, will be replaced when new design is ready -->

    <ControlTemplate x:Key="SelectableEnhancement" TargetType="ContentControl">
        <Grid>
            <Grid.Resources>
                <Style TargetType="TextBlock">
                    <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
                </Style>
            </Grid.Resources>

            <Grid x:Name="checkBox" HorizontalAlignment="Left" Margin="40,0,0,0">
                <Image x:Name="box" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/checkHolder_skills.png" Stretch="None"/>
                <Image x:Name="check" Stretch="None"/>
            </Grid>
            <TextBlock x:Name="text" Text="{Binding Name}" ToolTipService.Placement="Left" Foreground="{DynamicResource LS_ActivePanelFontColor}" HorizontalAlignment="Left" Margin="100,4,0,0">
                <TextBlock.ToolTip>
                    <ls:LSTooltip Content="{Binding Path=DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                </TextBlock.ToolTip>
            </TextBlock>
            <TextBlock x:Name="source" Visibility="Collapsed" HorizontalAlignment="Right" Foreground="{DynamicResource LS_InactivePanelFontColor}" Margin="0,0,40,0"/>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="text" Property="Foreground" Value="{DynamicResource LS_PrimaryColor}"/>
                <Setter TargetName="box" Property="Source" Value="{StaticResource CheckBoxSelected}"/>
            </Trigger>
            <DataTrigger Binding="{Binding Value}" Value="1.0">
                <Setter TargetName="box" Property="Source" Value="{StaticResource CheckBoxSelected}"/>
                <Setter TargetName="check" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/checkMark_skills_selected.png"/>
                <Setter TargetName="text" Property="Foreground" Value="{DynamicResource LS_PrimaryColor}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Enabled}" Value="False">
                <Setter TargetName="box" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/checkHolder_skills_disabled.png"/>
                <Setter TargetName="check" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/checkMark_skills_selectedBefore.png"/>
                <Setter TargetName="text" Property="Foreground" Value="{DynamicResource LS_InactivePanelFontColor}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Value}" Value="1.0"/>
                    <Condition Binding="{Binding Enabled}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="source" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding SkillSource}" Value="Background">
                <Setter TargetName="source" Property="Text" Value="{Binding Source='hedd9548eg9694g41d4g85a5gcca6ecdfdea8', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SkillSource}" Value="Race">
                <Setter TargetName="source" Property="Text" Value="{Binding Source='h2b695f65g9317g4a75g9ae2g7f45350c3bfc', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SkillSource}" Value="Class">
                <Setter TargetName="source" Property="Text" Value="{Binding Source='h4f84523ag0b42g41f8gafcfgb25f74fd1b74', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SkillSource}" Value="RaceSelector">
                <Setter TargetName="source" Property="Text" Value="{Binding Source='h243c9397g8fbbg4ba5gacd6gc49ca5826bf0', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SkillSource}" Value="ClassSelector">
                <Setter TargetName="source" Property="Text" Value="{Binding Source='h6d9d386dgb1f5g423fg94cfg7776d102b906', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="PassiveSelectorItemTemplate">
        <StackPanel Margin="0,32,0,0">
            <TextBlock x:Name="SelectionTitle" Style="{StaticResource PanelHeaderText}" FontSize="{StaticResource ScaledDefaultFontSize}" MaxWidth="700" TextWrapping="Wrap" TextAlignment="Center">
                <Run Text="{Binding Name}"/>
                <Run Text="{Binding SelectedPassiveCount, StringFormat=' ({0}'}"/>
                <Run Text="{Binding MaxSelectedPassiveCount, StringFormat='/{0})'}"/>
            </TextBlock>
            <TextBlock x:Name="description" ls:TextBlockFormatter.SourceText="{Binding Description.Text}" Style="{StaticResource PanelDescriptionText}" Margin="0,50,0,0"/>

            <!-- MOD START - Restrict passive list max height -->
			<ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" Height="1000" VerticalScrollBarVisibility="Auto">
				<ItemsControl ItemsSource="{Binding Passives}" HorizontalAlignment="Center" Margin="-32,32,0,0">
					<ItemsControl.ItemTemplate>
						<DataTemplate DataType="{x:Type ls:VMCharacterCreationPassive}">
							<ContentControl Template="{StaticResource SelectableEnhancement}">
								<b:Interaction.Triggers>
									<b:EventTrigger EventName="MouseLeftButtonUp">
										<b:InvokeCommandAction Command="{Binding DataContext.TogglePassive,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
										<ls:LSPlaySound Sound="UI_HUD_CC_ClassSubOption"/>
									</b:EventTrigger>
								</b:Interaction.Triggers>
							</ContentControl>
						</DataTemplate>
					</ItemsControl.ItemTemplate>
				</ItemsControl>
			</ls:LSScrollViewer>
			<!-- MOD END -->

        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Description.Text, Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="True">
                <Setter TargetName="description" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <DataTrigger Binding="{Binding IsComplete}" Value="False">
                <Setter TargetName="SelectionTitle" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Old UI design, will be replaced when new design is ready -->
    <DataTemplate x:Key="EquipmentSelectorItemTemplate">
        <StackPanel>
            <TextBlock Style="{StaticResource PanelHeaderText}">
                            <Run Text="{Binding Name}"/>
                            <Run Text="{Binding SelectedEquipmentCount, StringFormat=' ({0}'}"/>
                            <Run Text="{Binding MaxSelectedEquipmentCount, StringFormat='/{0})'}"/>
            </TextBlock>
            <TextBlock x:Name="description" ls:TextBlockFormatter.SourceText="{Binding Description.Text}" Style="{StaticResource PanelDescriptionText}" Margin="0,50,0,0"/>
            <ItemsControl ItemsSource="{Binding Equipments}" HorizontalAlignment="Center" Margin="0,50,0,0">
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="{x:Type ls:VMCharacterCreationEquipment}">
                        <ContentControl Template="{StaticResource SelectableEnhancement}">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="MouseLeftButtonUp">
                                    <b:InvokeCommandAction Command="{Binding DataContext.ToggleEquipment,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                                    <ls:LSPlaySound Sound="UI_HUD_CC_ClassSubOption"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ContentControl>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Description.Text, Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="True">
                <Setter TargetName="description" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="ColourButtonTemplate" TargetType="{x:Type ls:LSToggleButton}">
        <Grid HorizontalAlignment="Center">
            <Ellipse Fill="{Binding Colour}" HorizontalAlignment="Left" VerticalAlignment="Center" Width="60" Height="60" Margin="14,0,0,0"/>
            <Image x:Name="bg" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnSwatchPopout_d.png" Stretch="None"/>
            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Name}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnSwatchPopout_h.png" TargetName="bg"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnSwatchPopout_p.png" TargetName="bg"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ToggleConfirmButtonTemplate" TargetType="{x:Type ls:LSToggleButton}">
        <Grid Background="Transparent">
            <Image x:Name="bg" Source="{StaticResource BtnNormal}" Stretch="None"/>
            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h5ec59419gbcbag4572gbf24g259ad7f261f2', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{StaticResource BtnNormal_h}" TargetName="bg"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="{StaticResource BtnNormal_p}" TargetName="bg"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="CarouselButtonTemplate" TargetType="ls:LSButton">
        <Grid Width="160" Height="80" Background="Transparent">
            <Image x:Name="arrow" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/input_arrow_d.png" Stretch="None"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/input_arrow_h.png" TargetName="arrow"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="arrow" Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="CarouselTextStyle" TargetType="TextBlock">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledIntermediateFontSize}"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource CCTextPrimary}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource LS_alertTxtColor}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CCCarouselStyle" TargetType="ListBox">
        <Setter Property="ItemsSource" Value="{Binding ComboItems}"/>
        <Setter Property="SelectedItem" Value="{Binding SelectedItem, Mode=OneWay}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid HorizontalAlignment="Center">
                        <Image x:Name="box" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/dropdownBox_d.png" Stretch="None"/>
                        <ls:LSButton Template="{StaticResource CarouselButtonTemplate}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="-40,0,0,0"
                                        Command="{Binding DataContext.PrevComboItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        CommandParameter="{Binding}" SoundID="{DynamicResource CarouselButtonSoundEvent}"/>
                        <ls:LSButton Template="{StaticResource CarouselButtonTemplate}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,-40,0"
                                        Command="{Binding DataContext.NextComboItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        CommandParameter="{Binding}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                            <ls:LSButton.RenderTransform>
                                <ScaleTransform ScaleX="-1" CenterX="80"/>
                            </ls:LSButton.RenderTransform>
                        </ls:LSButton>

                        <TextBlock x:Name="cTxt" Text="{Binding Source='h033a526fg0fe7g4164g8431g177be16d148a', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource CarouselTextStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/dropdownBox_h.png" TargetName="box"/>
                        </Trigger>


                        <DataTrigger Binding="{Binding HasSelectedItem}" Value="True">
                            <Setter TargetName="cTxt" Property="Text" Value="{Binding SelectedItem.Name}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ComboItems.Count}" Value="0">
                            <Setter TargetName="cTxt" Property="Text" Value="{Binding Source='h3c369cdfgc705g45d0gba16g3dc054b28fcb', Converter={StaticResource TranslatedStringConverter}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ComboItems.Count}" Value="0">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ComboItems.Count}" Value="1">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ComboItems.Count}" Value="1"/>
                                <Condition Binding="{Binding HasSelectedItem}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="SelectableCarouselTemplate" TargetType="ListBox">
        <Grid HorizontalAlignment="Center">
            <Image x:Name="box" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/dropdownBox_d.png" Stretch="None"/>

            <ls:LSButton Template="{StaticResource CarouselButtonTemplate}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="-40,0,0,0" Command="{Binding DataContext.PrevItemLooped, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" SoundID="{StaticResource CarouselButtonSoundEvent}"/>

            <ls:LSButton Template="{StaticResource CarouselButtonTemplate}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,-40,0" Command="{Binding DataContext.NextItemLooped, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" SoundID="{StaticResource CarouselButtonSoundEvent}">
                <ls:LSButton.RenderTransform>
                    <ScaleTransform ScaleX="-1" CenterX="80"/>
                </ls:LSButton.RenderTransform>
            </ls:LSButton>

            <TextBlock x:Name="cTxt" Text="{Binding SelectedItem.Name, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Style="{StaticResource CarouselTextStyle}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/dropdownBox_h.png" TargetName="box"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="BodyTypeTemplate">
        <ControlTemplate.Resources>
            <ControlTemplate x:Key="ChoiceButtonTemplate" TargetType="RadioButton">
                <Grid x:Name="base">
                    <Image x:Name="bg" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnTinySquare_d_unselected.png" Stretch="None"/>
                    <TextBlock ls:TextBlockFormatter.SourceText="{TemplateBinding Tag}" FontSize="{StaticResource ScaledMiniFontSize}" Foreground="{StaticResource LS_baseTxtColor}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Image x:Name="pointer" Visibility="Collapsed" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/selection_pointer.png" Stretch="None" VerticalAlignment="Top" Margin="0,-10,0,0"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnTinySquare_d.png"/>
                        <Setter TargetName="pointer" Property="Visibility" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnTinySquare_h.png"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnTinySquare_p.png"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="base" Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </ControlTemplate.Resources>
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Top">

            <ls:LSButton x:Name="nextBodyType" Template="{StaticResource FramedIconWithTextButtonTemplate}" Content="{Binding Source='hc4f5c05bgc2feg4333ga08fg229b33c42437', Converter={StaticResource TranslatedStringConverter}}" Tag="TextOnRight" Command="{Binding SelectNextBodyType}" Margin="0,0,60,0">
                <ls:LSButton.Resources>
                    <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_bodyType_d.png"/>
                    <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_bodyType_h.png"/>
                    <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_bodyType_d.png"/>
                    <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_bodyType_d.png"/>
                </ls:LSButton.Resources>
            </ls:LSButton>

            <ls:LSRadioButton x:Name="femaleBtn" Template="{StaticResource ChoiceButtonTemplate}" Command="{Binding SetBodyTypeAndShape}" CommandParameter="Female" Tag="1"/>
            <ls:LSRadioButton x:Name="maleBtn" Template="{StaticResource ChoiceButtonTemplate}" Command="{Binding SetBodyTypeAndShape}" CommandParameter="Male" Tag="2"/>
            <ls:LSRadioButton x:Name="femaleStrongBtn" Template="{StaticResource ChoiceButtonTemplate}" Command="{Binding SetBodyTypeAndShape}" CommandParameter="FemaleStrong" Tag="3" Visibility="{Binding SelectedRace.HasAdditionalBodyShapes, Converter={StaticResource BoolToVisibleConverter}}"/>
            <ls:LSRadioButton x:Name="maleStrongBtn" Template="{StaticResource ChoiceButtonTemplate}" Command="{Binding SetBodyTypeAndShape}" CommandParameter="MaleStrong" Tag="4" Visibility="{Binding SelectedRace.HasAdditionalBodyShapes, Converter={StaticResource BoolToVisibleConverter}}"/>

        </StackPanel>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding SelectedOrigin.IsLockedBody}" Value="True">
                <Setter TargetName="femaleBtn" Property="IsEnabled" Value="False"/>
                <Setter TargetName="maleBtn" Property="IsEnabled" Value="False"/>
                <Setter TargetName="femaleStrongBtn" Property="IsEnabled" Value="False"/>
                <Setter TargetName="maleStrongBtn" Property="IsEnabled" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BodyTypeAndShape}" Value="Female">
                <Setter TargetName="femaleBtn" Property="IsChecked" Value="True"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BodyTypeAndShape}" Value="Male">
                <Setter TargetName="maleBtn" Property="IsChecked" Value="True"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BodyTypeAndShape}" Value="FemaleStrong">
                <Setter TargetName="femaleStrongBtn" Property="IsChecked" Value="True"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BodyTypeAndShape}" Value="MaleStrong">
                <Setter TargetName="maleStrongBtn" Property="IsChecked" Value="True"/>
            </DataTrigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <ControlTemplate x:Key="randomAppearanceNewButton">
        <ls:LSButton x:Name="randomNew" Template="{StaticResource FramedIconWithTextButtonTemplate}" 
                     Content="{Binding Source='hd4361310gda51g4eaegb195gf3ce49c2c210', Converter={StaticResource TranslatedStringConverter}}" Tag="TextOnRight" 
                     Command="{Binding RandomAppearance}"
                     CommandParameter="new" 
                     IsEnabled="{Binding HasNewRandomAppearance}"
                     IsHitTestVisible="{Binding HasNewRandomAppearance}"
                     HorizontalAlignment="Center">
            <ls:LSButton.ToolTip>
                <ls:LSTooltip>
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h76a197beg03d4g45ceg9d8egb7bfef17a3e9', Converter={StaticResource TranslatedStringConverter}}" TextWrapping="Wrap"/>
                </ls:LSTooltip>
            </ls:LSButton.ToolTip>
            <ls:LSButton.Resources>
                <BitmapImage x:Key="FrameNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnTiny_d.png"/>
                <BitmapImage x:Key="FrameHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnTiny_h.png"/>
                <BitmapImage x:Key="FramePressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnTiny_p.png"/>
                <BitmapImage x:Key="FrameDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnTiny_disabled.png"/>
                <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_randomize_d.png"/>
                <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_randomize_h.png"/>
                <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_randomize_d.png"/>
                <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_randomize_d.png"/>
            </ls:LSButton.Resources>
        </ls:LSButton>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding CharacterCreationStep}" Value="Appearance">
                <Setter TargetName="randomNew" Property="Command" Value="{Binding RandomAppearance}"/>
                <Setter TargetName="randomNew" Property="IsEnabled" Value="{Binding HasNewRandomAppearance}"/>
                <Setter TargetName="randomNew" Property="IsHitTestVisible" Value="{Binding HasNewRandomAppearance}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CharacterCreationStep}" Value="Companion">
                <Setter TargetName="randomNew" Property="Command" Value="{Binding RandomCharacter}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AppearanceButtonsTemplateRandomOnly"
                     d:DataContext="{d:DesignInstance {x:Type ls:DCCharacterCreation}, IsDesignTimeCreatable=True}">
        <Grid HorizontalAlignment="Center">

            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/appearancePane.png" Stretch="None"/>

            <StackPanel VerticalAlignment="Center">

                <Control Template="{StaticResource randomAppearanceNewButton}"  Tag="{TemplateBinding Tag}" HorizontalAlignment="Left" Margin="60, 0, 0, 0"/>
                <Grid HorizontalAlignment="Center" Margin="0, 20, 0, 0">
                    <Image x:Name="randomCarousel" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/dropdownBox_d.png" Stretch="None"/>

                    <ls:LSButton x:Name="randomCarouselPrev" Template="{StaticResource CarouselButtonTemplate}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="-40,0,0,0" SoundID="{StaticResource CarouselButtonSoundEvent}" Command="{Binding RandomAppearance}" CommandParameter="prev"/>

                    <ls:LSButton  x:Name="randomCarouselNext" Template="{StaticResource CarouselButtonTemplate}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,-40,0" SoundID="{StaticResource CarouselButtonSoundEvent}" Command="{Binding RandomAppearance}" CommandParameter="next">
                        <ls:LSButton.RenderTransform>
                            <ScaleTransform ScaleX="-1" CenterX="80"/>
                        </ls:LSButton.RenderTransform>
                    </ls:LSButton>

                    <TextBlock x:Name="randomCarouselText" Style="{StaticResource CarouselTextStyle}">
                        <TextBlock.Text>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="he079ac1bgbb1cg42dcg8160g2652b2a7ec0d"/>
                                <Binding Path="RandomAppearanceIndex" Converter="{StaticResource AddConverter}" ConverterParameter="1"/>
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </Grid>
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Tag" Value="appearancePage">
                <Setter TargetName="randomCarouselPrev" Property="IsEnabled" Value="{Binding HasPreviousAppearance}"/>
                <Setter TargetName="randomCarouselNext" Property="IsEnabled" Value="{Binding HasNextAppearance}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/dropdownBox_h.png" TargetName="randomCarousel"/>
            </Trigger>
            <DataTrigger Binding="{Binding RandomAppearanceCount}" Value="0">
                <Setter TargetName="randomCarouselText" Property="Text" Value="{Binding Source='hb3046cd8g05b3g4e6ag9396gd17b80fa6737', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AppearanceButtonsTemplate"
                     d:DataContext="{d:DesignInstance {x:Type ls:DCCharacterCreation}, IsDesignTimeCreatable=True}">
        <Grid x:Name="AppearanceButtonsPanel_internal" Visibility="{Binding HasNewRandomAppearance, Converter={StaticResource BoolToVisibleConverter}}" >

            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/appearancePane.png" Stretch="None"/>

            <StackPanel VerticalAlignment="Center">

                <Control x:Name="bodyTypeSelector" Template="{StaticResource BodyTypeTemplate}"/>

                <!-- Appearance Randomisation -->
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,30,0,0">

                    <Control Template="{StaticResource randomAppearanceNewButton}"/>
                    <ls:LSButton x:Name="randomPrev" Template="{StaticResource FramedIconWithTextButtonTemplate}" 
                                 Command="{Binding RandomAppearance}"
                                 CommandParameter="prev"
                                 IsEnabled="{Binding HasPreviousAppearance}">
                        <ls:LSButton.ToolTip>
                            <ls:LSTooltip>
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h0c67ab03g4cd6g451fgadb1g7aa82240879c', Converter={StaticResource TranslatedStringConverter}}" TextWrapping="Wrap"/>
                            </ls:LSTooltip>
                        </ls:LSButton.ToolTip>
                        <ls:LSButton.Resources>
                            <BitmapImage x:Key="FrameNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                            <BitmapImage x:Key="FrameHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_h.png"/>
                            <BitmapImage x:Key="FramePressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                            <BitmapImage x:Key="FrameDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                            <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_prevNext_d.png"/>
                            <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_prevNext_h.png"/>
                            <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_prevNext_d.png"/>
                            <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_prevNext_d.png"/>
                            <System:Single x:Key="XScale">-1</System:Single>
                            <System:Single x:Key="XCenter">14</System:Single>
                        </ls:LSButton.Resources>
                    </ls:LSButton>

                    <ls:LSButton x:Name="randomNext" Template="{StaticResource FramedIconWithTextButtonTemplate}" 
                                 Command="{Binding RandomAppearance}"
                                 CommandParameter="next" 
                                 IsEnabled="{Binding HasNextAppearance}"
                                 Margin="-10,0,0,0">
                        <ls:LSButton.ToolTip>
                            <ls:LSTooltip>
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hccb12664gd8efg48a6g878ege32eba1cd6ab', Converter={StaticResource TranslatedStringConverter}}" TextWrapping="Wrap"/>
                            </ls:LSTooltip>
                        </ls:LSButton.ToolTip>
                        <ls:LSButton.Resources>
                            <BitmapImage x:Key="FrameNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                            <BitmapImage x:Key="FrameHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_h.png"/>
                            <BitmapImage x:Key="FramePressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                            <BitmapImage x:Key="FrameDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                            <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_prevNext_d.png"/>
                            <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_prevNext_h.png"/>
                            <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_prevNext_d.png"/>
                            <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_prevNext_d.png"/>
                        </ls:LSButton.Resources>
                    </ls:LSButton>

                </StackPanel>

            </StackPanel>

        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding CharacterCreationStep}" Value="Companion">
                <Setter TargetName="randomPrev" Property="Command" Value="{Binding RandomCharacter}"/>
                <Setter TargetName="randomNext" Property="Command" Value="{Binding RandomCharacter}"/>
                <Setter TargetName="randomPrev" Property="IsEnabled" Value="{Binding HasPreviousCharacter}"/>
                <Setter TargetName="randomNext" Property="IsEnabled" Value="{Binding HasNextCharacter}"/>
                <Setter TargetName="AppearanceButtonsPanel_internal" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="cameraModeControlsTemplate">
        <StackPanel Orientation="Horizontal">
            <StackPanel.Resources>
                <BitmapImage x:Key="FrameNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                <BitmapImage x:Key="FrameHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_h.png"/>
                <BitmapImage x:Key="FramePressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                <BitmapImage x:Key="FrameDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
            </StackPanel.Resources>
            <ls:LSButton Template="{StaticResource FrameWithIconButtonTemplate}" Command="{Binding NextCameraMode}" IsEnabled="{Binding CanSetNextCameraMode}">
                <ls:LSButton.Resources>
                    <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_zoomIn_d.png"/>
                    <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_zoomIn_h.png"/>
                    <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_zoomIn_d.png"/>
                    <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_zoomIn_d.png"/>
                </ls:LSButton.Resources>
            </ls:LSButton>
            <ls:LSButton Template="{StaticResource FrameWithIconButtonTemplate}" Command="{Binding PrevCameraMode}" IsEnabled="{Binding CanSetPrevCameraMode}">
                <ls:LSButton.Resources>
                    <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_zoomOut_d.png"/>
                    <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_zoomOut_h.png"/>
                    <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_zoomOut_d.png"/>
                    <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_zoomOut_d.png"/>
                </ls:LSButton.Resources>
            </ls:LSButton>
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="rotateDummyControlsTemplate">
        <StackPanel Orientation="Horizontal">
            <StackPanel.Resources>
                <BitmapImage x:Key="FrameNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                <BitmapImage x:Key="FrameHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_h.png"/>
                <BitmapImage x:Key="FramePressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                <BitmapImage x:Key="FrameDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
            </StackPanel.Resources>
            <ls:LSButton Template="{StaticResource FrameWithIconButtonTemplate}" Command="{Binding RotateDummy}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="LSButtonPressed">
                        <b:InvokeCommandAction Command="{Binding RotateDummy}" CommandParameter="{StaticResource rightRotationRate}"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="LSButtonReleased">
                        <b:InvokeCommandAction Command="{Binding RotateDummy}" CommandParameter="{StaticResource stopRotationRate}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                <ls:LSButton.Resources>
                    <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_rotate_d.png"/>
                    <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_rotate_h.png"/>
                    <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_rotate_d.png"/>
                    <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_rotate_d.png"/>
                </ls:LSButton.Resources>
            </ls:LSButton>
            <ls:LSButton Template="{StaticResource FrameWithIconButtonTemplate}" Command="{Binding RotateDummy}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="LSButtonPressed">
                        <b:InvokeCommandAction Command="{Binding RotateDummy}" CommandParameter="{StaticResource leftRotationRate}"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="LSButtonReleased">
                        <b:InvokeCommandAction Command="{Binding RotateDummy}" CommandParameter="{StaticResource stopRotationRate}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                <ls:LSButton.Resources>
                    <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_rotate_d.png"/>
                    <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_rotate_h.png"/>
                    <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_rotate_d.png"/>
                    <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_rotate_d.png"/>
                </ls:LSButton.Resources>
                <ls:LSButton.RenderTransform>
                    <ScaleTransform ScaleX="-1" CenterX="36"/>
                </ls:LSButton.RenderTransform>
            </ls:LSButton>
        </StackPanel>
    </ControlTemplate>

    <Style x:Key="CCNextButtonStyle" TargetType="ls:LSButton" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
        <Setter Property="ls:ButtonHelper.ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnNext_d.png"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ls:ButtonHelper.ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnNext_h.png" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="ls:ButtonHelper.ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnNext_p.png"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="ls:ButtonHelper.ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnNext_disabled.png" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="centralBottomControlsTemplate">
        <ControlTemplate.Resources>

            <Storyboard x:Key="CamControlsGameplay">
                <DoubleAnimation Storyboard.TargetName="Left" Storyboard.TargetProperty="Width" To="700" Duration="0:0:0.6" DecelerationRatio="0.5"/>
                <DoubleAnimation Storyboard.TargetName="Right" Storyboard.TargetProperty="Width" To="700" Duration="0:0:0.6" DecelerationRatio="0.5"/>
            </Storyboard>

            <Storyboard x:Key="CamControlsAppearance">
                <DoubleAnimation Storyboard.TargetName="Left" Storyboard.TargetProperty="Width" To="1200" Duration="0:0:0.6" DecelerationRatio="0.5"/>
                <DoubleAnimation Storyboard.TargetName="Right" Storyboard.TargetProperty="Width" To="1200" Duration="0:0:0.6" DecelerationRatio="0.5"/>
            </Storyboard>
            
            <Storyboard x:Key="CamControlsSummary">
                <DoubleAnimation Storyboard.TargetName="Left" Storyboard.TargetProperty="Width" To="900" Duration="0:0:0.6" DecelerationRatio="0.5"/>
                <DoubleAnimation Storyboard.TargetName="Right" Storyboard.TargetProperty="Width" To="900" Duration="0:0:0.6" DecelerationRatio="0.5"/>
            </Storyboard>

        </ControlTemplate.Resources>

        <Grid Margin="0,0,0,84">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <StackPanel Grid.Column="2" Panel.ZIndex="-1">
                <StackPanel.Resources>
                    <BitmapImage x:Key="ButtonNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnAppearance_d.png"/>
                    <BitmapImage x:Key="ButtonHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnAppearance_h.png"/>
                    <BitmapImage x:Key="ButtonPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnAppearance_p.png"/>
                    <BitmapImage x:Key="ButtonDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnAppearance_disabled.png"/>
                    <BitmapImage x:Key="ButtonAppearanceBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnAppearance_bg.png"/>

                    <System:Double x:Key="ButtonWidth">440</System:Double>

                    <Style x:Key="ButtonsFrame" TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
                        <Setter Property="ImageSource" Value="{StaticResource ButtonAppearanceBg}"/>
                        <Setter Property="Slices" Value="96,0"/>
                        <Setter Property="IconWidth" Value="340"/>
                        <Setter Property="Margin" Value="-38,-34"/>
                        <Setter Property="Padding" Value="64,64"/>
                        <Setter Property="Visibility" Value="Collapsed"/>
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                    </Style>

                </StackPanel.Resources>

                <ls:LSNineSliceImage x:Name="InvalidAppearanceError" Visibility="Hidden" Style="{StaticResource MissingRequirementsErrorStyle}" Margin="0,8">
                    <TextBlock Foreground="{StaticResource CCTabToDo}" Text="{Binding AppearanceValidationError}" VerticalAlignment="Center" />
                </ls:LSNineSliceImage>

                <ls:LSNineSliceImage x:Name="MissingRequirementsError" Visibility="Hidden" Style="{StaticResource MissingRequirementsErrorStyle}" ContentTemplate="{StaticResource MissingRequirementsErrorTemplate}" Margin="0,8"/>

                <ls:LSNineSliceImage x:Name="gameplayPageButtons" Style="{StaticResource ButtonsFrame}">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        
                        <!-- To Appearance -->
						<!-- MOD START - Edit appearance for Origin characters -->
                        <ls:LSButton x:Name="EditAppearanceButton" Style="{StaticResource BigBrownButtonStyle}" 
                                     Content="{Binding Source='h072b13e4g302ag4575g85e8g5c0c26a5d45e', Converter={StaticResource TranslatedStringConverter}}" 
                                     IsEnabled="{Binding Enabled}"
                                     Width="{StaticResource ButtonWidth}">
                            <!-- MOD END -->
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click" >
                                    <b:ChangePropertyAction TargetName="flowPage" PropertyName="SelectedIndex" Value="1" />
                                    <b:InvokeCommandAction Command="{Binding SetCameraMode}" CommandParameter="CloseupB"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>

                        <!-- To Naming -->
                        <ls:LSButton x:Name="GameplayProceedButton" Style="{StaticResource BigBlueButtonStyle}" 
                                     Content="{Binding Source='hbd442b28g8fc5g4d34g9127g9ec0e917b9e7', Converter={StaticResource TranslatedStringConverter}}" 
                                     IsEnabled="{Binding IsCharacterCompleteExceptName}"
                                     Width="{StaticResource ButtonWidth}"
                                     SoundID="UI_HUD_CC_Proceed">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click" >
                                    <b:ChangePropertyAction TargetName="flowPage" PropertyName="SelectedIndex" Value="3" />
                                    <b:InvokeCommandAction Command="{Binding SetCameraMode}" CommandParameter="Overview"/>
                                    <ls:LSPlaySound Sound="UI_HUD_CC_Proceed_ToName_Click"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>

                        <!-- To Companion -->
                        <ls:LSButton x:Name="GameplayToCompanionButton" Style="{StaticResource BigBlueButtonStyle}" 
                                     Content="{Binding Source='hbd442b28g8fc5g4d34g9127g9ec0e917b9e7', Converter={StaticResource TranslatedStringConverter}}" 
                                     IsEnabled="{Binding IsCharacterComplete}" 
                                     Visibility="Collapsed"
                                     Width="{StaticResource ButtonWidth}"
                                     SoundID="UI_HUD_CC_Proceed">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click" >
                                    <b:ChangePropertyAction TargetName="flowPage" PropertyName="SelectedIndex" Value="2" />
                                    <ls:LSPlaySound Sound="UI_HUD_CC_Proceed_ToCompanion_Click"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>
                    </StackPanel>
                </ls:LSNineSliceImage>

                <ls:LSNineSliceImage x:Name="appearancePageButtons" Style="{StaticResource ButtonsFrame}">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        
                        <!-- To Gameplay -->
                        <ls:LSButton Style="{StaticResource BigBrownButtonStyle}"
                                     Content="{Binding Source='h742dfaf1g3998g4f97gb4b8g2c0f0801adb0', Converter={StaticResource TranslatedStringConverter}}"
                                     Width="{StaticResource ButtonWidth}">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click" >
                                    <b:ChangePropertyAction TargetName="flowPage" PropertyName="SelectedIndex" Value="0" />
                                    <b:InvokeCommandAction Command="{Binding SetCameraMode}" CommandParameter="Overview"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>

                        <!-- To Naming -->
                        <ls:LSButton Style="{StaticResource BigBlueButtonStyle}" 
                                     Content="{Binding Source='hbd442b28g8fc5g4d34g9127g9ec0e917b9e7', Converter={StaticResource TranslatedStringConverter}}" 
                                     IsEnabled="{Binding IsCharacterCompleteExceptName}"
                                     Width="{StaticResource ButtonWidth}"
                                     SoundID="UI_HUD_CC_Proceed">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click" >
                                    <b:ChangePropertyAction TargetName="flowPage" PropertyName="SelectedIndex" Value="3" />
                                    <b:InvokeCommandAction Command="{Binding SetCameraMode}" CommandParameter="Overview"/>
                                    <ls:LSPlaySound Sound="UI_HUD_CC_Proceed_ToName_Click"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>
                    </StackPanel>
                </ls:LSNineSliceImage>

                <ls:LSNineSliceImage x:Name="namingPageButtons" Style="{StaticResource ButtonsFrame}">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        
                        <!-- To Gameplay -->
                        <ls:LSButton Style="{StaticResource BigBrownButtonStyle}"
                                     Content="{Binding Source='h77fec760g866dg4e47g8e81g467c9c05e447', Converter={StaticResource TranslatedStringConverter}}" 
                                     Width="{StaticResource ButtonWidth}">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click" >
                                    <b:ChangePropertyAction TargetName="flowPage" PropertyName="SelectedIndex" Value="0" />
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>

                        <!-- To Companion -->
                        <ls:LSButton Style="{StaticResource BigBlueButtonStyle}" 
                                     Content="{Binding Source='hbd442b28g8fc5g4d34g9127g9ec0e917b9e7', Converter={StaticResource TranslatedStringConverter}}" 
                                     IsEnabled="{Binding IsCharacterComplete}" 
                                     Width="{StaticResource ButtonWidth}"
                                     SoundID="UI_HUD_CC_Proceed">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click" >
                                    <b:ChangePropertyAction TargetName="flowPage" PropertyName="SelectedIndex" Value="2" />
                                    <ls:LSPlaySound Sound="UI_HUD_CC_Proceed_ToCompanion_Click"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>
                    </StackPanel>
                </ls:LSNineSliceImage>

                <ls:LSNineSliceImage x:Name="companionPageButtons" Style="{StaticResource ButtonsFrame}">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        
                        <!-- To Gameplay -->
                        <ls:LSButton Style="{StaticResource BigBrownButtonStyle}"
                                     Content="{Binding Source='h77fec760g866dg4e47g8e81g467c9c05e447', Converter={StaticResource TranslatedStringConverter}}" 
                                     Width="{StaticResource ButtonWidth}">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click" >
                                    <b:ChangePropertyAction TargetName="flowPage" PropertyName="SelectedIndex" Value="0" />
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>

                        <!-- Venture Forth -->
                        <ls:LSButton Style="{StaticResource BigBlueButtonStyle}" 
                                     Content="{Binding Source='h06b74424gf3bdg4b6cgbe63g84b32198e162', Converter={StaticResource TranslatedStringConverter}}" 
                                     IsEnabled="{Binding IsCharacterComplete}" Command="{Binding FinishCreating}" 
                                     Width="{StaticResource ButtonWidth}"
                                     SoundID="UI_HUD_CC_Proceed">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click" >
                                    <ls:LSPlaySound Sound="UI_HUD_CC_VentureForth_Click"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>
                    </StackPanel>
                </ls:LSNineSliceImage>

                <ls:LSNineSliceImage x:Name="readyPageButtons" Style="{StaticResource ButtonsFrame}">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">

                        <!-- To Gameplay -->
                        <ls:LSButton Style="{StaticResource BigBrownButtonStyle}"
                                     Content="{Binding Source='h77fec760g866dg4e47g8e81g467c9c05e447', Converter={StaticResource TranslatedStringConverter}}" 
                                     Width="{StaticResource ButtonWidth}">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click" >
                                    <b:InvokeCommandAction Command="{Binding CancelReady}" CommandParameter="Origin"/>
                                    <b:ChangePropertyAction TargetName="readyInfoPage" PropertyName="Visibility" Value="Collapsed" />
                                    <!-- Needed to show gameplay page again -->
                                    <b:ChangePropertyAction TargetName="flowPage" PropertyName="SelectedIndex" Value="0" />
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>

                    </StackPanel>
                </ls:LSNineSliceImage>
            </StackPanel>

            <StackPanel Grid.Column="3" Margin="40,28" VerticalAlignment="Bottom" HorizontalAlignment="Right">
                <Control Template="{StaticResource cameraModeControlsTemplate}"/>
                <Control Template="{StaticResource rotateDummyControlsTemplate}" Margin="0,8,0,0"/>
            </StackPanel>

            <!-- These are used to animate the character control button stack to clear various UI elements -->
            <Rectangle Grid.Column="0" x:Name="Left" Width="700" Height="1" Fill="Transparent"/>
            <Rectangle Grid.Column="4" x:Name="Right" Width="700" Height="1" Fill="Transparent"/>
        </Grid>

        <ControlTemplate.Triggers>

            <!-- Set which buttons to show (and the correct width for camera controls buttons) -->
            <DataTrigger Binding="{Binding ElementName=flowPage, Path=SelectedIndex}" Value="0">
                <Setter TargetName="gameplayPageButtons" Property="Visibility" Value="Visible"/>
                <DataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CamControlsGameplay}"/>
                </DataTrigger.EnterActions>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=flowPage, Path=SelectedIndex}" Value="1">
                <Setter TargetName="appearancePageButtons" Property="Visibility" Value="Visible"/>
                <DataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CamControlsAppearance}"/>
                </DataTrigger.EnterActions>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=flowPage, Path=SelectedIndex}" Value="2">
                <Setter TargetName="companionPageButtons" Property="Visibility" Value="Visible"/>
                <DataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CamControlsAppearance}"/>
                </DataTrigger.EnterActions>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=flowPage, Path=SelectedIndex}" Value="3">
                <Setter TargetName="namingPageButtons" Property="Visibility" Value="Visible"/>
                <DataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CamControlsSummary}"/>
                </DataTrigger.EnterActions>
            </DataTrigger> 
            <DataTrigger Binding="{Binding ElementName=flowPage, Path=SelectedIndex}" Value="4">
                <Setter TargetName="readyPageButtons" Property="Visibility" Value="Visible"/>
                <DataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CamControlsSummary}"/>
                </DataTrigger.EnterActions>
            </DataTrigger>

            <!-- Error Messaging -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=gameplayPageButtons, Path=Visibility}" Value="Visible"/>
                    <Condition Binding="{Binding IsCharacterCompleteExceptName}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MissingRequirementsError" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=appearancePageButtons, Path=Visibility}" Value="Visible"/>
                    <Condition Binding="{Binding IsCharacterCompleteExceptName}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MissingRequirementsError" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=gameplayPageButtons, Path=Visibility}" Value="Visible"/>
                    <Condition Binding="{Binding AppearanceValidationError, Converter={StaticResource NullToBoolFalseConverter}, ConverterParameter='EmptyString', FallbackValue=False}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="InvalidAppearanceError" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=appearancePageButtons, Path=Visibility}" Value="Visible"/>
                    <Condition Binding="{Binding AppearanceValidationError, Converter={StaticResource NullToBoolFalseConverter}, ConverterParameter='EmptyString', FallbackValue=False}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="InvalidAppearanceError" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <!-- Button Visibility -->
            <DataTrigger Binding="{Binding SelectedOrigin.IsLockedAppearance}" Value="True">
                <!-- MOD START - Edit appearance for Origin characters -->
				<!-- <Setter TargetName="EditAppearanceButton" Property="Visibility" Value="Collapsed"/>  -->
				<!-- MOD END -->
                <Setter TargetName="GameplayProceedButton" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="GameplayToCompanionButton" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="summaryPanelTemplate">
        <Grid x:Name="summary">

            <b:Interaction.Triggers>

                <b:DataTrigger Binding="{Binding ElementName=flowPage, Path=SelectedItem.Content}" Value="Naming">
                    <b:ChangePropertyAction TargetName="summaryToggle" PropertyName="Visibility" Value="Collapsed"/>
                </b:DataTrigger>

            </b:Interaction.Triggers>
            <Grid x:Name="summaryCollapsed" Visibility="{Binding Path=IsChecked, ElementName=summaryToggle, Converter={StaticResource BoolToCollapsedConverter}}" VerticalAlignment="Top" Margin="0,-2,0,0">
                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/summaryPane_collapsed.png" Stretch="None"/>
                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h7d444943g0ae5g4beagbfcag7e07b4e7f154', Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource CCTextLight}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
            </Grid>
            <Grid Visibility="{Binding Visibility, ElementName=summaryCollapsed, Converter={StaticResource InvertVisibilityConverter}}">
                <ls:LSNineSliceImage x:Name="RightPanel" Padding="0,20,0,40" Slices="64,300,64,100" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/summaryPane.png" MinHeight="832" MinWidth="692">

                    <Control Template="{StaticResource summaryPanelContents}"/>

                </ls:LSNineSliceImage>

                <ContentPresenter x:Name="CharacterPassives" Content="{Binding DummyCharacter}" ContentTemplate="{StaticResource CharacterPassivesTemplate}" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="-80,80,80,0" Visibility="Collapsed"/>
            </Grid>

            <ls:LSToggleButton x:Name="summaryToggle" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,26,24,0" IsChecked="True" ToolTipService.Placement="Left" SoundID="UI_HUD_CC_CharacterSummaryToggle">
                <ls:LSToggleButton.ToolTip>
                    <ls:LSTooltip>
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h5cbb6a5fg746cg48ccg81d5ge5e085343243, Converter={StaticResource TranslatedStringConverter}}" TextWrapping="Wrap"/>
                    </ls:LSTooltip>
                </ls:LSToggleButton.ToolTip>
                <ls:LSToggleButton.Resources>
                    <BitmapImage x:Key="FrameNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                    <BitmapImage x:Key="FrameHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_h.png"/>
                    <BitmapImage x:Key="FramePressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                    <BitmapImage x:Key="FrameDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                    <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/toggle_down_d.png"/>
                    <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/toggle_down_h.png"/>
                    <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/toggle_down_d.png"/>
                    <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/toggle_down_d.png"/>
                </ls:LSToggleButton.Resources>
                <ls:LSToggleButton.Template>
                    <ControlTemplate TargetType="{x:Type ls:LSToggleButton}">
                        <Grid Background="Transparent">
                            <Image x:Name="frame" Source="{DynamicResource FrameNormal}" Stretch="None"/>
                            <Image x:Name="icon" Source="{DynamicResource IconNormal}" Stretch="None">
                                <Image.RenderTransform>
                                    <ScaleTransform ScaleY="1" CenterY="16"/>
                                </Image.RenderTransform>
                            </Image>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                                <Setter Property="RenderTransform" TargetName="icon">
                                    <Setter.Value>
                                        <ScaleTransform ScaleY="-1" CenterY="16"/>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>

                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Source" Value="{DynamicResource FrameHighlight}" TargetName="frame"/>
                                <Setter Property="Source" Value="{DynamicResource IconHighlight}" TargetName="icon"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Source" Value="{DynamicResource FramePressed}" TargetName="frame"/>
                                <Setter Property="Source" Value="{DynamicResource IconPressed}" TargetName="icon"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Source" Value="{DynamicResource FrameDisabled}" TargetName="frame"/>
                                <Setter Property="Source" Value="{DynamicResource IconDisabled}" TargetName="icon"/>
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ls:LSToggleButton.Template>
            </ls:LSToggleButton>

        </Grid>
        <ControlTemplate.Triggers>

            <DataTrigger Binding="{Binding IsCreation}" Value="True">
                <!-- CC starts with Summary open -->
                <Setter TargetName="summaryToggle" Property="IsChecked" Value="True"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CharacterCreationStep}" Value="Finish">
                <!-- Show open summary on readyInfo page -->
                <Setter TargetName="summaryToggle" Property="IsChecked" Value="True"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="CharacterLevelUp">
                <Setter TargetName="CharacterPassives" Property="Visibility" Value="Visible"/>
                <Setter TargetName="RightPanel" Property="MinHeight" >
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                            <Binding Path="ActualHeight" ElementName="CharacterPassives"/>
                            <Binding Path="Margin.Top" ElementName="CharacterPassives"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="overpanelSkillsTemplate">
        <ls:LSNineSliceImage Padding="0,20,0,60" Slices="64,300,64,100" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/overPane_appearance.png" Width="820" MinHeight="1460">

            <StackPanel>
                <StackPanel.Resources>
                    <DataTemplate x:Key="AllSkillTemplate">
                        <Grid x:Name="checkBox" Visibility="Hidden" Height="{DynamicResource rowHeight}" Background="Transparent">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="MouseLeftButtonUp">
                                    <b:InvokeCommandAction Command="{Binding DataContext.ToggleSkill, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                                </b:EventTrigger>
                                <b:EventTrigger EventName="MouseLeftButtonDown">
                                    <ls:LSPlaySound Sound="UI_Shared_Secondary_Press"/>
                                </b:EventTrigger>
                                <b:EventTrigger EventName="MouseEnter">
                                    <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>

                            <Image x:Name="checkHolder" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/checkHolder_inactive_d.png" Stretch="None"/>
                            <Image x:Name="checkMark" Stretch="None"/>
                        </Grid>
                        <DataTemplate.Triggers>

                            <DataTrigger Binding="{Binding Selected}" Value="True">
                                <Setter TargetName="checkMark" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/checkMark_skills_selected.png"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding Enabled}" Value="True">
                                <Setter TargetName="checkHolder" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/checkHolder_active_d.png"/>
                                <Setter TargetName="checkBox" Property="Visibility" Value="Visible"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding SkillSource}" Value="Background">
                                <Setter TargetName="checkHolder" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/checkHolder_inactive_d.png"/>
                                <Setter TargetName="checkMark" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/checkMark_skills_selectedBefore.png"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding SkillSource}" Value="Race">
                                <Setter TargetName="checkHolder" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/checkHolder_inactive_d.png"/>
                                <Setter TargetName="checkMark" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/checkMark_skills_selectedBefore.png"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding SkillSource}" Value="Class">
                                <Setter TargetName="checkHolder" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/checkHolder_inactive_d.png"/>
                                <Setter TargetName="checkMark" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/checkMark_skills_selectedBefore.png"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding SkillSource}" Value="Passive">
                                <Setter TargetName="checkHolder" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/checkHolder_inactive_d.png"/>
                                <Setter TargetName="checkMark" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/checkMark_skills_selectedBefore.png"/>
                            </DataTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, ElementName=checkBox}" Value="True"/>
                                    <Condition Binding="{Binding Opacity, ElementName=checkBox}" Value="1"/>
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="checkHolder" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/checkHolder_active_h.png"/>
                            </MultiDataTrigger>

                        </DataTemplate.Triggers>
                    </DataTemplate>


                </StackPanel.Resources>
                <TextBlock x:Name="skillsTitle" ls:TextBlockFormatter.SourceText="{Binding Source=h12abe296ga0fbg44feg9451gb10a0bf92acb, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}" Margin="0,20,0,0"/>

                <TextBlock x:Name="proficiencyDescription" ls:TextBlockFormatter.SourceText="{Binding Source=h50102d2egd75ag447dgba88gf64cd903a457, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}" Margin="40,20,40,0"/>

                <Grid x:Name="skillsSelectionTable" Margin="0,20,0,0" HorizontalAlignment="Center">

                    <Grid.Resources>
                        <System:Single x:Key="rowHeight">56</System:Single>
                    </Grid.Resources>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <ItemsControl x:Name="skillInfo" Grid.Row="1" Grid.Column="0" ItemsSource="{Binding SortedItems, ElementName=SortedRaceSkills}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Grid MinWidth="350" Height="{StaticResource rowHeight}" HorizontalAlignment="Left">
                                    <Image x:Name="source" Stretch="None" HorizontalAlignment="Left">
                                        <Image.ToolTip>
                                            <ls:LSTooltip x:Name="sourceTooltip" Content=""/>
                                        </Image.ToolTip>
                                    </Image>
                                    <Control x:Name="text" Template="{StaticResource SkillDisplayName}" FontSize="{StaticResource ScaledMediumFontSize}" Foreground="{StaticResource CCTextNormal}" VerticalAlignment="Center" Margin="70,0,0,0">
                                        <Control.ToolTip>
                                            <ls:LSTooltip Content="{Binding Path=DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                        </Control.ToolTip>
                                    </Control>
                                </Grid>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding SkillSource}" Value="Background">
                                        <Setter TargetName="source" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_origin.png"/>
                                        <Setter TargetName="sourceTooltip" Property="Content" Value="{Binding Source='hedd9548eg9694g41d4g85a5gcca6ecdfdea8', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Setter TargetName="text" Property="Foreground" Value="{StaticResource CCTextLight}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding SkillSource}" Value="Race">
                                        <Setter TargetName="source" Property="Source" Value="{StaticResource IconRace}"/>
                                        <Setter TargetName="sourceTooltip" Property="Content" Value="{Binding Source='h2b695f65g9317g4a75g9ae2g7f45350c3bfc', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Setter TargetName="text" Property="Foreground" Value="{StaticResource CCTextLight}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding SkillSource}" Value="Class">
                                        <Setter TargetName="source" Property="Source" Value="{StaticResource IconClass}"/>
                                        <Setter TargetName="sourceTooltip" Property="Content" Value="{Binding Source='h4f84523ag0b42g41f8gafcfgb25f74fd1b74', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Setter TargetName="text" Property="Foreground" Value="{StaticResource CCTextLight}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding SkillSource}" Value="Passive">
                                        <Setter TargetName="source" Property="Source" Value="{StaticResource IconClass}"/>
                                        <Setter TargetName="sourceTooltip" Property="Content" Value="{Binding Source='h099ebd82g6ea7g43b7gbf0fg69e32653f322', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Setter TargetName="text" Property="Foreground" Value="{StaticResource CCTextLight}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding SkillSource}" Value="RaceSelector">
                                        <Setter TargetName="source" Property="Source" Value="{StaticResource IconRace}"/>
                                        <Setter TargetName="sourceTooltip" Property="Content" Value="{Binding Source='h2b695f65g9317g4a75g9ae2g7f45350c3bfc', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Setter TargetName="text" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding SkillSource}" Value="ClassSelector">
                                        <Setter TargetName="source" Property="Source" Value="{StaticResource IconClass}"/>
                                        <Setter TargetName="sourceTooltip" Property="Content" Value="{Binding Source='h4f84523ag0b42g41f8gafcfgb25f74fd1b74', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Setter TargetName="text" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
                                    </DataTrigger>

                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <!-- Roll Bonuses for all Skill selectors: Race, Class, Expertise -->
                    <ItemsControl x:Name="rollBonuses" Grid.Row="1" Grid.Column="1" Width="60" ItemsSource="{Binding SortedItems, ElementName=SortedRaceSkills}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Grid Height="{StaticResource rowHeight}">
                                    <TextBlock Text="{Binding Value, StringFormat={}{0:+#;-#;+0}}" FontSize="{StaticResource ScaledMediumFontSize}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Grid>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <StackPanel x:Name="selectableRaceSkills" Grid.Row="0" Grid.Column="2" Width="100" Visibility="{Binding AllSkills.RaceProficientSkills.MaxSelectedSkillCount, Converter={StaticResource CountToVisibilityConverter}}">
                        <StackPanel.ToolTip>
                            <ls:LSTooltip>
                                <StackPanel>
                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h5cab4ab6g7b46g46cegb82fg3ea721099318', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" FontSize="{StaticResource ScaledLargeFontSize}"/>
                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hda608d66g306eg4739g8ea2g974918945bb8', Converter={StaticResource TranslatedStringConverter}}" TextWrapping="Wrap"/>
                                </StackPanel>
                            </ls:LSTooltip>
                        </StackPanel.ToolTip>
                        <Image Source="{StaticResource IconRace}" Stretch="None"/>
                        <TextBlock x:Name="RaceSkillsTitle" HorizontalAlignment="Center">
                            <TextBlock.Text>
                                <MultiBinding StringFormat="{}{0}/{1}">
                                    <Binding Path="AllSkills.RaceProficientSkills.SelectedSkillCount"/>
                                    <Binding Path="AllSkills.RaceProficientSkills.MaxSelectedSkillCount"/>
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </StackPanel>
                    <ItemsControl Grid.Row="1" Grid.Column="2" Width="100" ItemsSource="{Binding SortedItems, ElementName=SortedRaceSkills}" ItemTemplate="{StaticResource AllSkillTemplate}" Tag="Race" Visibility="{Binding RaceSkills.MaxSelectedSkillCount, Converter={StaticResource CountToVisibilityConverter}}"/>

                    <StackPanel x:Name="selectableClassSkills" Grid.Row="0" Grid.Column="3" Width="100" Visibility="{Binding AllSkills.ClassProficientSkills.MaxSelectedSkillCount, Converter={StaticResource CountToVisibilityConverter}}">
                        <StackPanel.ToolTip>
                            <ls:LSTooltip>
                                <StackPanel>
                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h5cab4ab6g7b46g46cegb82fg3ea721099318', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" FontSize="{StaticResource ScaledLargeFontSize}"/>
                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hda608d66g306eg4739g8ea2g974918945bb8', Converter={StaticResource TranslatedStringConverter}}" TextWrapping="Wrap"/>
                                </StackPanel>
                            </ls:LSTooltip>
                        </StackPanel.ToolTip>
                        <Image Source="{StaticResource IconClass}" Stretch="None"/>
                        <TextBlock x:Name="ClassSkillsTitle" HorizontalAlignment="Center" FontSize="{StaticResource ScaledDefaultFontSize}">
                            <TextBlock.Text>
                                <MultiBinding StringFormat="{}{0}/{1}">
                                    <Binding Path="AllSkills.ClassProficientSkills.SelectedSkillCount"/>
                                    <Binding Path="AllSkills.ClassProficientSkills.MaxSelectedSkillCount"/>
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </StackPanel>
                    <ItemsControl Grid.Row="1" Grid.Column="3" Width="100" ItemsSource="{Binding SortedItems, ElementName=SortedClassSkills}" ItemTemplate="{StaticResource AllSkillTemplate}" Tag="Class" Visibility="{Binding AllSkills.ClassProficientSkills.MaxSelectedSkillCount, Converter={StaticResource CountToVisibilityConverter}}"/>

                    <StackPanel x:Name="selectableExpertiseSkills" Grid.Row="0" Grid.Column="4" Width="100" Visibility="{Binding AllSkills.ExpertiseSkills.MaxSelectedSkillCount, Converter={StaticResource CountToVisibilityConverter}}" >
                        <StackPanel.ToolTip>
                            <ls:LSTooltip>
                                <StackPanel>
                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h601ff4c6g67b8g4f32gaaf7g8b29d6daa426', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" FontSize="{StaticResource ScaledLargeFontSize}"/>
                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hb7bf72ebgcd1ag40fbg9f1eg85d9a5853d4d', Converter={StaticResource TranslatedStringConverter}}" TextWrapping="Wrap"/>
                                </StackPanel>
                            </ls:LSTooltip>
                        </StackPanel.ToolTip>
                        <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/ico_expertise.png" Width="64" Height="64" Stretch="None"/>
                        <TextBlock x:Name="ExpertiseSkillsTitle" HorizontalAlignment="Center" FontSize="{StaticResource ScaledDefaultFontSize}">
                            <TextBlock.Text>
                                <MultiBinding StringFormat="{}{0}/{1}">
                                    <Binding Path="AllSkills.ExpertiseSkills.SelectedSkillCount"/>
                                    <Binding Path="AllSkills.ExpertiseSkills.MaxSelectedSkillCount"/>
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </StackPanel>
                    <ItemsControl Grid.Row="1" Grid.Column="4" ItemsSource="{Binding SortedItems, ElementName=SortedExpertiseSkills}" ItemTemplate="{StaticResource AllSkillTemplate}" Tag="Expertise" Visibility="{Binding AllSkills.ExpertiseSkills.MaxSelectedSkillCount, Converter={StaticResource CountToVisibilityConverter}}"/>


                </Grid>

            </StackPanel>
        </ls:LSNineSliceImage>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding RaceSkills.IsComplete}" Value="False">
                <Setter TargetName="RaceSkillsTitle" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ClassSkills.IsComplete}" Value="False">
                <Setter TargetName="ClassSkillsTitle" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding AllSkills.ExpertiseSkills.IsComplete}" Value="False">
                <Setter TargetName="ExpertiseSkillsTitle" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="SubclassesTemplate">
        <ContentControl x:Name="Subclasses" Template="{StaticResource NewItemStripTemplate}" Visibility="{Binding SelectableSubClasses.Count, Converter={StaticResource CountToVisibilityConverter}}">
            <StackPanel x:Name="panel" HorizontalAlignment="Center" Background="Transparent">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseLeftButtonUp">
                        <b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedItem" Value="{Binding ElementName=subClassTab}" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>

                <StackPanel.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
                    </Style>
                </StackPanel.Resources>

                <TextBlock x:Name="SpecializationText" Text="{Binding Source='h990f5b12g47e8g409fg8ebeg1b658317dc01', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center"/>
                <StackPanel x:Name="SpecializationSelection" Orientation="Horizontal"  HorizontalAlignment="Center" Visibility="Collapsed">
                    <TextBlock x:Name="chosenText" Text="{Binding Source='h13a16848g4e88g4228g92c3ge41772417b03', Converter={StaticResource TranslatedStringConverter}}"/>
                    <TextBlock x:Name="subClassNameText" Text="{Binding SelectedSubclass.Name}" Margin="8,0,0,0"/>
                </StackPanel>

                <ItemsControl x:Name="SubclassesList" ItemsSource="{Binding SelectableSubClasses}" ItemsPanel="{StaticResource gameplayItemsPanelTemplate}" Margin="0,20,0,0">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="ls:VMSelectableClass">
                            <StackPanel x:Name="SubclassRoot" Margin="20,0">
                                <StackPanel.ToolTip>
                                    <ls:LSTooltip Placement="Center" VerticalOffset="-100">
                                        <TextBlock Text="{Binding DataContext.Name, ElementName=SubclassRoot}" Style="{StaticResource TooltipBaseTextStyle}"/>
                                    </ls:LSTooltip>
                                </StackPanel.ToolTip>

                                <Image Style="{StaticResource ClassIconHotbarStyle}" Stretch="None"/>
                            </StackPanel>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>

                <Image x:Name="SelectedSubclassIcon" Style="{StaticResource ClassIconHotbarStyle}" Stretch="None" DataContext="{Binding SelectedSubclass}" Visibility="Collapsed"/>
            </StackPanel>
        </ContentControl>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding SelectedSubclass, Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                <Setter TargetName="SpecializationText" Property="Foreground" Value="{StaticResource CCTextNormal}"/>
                <Setter TargetName="SpecializationSelection" Property="Visibility" Value="Visible"/>
                <Setter TargetName="SubclassesList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SelectedSubclassIcon" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ElementName=panel, Path=IsMouseOver}" Value="True">
                <Setter TargetName="SpecializationText" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
                <Setter TargetName="chosenText" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
                <Setter TargetName="subClassNameText" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="classDetailsButtonTemplate">
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,32,0">
            <TextBlock Text="{Binding Source='hed33453fg7adfg4057g98c8g7ed6447c7475', Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource CCTextSpecial}" FontSize="{StaticResource ScaledSmallFontSize}" TextAlignment="Center" VerticalAlignment="Center"/>

            <ls:LSButton x:Name="ClassDetailsButton" VerticalAlignment="Center" Command="{Binding DataContext.SetClassDetailsOpenCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                <ls:LSButton.Template>
                    <ControlTemplate TargetType="{x:Type ls:LSButton}">
                        <Grid Background="Transparent" HorizontalAlignment="Center">
                            <Image x:Name="bg" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <Image x:Name="icon" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_popout_d.png" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_h.png" TargetName="bg"/>
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_popout_h.png" TargetName="icon"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Margin" Value="0,4,0,-4" TargetName="bg"/>
                                <Setter Property="Margin" Value="0,4,0,-4" TargetName="icon"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ls:LSButton.Template>
            </ls:LSButton>
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="classPanelTemplate">
        <Grid>
            <DockPanel VerticalAlignment="Top" Height="{StaticResource gameplayPanelHeight}" Width="1284">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <b:InvokeCommandAction Command="{Binding DataContext.SetupClassesLoopingCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="Available"/>
                        <!-- Tutorial UI Event - Multiclass-->
                        <b:InvokeCommandAction Command="{Binding DataContext.TutorialEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="903e0cfe-5bf3-42c3-95ad-869318c638b5"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="Unloaded">
                        <b:InvokeCommandAction Command="{Binding DataContext.SetClassDetailsOpenCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{StaticResource FalseValue}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>

                <StackPanel DockPanel.Dock="Top">

                    <Image Source="{StaticResource IconClass}" Stretch="None" Margin="0,64,0,0"/>
                    <TextBlock x:Name="panelTitle" ls:TextBlockFormatter.SourceText="{Binding Source=h32d1c528g0dfbg4751ga413g275e6d7ba4c3, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>

                    <TextBlock x:Name="addClassDescription" Visibility="Collapsed" ls:TextBlockFormatter.SourceText="{Binding Source=h5207e327g4302g4910gaf8cgc2e27cc1b248, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}" Margin="0,20,0,20"/>
					
					<!-- MOD START - Add scroll viewer to support multiple modded class selection -->
					<ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" MaxHeight="770" VerticalScrollBarVisibility="Auto">
						<StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

							<!-- Class selector -->
							<ListBox x:Name="classList" Visibility="{Binding SelectableClasses.Count, Converter={StaticResource CountToVisibilityConverter}, FallbackValue=Collapsed}" ItemTemplate="{StaticResource ClassIconTemplate}" ItemsSource="{Binding SelectableClasses}" ItemContainerStyle="{StaticResource CCIconTextListBoxItemStyle}" SelectedItem="{Binding SelectedClass}" Style="{StaticResource gameplayIconGridStyle}" HorizontalContentAlignment="Center"/>

							<ListBox x:Name="multiclassList" Visibility="{Binding SelectableMultiClasses.Count, Converter={StaticResource CountToVisibilityConverter}, FallbackValue=Collapsed}" ItemTemplate="{StaticResource ReducedClassIconTemplate}" ItemsSource="{Binding SelectableMultiClasses}" SelectedItem="{Binding SelectedMultiClass}" Style="{StaticResource gameplayIconGridStyle}" Width="920" HorizontalContentAlignment="Center">
								<ListBox.ItemContainerStyle>
									<Style TargetType="ListBoxItem" BasedOn="{StaticResource CCIconTextListBoxItemStyle}">
										<Setter Property="IsEnabled" Value="True"/>
										<Style.Triggers>
											<DataTrigger Binding="{Binding DataContext.Level, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0, RelativeSource={RelativeSource Self}}" Value="True">
												<Setter Property="IsEnabled" Value="False"/>
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</ListBox.ItemContainerStyle>
							</ListBox>
						</StackPanel>
					</ls:LSScrollViewer>
                </StackPanel>

                <ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" VerticalScrollBarVisibility="Auto" MaxHeight="770" Height="Auto" Margin="100,0,88,52">
                    <!-- MOD END -->
					<StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                        <!-- Name and description -->
                        <Grid Margin="0,40,0,0">
                            <TextBlock x:Name="ClassName" Style="{StaticResource PanelHeaderText}" TextAlignment="Center" VerticalAlignment="Bottom"/>

                            <Control Template="{StaticResource classDetailsButtonTemplate}"/>
                        </Grid>

                        <TextBlock x:Name="ClassDescription" Style="{StaticResource PanelDescriptionText}" Margin="0,10,0,0"/>

                        <!-- Spells -->
                        <ItemsControl x:Name="Spells" ItemsSource="{Binding FilteredItems, ElementName=ClassSpellSelectors}" ItemTemplate="{StaticResource SpellSelectorPreviewTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=ClassSpellSelectors, Converter={StaticResource CountToVisibilityConverter}}"/>

                        <!-- Actions / Cantrips -->
                        <!-- Note this is ProgressionSpellsTemplate but without the Spells as they are shown in preparableSpells next (only a sample of total spells are shown as requested by design) -->
                        <ItemsControl x:Name="featureSpells" ItemsSource="{Binding FilteredItems, ElementName=ClassProgressions}" Margin="0,20,0,0">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel>
                                        <ContentControl Template="{StaticResource ShowSpellsTemplate}" DataContext="{Binding Features.Actions}" Content="{Binding Source='h7ba895aaga020g4cf0g9ec0g6a98f5eaaa3c', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <ContentControl Template="{StaticResource ShowSpellsTemplate}" DataContext="{Binding Features.Cantrips}" Content="{Binding Source='h7d02199dg44ecg4a1egbcacg9cc1cec197b3', Converter={StaticResource TranslatedStringConverter}}"/>
                                    </StackPanel>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>

                        <ContentControl x:Name="FinalCantripList" Template="{StaticResource NewItemStripTemplate}" Visibility="Collapsed">
                            <StackPanel HorizontalAlignment="Center">
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h7d02199dg44ecg4a1egbcacg9cc1cec197b3', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center"/>
                                <ItemsControl Style="{StaticResource SpellSelectorItemControlStyle}" ItemsSource="{Binding ProgressionCantrips}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </StackPanel>
                        </ContentControl>

                        <ContentControl x:Name="FinalActionList" Template="{StaticResource NewItemStripTemplate}" Visibility="Collapsed">
                            <StackPanel HorizontalAlignment="Center">
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h7ba895aaga020g4cf0g9ec0g6a98f5eaaa3c', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center"/>
                                <ItemsControl Style="{StaticResource SpellSelectorItemControlStyle}" ItemsSource="{Binding ProgressionActions}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </StackPanel>
                        </ContentControl>

                        <ContentControl x:Name="FinalSpellList" Template="{StaticResource NewItemStripTemplate}" Visibility="Collapsed">
                            <StackPanel HorizontalAlignment="Center">
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h2975f9c0gc2aag47d9ga3b3g3dd5171b9bf4', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center"/>
                                <ItemsControl Style="{StaticResource SpellSelectorItemControlStyle}" ItemsSource="{Binding ProgressionFinalSpells}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </StackPanel>
                        </ContentControl>

                        <ContentControl x:Name="FinalSpellListLimited" Template="{StaticResource NewItemStripTemplate}" Visibility="Collapsed">
                            <StackPanel HorizontalAlignment="Center">
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h2975f9c0gc2aag47d9ga3b3g3dd5171b9bf4', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center"/>
                                <StackPanel Orientation="Horizontal" Margin="0,14,0,0">
                                    <!-- New WIP design is to just show 4-6 spells from the available set -->
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding ProgressionFinalSpells[0].Spell}"/>
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding ProgressionFinalSpells[1].Spell}"/>
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding ProgressionFinalSpells[2].Spell}"/>
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding ProgressionFinalSpells[3].Spell}"/>
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding ProgressionFinalSpells[4].Spell}"/>
                                </StackPanel>
                            </StackPanel>
                        </ContentControl>

                        <!-- Preparable spells -->
                        <ls:LSNineSliceImage x:Name="preparableSpells" Padding="50,0,50,40" Slices="100,80,100,80" MinWidth="388" MaxWidth="1000" MinHeight="200" ImageSource="{StaticResource DetailsBoxSmall}" Visibility="{Binding SpellPrepare.Preparable.Count, Converter={StaticResource CountToVisibilityConverter}}" HorizontalAlignment="Center" Margin="0,20,0,0">
                            <StackPanel>
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h2975f9c0gc2aag47d9ga3b3g3dd5171b9bf4', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center"/>
                                <StackPanel Orientation="Horizontal" Margin="0,14,0,0">
                                    <!-- New WIP design is to just show 4-6 spells from the available set -->
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding SpellPrepare.Preparable[0].Spell}"/>
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding SpellPrepare.Preparable[1].Spell}"/>
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding SpellPrepare.Preparable[2].Spell}"/>
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding SpellPrepare.Preparable[3].Spell}"/>
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding SpellPrepare.Preparable[4].Spell}"/>
                                </StackPanel>
                            </StackPanel>
                        </ls:LSNineSliceImage>

                        <ContentControl x:Name="preparableSpellsLevelUp" Template="{StaticResource NewItemStripTemplate}" Visibility="Collapsed">
                            <StackPanel HorizontalAlignment="Center">
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h2975f9c0gc2aag47d9ga3b3g3dd5171b9bf4', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center"/>
                                <StackPanel Orientation="Horizontal" Margin="0,14,0,0">
                                    <!-- New WIP design is to just show 4-6 spells from the available set -->
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding SpellPrepare.Preparable[0].Spell}"/>
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding SpellPrepare.Preparable[1].Spell}"/>
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding SpellPrepare.Preparable[2].Spell}"/>
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding SpellPrepare.Preparable[3].Spell}"/>
                                    <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding SpellPrepare.Preparable[4].Spell}"/>
                                </StackPanel>
                            </StackPanel>
                        </ContentControl>

                        <!-- Class features -->
                        <ContentControl x:Name="ClassFeatures" Template="{DynamicResource ShowFeaturesTemplate}" DataContext="{Binding ProgressionData.ClassProgression.Other}" Content="{Binding Source='h4c3d6eacgf0adg4c31gb11ag3d4736a7fac3', Converter={StaticResource TranslatedStringConverter}}" Visibility="{Binding Count, Converter={StaticResource CountToVisibilityConverter}}" HorizontalAlignment="Center" Margin="0,20,0,0"/>

                        <!-- For Ranger (move to Class Features?) -->
                        <ItemsControl x:Name="RangerClassPassives" ItemsSource="{Binding FilteredItems, ElementName=ClassPassiveFeatures}" ItemTemplate="{StaticResource ProgressionSpellsTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=ClassPassiveFeatures, Converter={StaticResource CountToVisibilityConverter}}" Margin="0,20,0,0"/>

                        <!-- Subclass -->
                        <ContentControl x:Name="Subclasses" ContentTemplate="{StaticResource SubclassesTemplate}" Content="{Binding .}" Visibility="Collapsed"/>
                    </StackPanel>

                </ls:LSScrollViewer>

            </DockPanel>

            <ls:LSButton x:Name="CancelButton" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,60"
                         Command="{Binding DataContext.SelectFirstUsedClass, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Visibility="Collapsed">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Click">
                        <b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedItem" Value="{Binding ElementName=levelupTab}" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                <ls:LSButton.Template>
                    <ControlTemplate TargetType="{x:Type ls:LSButton}">
                        <Grid Background="Transparent">
                            <Image x:Name="bg" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_small_red_d.png" Stretch="None"/>
                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h675a55aegd07cg4ab0g862dg0c564197d478, Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_small_red_h.png" TargetName="bg"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_small_red_p.png" TargetName="bg"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ls:LSButton.Template>
            </ls:LSButton>

        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="CharacterLevelUp">
                <Setter TargetName="ClassFeatures" Property="Template" Value="{StaticResource LevelUpShowFeaturesTemplate}"/>
                <Setter TargetName="ClassFeatures" Property="Margin" Value="0"/>
                <Setter TargetName="Spells" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="featureSpells" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="RangerClassPassives" Property="Margin" Value="0"/>
                <Setter TargetName="Subclasses" Property="Visibility" Value="Visible"/>
                <Setter TargetName="FinalCantripList" Property="Visibility" Value="{Binding ProgressionCantrips.Count, Converter={StaticResource CountToVisibilityConverter}}"/>
                <Setter TargetName="FinalActionList" Property="Visibility" Value="{Binding ProgressionActions.Count, Converter={StaticResource CountToVisibilityConverter}}"/>
                <Setter TargetName="FinalSpellList" Property="Visibility" Value="{Binding ProgressionFinalSpells.Count, Converter={StaticResource CountToVisibilityConverter}}"/>
                <Setter TargetName="FinalSpellListLimited" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="preparableSpells" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="preparableSpellsLevelUp" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="CancelButton" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding SelectedClass, Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                <Setter TargetName="ClassName" Property="ls:TextBlockFormatter.SourceText" Value="{Binding SelectedClass.Name}"/>
                <Setter TargetName="ClassDescription" Property="ls:TextBlockFormatter.SourceText" Value="{Binding SelectedClass.Description}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedMultiClass, Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                <Setter TargetName="ClassName" Property="ls:TextBlockFormatter.SourceText" Value="{Binding SelectedMultiClass.Name}"/>
                <Setter TargetName="ClassDescription" Property="ls:TextBlockFormatter.SourceText" Value="{Binding SelectedMultiClass.Description}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding SelectedMultiClass.Level}" Value="0">
                <Setter TargetName="panelTitle" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hcbc3c9a8g9e80g4139g952bga971015c1f41', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="addClassDescription" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <!-- Choose what information is shown on this panel -->
            <!-- On CC Class Panel -->
            <DataTrigger Binding="{Binding SelectedClass.IDString}" Value="Wizard">
                <Setter TargetName="FinalCantripList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="FinalActionList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="FinalSpellList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="FinalSpellListLimited" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="preparableSpells" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="preparableSpellsLevelUp" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <!-- On LevelUp (multi)Class Panel -->
            <DataTrigger Binding="{Binding SelectedMultiClass.IDString}" Value="Ranger">
                <Setter TargetName="FinalCantripList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="FinalActionList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="FinalSpellList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="FinalSpellListLimited" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedMultiClass.IDString}" Value="Wizard">
                <Setter TargetName="FinalSpellList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="FinalSpellListLimited" Property="Visibility" Value="{Binding ProgressionFinalSpells.Count, Converter={StaticResource CountToVisibilityConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedMultiClass.IDString}" Value="Druid">
                <Setter TargetName="FinalSpellList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="FinalSpellListLimited" Property="Visibility" Value="{Binding ProgressionFinalSpells.Count, Converter={StaticResource CountToVisibilityConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedMultiClass.IDString}" Value="Cleric">
                <Setter TargetName="FinalSpellList" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="FinalSpellListLimited" Property="Visibility" Value="{Binding ProgressionFinalSpells.Count, Converter={StaticResource CountToVisibilityConverter}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="subClassPanelTemplate">
        <Grid>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Unloaded">
                    <b:InvokeCommandAction Command="{Binding DataContext.SetClassDetailsOpenCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{StaticResource FalseValue}"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <Image Source="{StaticResource BGDecoration}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,50,0,0"/>

            <!-- MOD START - Two scroll viewers to support multiple modded subclass selection -->
			<StackPanel Height="1800" VerticalAlignment="Top">
                <Image Source="{StaticResource IconClass}" Stretch="None" Margin="0,64,0,0"/>
                <TextBlock x:Name="subclassTitle" Text="{Binding Source=hc59a4905ge807g44a3g8899gc5e9760dc804, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>
				
				<ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" MaxHeight="770" Height="Auto" VerticalScrollBarVisibility="Auto">
                    <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                        <ListBox x:Name="SubclassesList" ItemTemplate="{StaticResource ClassIconTemplate}" ItemsSource="{Binding SelectableSubClasses}" SelectedItem="{Binding SelectedSubClass}" ItemContainerStyle="{StaticResource CCIconTextListBoxItemStyle}" Style="{StaticResource gameplayIconGridStyle}" Margin="0,40,0,0" HorizontalContentAlignment="Center"/>
						
					</StackPanel>
				</ls:LSScrollViewer>
				<ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" Height="Auto" VerticalScrollBarVisibility="Auto">
                    <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">
                        <Grid Margin="0,60,0,0">
                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding SelectedSubClass.Name}" Style="{StaticResource PanelHeaderText}" TextAlignment="Center"/>

                            <Control x:Name="subclassDetailsButton" Visibility="Collapsed" Template="{StaticResource classDetailsButtonTemplate}"/>
                        </Grid>

                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding SelectedSubClass.Description}" Style="{StaticResource PanelDescriptionText}" Margin="0,12,0,0"/>

                        <ItemsControl x:Name="SubclassSpells" ItemsSource="{Binding FilteredItems, ElementName=SubClassSpellSelectors}" ItemTemplate="{StaticResource SpellSelectorPreviewTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=SubClassSpellSelectors, Converter={StaticResource CountToVisibilityConverter}}"/>

                        <ItemsControl x:Name="featureSpells" ItemsSource="{Binding FilteredItems, ElementName=SubClassProgressions}" ItemTemplate="{StaticResource ProgressionSpellsTemplate}" Margin="0,12,0,0"/>

                        <ContentControl x:Name="SubclassFeatures" Template="{DynamicResource ShowFeaturesTemplate}" DataContext="{Binding ProgressionData.SubClassProgression.Other}" Content="{Binding Source='ha3fe9fd2gcd03g4e0bgbb45gf60144f6aba6', Converter={StaticResource TranslatedStringConverter}}" Visibility="{Binding Count, Converter={StaticResource CountToVisibilityConverter}}" HorizontalAlignment="Center" Margin="0,12,0,0"/>
                    </StackPanel>
                </ls:LSScrollViewer>
				<!-- MOD END -->
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding SelectedClass.SubclassTitle, FallbackValue='',Converter={StaticResource CompareStringConverter}, ConverterParameter=''}" Value="False">
                <Setter TargetName="subclassTitle" Property="Text" Value="{Binding SelectedClass.SubclassTitle}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedMultiClass.SubclassTitle, FallbackValue='',Converter={StaticResource CompareStringConverter}, ConverterParameter=''}" Value="False">
                <Setter TargetName="subclassTitle" Property="Text" Value="{Binding SelectedMultiClass.SubclassTitle}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="CharacterLevelUp">
                <Setter TargetName="SubclassFeatures" Property="Template" Value="{StaticResource LevelUpShowFeaturesTemplate}"/>
                <Setter TargetName="SubclassSpells" Property="ItemTemplate" Value="{StaticResource LevelUpSpellSelectorPreviewTemplate}"/>
                <Setter TargetName="featureSpells" Property="Margin" Value="0"/>
                <Setter TargetName="SubclassFeatures" Property="Margin" Value="0"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProgressionData.SubClassProgression.WeaponProficiencies.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="subclassDetailsButton" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProgressionData.SubClassProgression.ArmourProficiencies.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="subclassDetailsButton" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SortedItems.Count, ElementName=SortedProgressionSubClassSkills, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="subclassDetailsButton" Property="Visibility" Value="Visible"/>
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="levelUpSubClassTemplate">
        <Grid>
            <Image Source="{StaticResource BGDecoration}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,50,0,0"/>

            <!-- MOD START - Two scroll viewers to support multiple modded subclass selection -->
			<StackPanel Height="1800" VerticalAlignment="Top">
                <Image Source="{StaticResource IconClass}" Stretch="None" Margin="0,64,0,0"/>
                <TextBlock x:Name="subclassTitle" ls:TextBlockFormatter.SourceText="{Binding Source=h1e67bc9cg0f53g4218g8ce8geb6a6636f141, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>

                <ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" MaxHeight="770" Height="Auto" VerticalScrollBarVisibility="Auto">
                    <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                        <ListBox ItemTemplate="{StaticResource ClassIconTemplate}" ItemsSource="{Binding SelectableSubClasses}" SelectedItem="{Binding SelectedSubClass}" ItemContainerStyle="{StaticResource CCIconTextListBoxItemStyle}" Style="{StaticResource gameplayIconGridStyle}" Margin="0,40,0,0"/>
					</StackPanel>
                </ls:LSScrollViewer>
				<ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" Height="Auto" VerticalScrollBarVisibility="Auto">
                    <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">
                        <!-- MOD END -->
						<TextBlock ls:TextBlockFormatter.SourceText="{Binding SelectedSubClass.Name}" Style="{StaticResource PanelHeaderText}" TextAlignment="Center" Margin="0,60,0,0"/>
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding SelectedSubClass.Description}" Style="{StaticResource PanelDescriptionText}" Margin="0,10,0,0"/>

                        <ItemsControl ItemsSource="{Binding FilteredItems, ElementName=SubClassSpellSelectors}" ItemTemplate="{StaticResource LevelUpSpellSelectorPreviewTemplate}"/>

                        <ItemsControl ItemsSource="{Binding ClassProgressionDetails.SubPassiveSelectors}" ItemTemplate="{StaticResource LevelUpPassiveSelectorPreviewTemplate}" ItemContainerStyle="{StaticResource UpdateStateItemStyle}"/>

                        <ContentControl Template="{DynamicResource LevelUpShowFeaturesTemplate}" DataContext="{Binding ProgressionData.SubClassProgression.Other}" Content="{Binding Source='ha3fe9fd2gcd03g4e0bgbb45gf60144f6aba6', Converter={StaticResource TranslatedStringConverter}}" Visibility="{Binding Count, Converter={StaticResource CountToVisibilityConverter}}" HorizontalAlignment="Center"/>

                        <ItemsControl x:Name="featureSpells" ItemsSource="{Binding FilteredItems, ElementName=SubClassProgressions}" ItemTemplate="{StaticResource ProgressionSpellsTemplate}" />
                    </StackPanel>
                </ls:LSScrollViewer>
            </StackPanel>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding SelectedClass.SubclassTitle}" Value="">
                <Setter TargetName="subclassTitle" Property="Text" Value="{Binding Source=hc59a4905ge807g44a3g8899gc5e9760dc804, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="deityTabPanelTemplate">
        <!-- MOD START - Change Deity tab to better support modded long descriptions -->
		<StackPanel>
            <StackPanel>
                <Image Source="{StaticResource IconClass}" Stretch="None" Margin="0,64,0,0"/>
                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=hf1582cccge964g41abga5acg9cd5ecdf35dc, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>
            </StackPanel>

            <ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" VerticalScrollBarVisibility="Auto" Height="1050">
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}" Margin="40,0,-40,50">

                    <ListBox ItemTemplate="{StaticResource CustomIconTemplate}" ItemsSource="{Binding SelectableDeities}" SelectedItem="{Binding SelectedDeity}" ItemContainerStyle="{StaticResource CCIconTextListBoxItemStyle}" Style="{StaticResource gameplayIconGridStyle}">
                        <ListBox.Resources>
                            <Style x:Key="CustomIconStyle" BasedOn="{StaticResource DeityIconStyle}" TargetType="Rectangle"/>
                        </ListBox.Resources>
                    </ListBox>

                </StackPanel>
            </ls:LSScrollViewer>
			<ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" VerticalScrollBarVisibility="Auto" MaxHeight="490"><!-- This is just in case of some really long description-->
				<StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">
					<TextBlock ls:TextBlockFormatter.SourceText="{Binding SelectedDeity.Name}" Style="{StaticResource PanelHeaderText}" TextAlignment="Center"/>
					<TextBlock ls:TextBlockFormatter.SourceText="{Binding SelectedDeity.Description}"  Style="{StaticResource PanelDescriptionText}" Margin="0,10,0,0"/>
				</StackPanel>
            </ls:LSScrollViewer>
        </StackPanel>
		<!-- MOD END -->
    </ControlTemplate>

    <ControlTemplate x:Key="spellPrepTemplate">
        <StackPanel x:Name="base">

            <Image Source="{StaticResource IconClass}" Stretch="None" Margin="0,64,0,0"/>
            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h15329947gc691g4323gac0fge3fbcecb92d9', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>

            <ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" VerticalScrollBarVisibility="Auto">
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                    <Control Template="{StaticResource spellSelectionHeaderInfoTemplate}" HorizontalAlignment="Center" Margin="0,100,0,0"/>

                    <ContentControl Template="{StaticResource decoratedHeader}" Margin="0,50,0,10">
                        <TextBlock x:Name="SelectorStripTitle" ls:TextBlockFormatter.SourceText="{Binding Source='hdbaa56a0gc5e6g4968gb3eag9d5fbcef225e', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ContentControl>
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='he47d6cc7g50c3g4ab6g9027g2c54a173db29', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}"
                                                       Foreground="{StaticResource CCTextNormal}" FontSize="{StaticResource ScaledMediumFontSize}" Width="750"/>

                    <ContentControl Template="{StaticResource decoratedHeader}" Margin="0,40,0,4">
                        <TextBlock x:Name="SelectionStripTitle" ls:TextBlockFormatter.SourceText="{Binding Source='hcfab5df8g7913g4193gae43g805a927077a5', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ContentControl>
                    <ItemsControl ItemsSource="{Binding SpellPrepare.Prepared}" Style="{StaticResource spellSelectionSpellListStyle}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMSpellReference}">
                                <ls:LSButton Template="{StaticResource selectedSpellTemplate}" DataContext="{Binding .}" Command="{Binding DataContext.DeselectSpell,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                    <ls:LSButton.CommandParameter>
                                        <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                            <Binding Path="DataContext.SpellPrepare" ElementName="base"/>
                                            <Binding Path="."/>
                                        </MultiBinding>
                                    </ls:LSButton.CommandParameter>
                                </ls:LSButton>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <ContentControl Template="{StaticResource decoratedHeader}" Margin="0,40,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h60d9fcd7g33e4g4606g8fe9g8f5f25e03847', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ContentControl>

                    <ItemsControl ItemsSource="{Binding  SortedItems, ElementName=SortedPreparableSpellGroupsByLevel}"
                                                          Style="{StaticResource spellSelectorSpellListStyle}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel IsItemsHost="True"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMSpellReferenceByLevel}">
                                <StackPanel>
                                    <b:Interaction.Behaviors>
                                        <ls:CollectionSortBehavior x:Name="SortedSpellsBySchool" 
                                                                    ItemsSource="{Binding Spells}" 
                                                                    Comparer="{Binding DataContext.SpellBySchoolSortComparer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" />
                                    </b:Interaction.Behaviors>
                                    <TextBlock x:Name="level" FontSize="{StaticResource ScaledMediumFontSize}" Margin="0,40,0,15" HorizontalAlignment="Center">
                                        <TextBlock.Text>
                                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                <Binding Source="hd678d4eeg181fg499dg9e81g2146ab24e03a"/>
                                                <Binding Path="Level" Converter="{StaticResource DecimalToRomanConverter}"/>
                                                <Binding Source=""/>
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>

                                    <ItemsControl ItemsSource="{Binding SortedItems, ElementName=SortedSpellsBySchool}" 
                                                                          ls:AttachedProperties.InheritedTag="HideSpellLevel"
                                                                          ItemTemplate="{StaticResource SelectableSpell}"
                                                                          Style="{StaticResource spellSelectorSpellListStyle}"/>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                </StackPanel>
            </ls:LSScrollViewer>

        </StackPanel>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding SpellPrepare.IsComplete}" Value="False">
                <Setter TargetName="SelectionStripTitle" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="OptionRepeatButtonTemplate" TargetType="RepeatButton">
        <Grid>
            <Image x:Name="bg" Source="{StaticResource BtnSmallRound}" Stretch="None"/>
            <Image x:Name="img" Source="{DynamicResource ButtonNormal}" Stretch="None"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{DynamicResource ButtonHighlight}" TargetName="img"/>
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_h.png" TargetName="bg"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="{DynamicResource ButtonPressed}" TargetName="img"/>
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_p.png" TargetName="bg"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Source" Value="{DynamicResource ButtonDisabled}" TargetName="img"/>
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_disabled.png" TargetName="bg"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="SliderRepeatButtonLeftStyle" TargetType="ls:LSRepeatButton">
        <Style.Resources>
            <BitmapImage x:Key="ButtonNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_slider_arrowL_d.png"/>
            <BitmapImage x:Key="ButtonHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_slider_arrowL_h.png"/>
            <BitmapImage x:Key="ButtonPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_slider_arrowL_h.png"/>
            <BitmapImage x:Key="ButtonDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_slider_arrowL_d.png"/>
        </Style.Resources>
        <Setter Property="Template" Value="{StaticResource OptionRepeatButtonTemplate}"/>
        <Setter Property="SoundID" Value="UI_HUD_Shared_Slider_LeftButton"/>
    </Style>

    <Style x:Key="SliderRepeatButtonRightStyle" TargetType="ls:LSRepeatButton">
        <Style.Resources>
            <BitmapImage x:Key="ButtonNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_slider_arrowR_d.png"/>
            <BitmapImage x:Key="ButtonHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_slider_arrowR_h.png"/>
            <BitmapImage x:Key="ButtonPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_slider_arrowR_h.png"/>
            <BitmapImage x:Key="ButtonDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_slider_arrowR_d.png"/>
        </Style.Resources>
        <Setter Property="Template" Value="{StaticResource OptionRepeatButtonTemplate}"/>
        <Setter Property="SoundID" Value="UI_HUD_Shared_Slider_RightButton"/>
    </Style>

    <Style x:Key="OptionSliderThumbStyle" TargetType="ls:LSThumb">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="SoundID" Value="UI_HUD_Shared_Slider_Thumb"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Grid>
                        <Image x:Name="img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_d.png" Stretch="None"/>
                        <Image x:Name="ico" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_scrubber_d.png" Stretch="None"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_h.png" TargetName="img"/>
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_scrubber_h.png" TargetName="ico"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_p.png" TargetName="img"/>
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_scrubber_h.png" TargetName="ico"/>
                            <Setter Property="Margin" Value="0,2,0,-2" TargetName="ico"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_disabled.png" TargetName="img"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DefaultSliderValueStyle" TargetType="TextBlock">
        <Setter Property="Margin" Value="0,0,-38,0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="Text" Value="{Binding Value, Converter={StaticResource RoundDownConverter}}"/>
        <Setter Property="Visibility" Value="{Binding ShowValue, Converter={StaticResource BoolToVisibleConverter}}"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
    </Style>

    <ControlTemplate x:Key="SliderTemplate">
        <StackPanel>
            <TextBlock Text="{Binding Text}" HorizontalAlignment="Center"/>
            <Slider DataContext="{Binding}" Template="{StaticResource OptionsSliderTemplate}" Value="{Binding Value}" Minimum="{Binding Min}" Maximum="{Binding Max}" IsSnapToTickEnabled="False" 
                    SmallChange="{Binding Max, Converter={StaticResource DivideAndRoundConverter}, ConverterParameter='40'}" LargeChange="{Binding Max, Converter={StaticResource DivideAndRoundConverter}, ConverterParameter='10'}" IsEnabled="{Binding Enabled}"/>
        </StackPanel>
    </ControlTemplate>

    <Style x:Key="ColorOptionsStyle" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel IsItemsHost="True"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ListItemType}" Value="TickBox">
                            <Setter Property="Template" Value="{StaticResource ColorOptionTickBoxTemplate}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ListItemType}" Value="Slider">
                            <!-- ToDo: New UI rather than default Options Template for Slider -->
                            <Setter Property="Template" Value="{StaticResource SliderTemplate}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="draconicAppearancePanelTemplate">
        <Grid VerticalAlignment="Top" Height="1560">
            <!-- MOD START - Unique appearance options (instead of Draconic Scales) -->
			<DockPanel x:Name="basePanel" IsEnabled="{Binding Path=IsChecked, ElementName=swatchScalesColorButton, Converter={StaticResource InvertBoolConverter}}" VerticalAlignment="Top">
                <StackPanel DockPanel.Dock="Top">
                    <Image Style="{StaticResource PanelHeaderIconStyle}"/>
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h0e1fded7g681ag4e5fgb0a2gc5928ab399a1', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>
                </StackPanel>

                <StackPanel DockPanel.Dock="Bottom" x:Name="colorSwatches">
                    <ContentControl x:Name="swatchScalesColorHeader" Template="{StaticResource decoratedHeader}" Margin="0,50,0,0">
                        <TextBlock x:Name="swatchScalesColorHeaderText" ls:TextBlockFormatter.SourceText="{Binding Source='h85555614g40b2g459dgbfbfg76291036aebe', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ContentControl>
                    <ls:LSToggleButton x:Name="swatchScalesColorButton" DataContext="{Binding SelectedPassiveColour}" IsChecked="False" Template="{StaticResource ColourButtonTemplate}" SoundID="UI_HUD_CC_OpenCloseToggle"/>
                </StackPanel>

                <DockPanel>
                    <ContentControl DockPanel.Dock="Top" x:Name="scalesHeader" Template="{StaticResource decoratedHeader}" Margin="0,50,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h381a6c0bg214fg4968gae5cg9e5b8a8ffc20', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ContentControl>
                    <ListBox x:Name="scalesList" ItemsSource="{Binding SelectableScales}" SelectedItem="{Binding SelectedScales}" Style="{StaticResource appearanceIconGridStyle}"/>
                </DockPanel>
            </DockPanel>
			<!-- MOD END -->

            <Grid Visibility="{Binding Path=IsChecked, ElementName=swatchScalesColorButton, Converter={StaticResource BoolToVisibleConverter}}" VerticalAlignment="Top" Margin="0,220,0,0">
                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/overPane_appearance.png" Stretch="None"/>

                <StackPanel Margin="0,64,0,0">
                    <ContentControl Template="{StaticResource decoratedHeader}">
                        <TextBlock x:Name="swatchContentScalesColorHeaderText" ls:TextBlockFormatter.SourceText="{Binding Source='h85555614g40b2g459dgbfbfg76291036aebe', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>
                    </ContentControl>
                    <ListBox Style="{StaticResource ColorOptionsStyle}" ItemsSource="{Binding AppearancePassive.ColorOptions}" Margin="0,20,0,0"/>

                    <ListBox ItemsSource="{Binding SelectablePassiveColours}" SelectedItem="{Binding SelectedPassiveColour}" ItemsPanel="{StaticResource selectableColourPanel}" ItemTemplate="{StaticResource selectableColourTemplate}" Margin="0,20,0,0"/>

                </StackPanel>

                <ls:LSToggleButton IsChecked="{Binding IsChecked, Mode=TwoWay, ElementName=swatchScalesColorButton}" Template="{StaticResource ToggleConfirmButtonTemplate}" VerticalAlignment="Bottom" Margin="0,0,0,-16" SoundID="UI_HUD_CC_OpenCloseToggle"/>
            </Grid>

        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding AppearancePassive.EmptyMaterialSelected}" Value="True">
                <Setter TargetName="swatchScalesColorHeader" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="swatchScalesColorButton" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsDragonborn, FallbackValue=False}" Value="True">
                <Setter TargetName="swatchScalesColorHeaderText" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h7202f8ebgaa5dg411dgac62g3bf8986e28b3', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="swatchContentScalesColorHeaderText" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h7202f8ebgaa5dg411dgac62g3bf8986e28b3', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=IsChecked, ElementName=swatchScalesColorButton}" Value="True">
                <Setter TargetName="basePanel" Property="IsEnabled" Value="False"/>
                <Setter TargetName="basePanel" Property="Opacity" Value="{StaticResource OverlayBackgroundContentFade}"/>
                <Setter TargetName="colorSwatches" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="DetailsTemplate">
        <Grid x:Name="ClassDetails">
            <b:Interaction.Behaviors>
                <ls:CollectionSortBehavior x:Name="SortedProgressionClassSkills" ItemsSource="{Binding ProgressionData.ClassProgression.Skills}" Comparer="{Binding SkillSortComparer}" />
                <ls:CollectionSortBehavior x:Name="SortedProgressionSubClassSkills" ItemsSource="{Binding ProgressionData.SubClassProgression.Skills}" Comparer="{Binding SkillSortComparer}" />
            </b:Interaction.Behaviors>

            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/LevelUp_sidepane_bg.png" Stretch="None"/>

            <ls:LSScrollViewer VerticalScrollBarVisibility="Auto">
                <StackPanel VerticalAlignment="Top" Margin="0,90,0,50" MaxWidth="600">
                    <TextBlock x:Name="ClassName" Style="{StaticResource PanelHeaderText}" TextAlignment="Center" VerticalAlignment="Bottom"/>

                    <!-- Proficiencies -->
                    <TextBlock x:Name="ProficienciesTitle" Visibility="Collapsed" Style="{StaticResource PanelHeaderText}" ls:TextBlockFormatter.SourceText="{Binding Source='hbdc95889g6f3fg46efg9993g036cf077a0e7', Converter={StaticResource TranslatedStringConverter}}" Margin="0,40,0,0"/>

                    <StackPanel HorizontalAlignment="Center" Margin="0,10,0,0">
                        <Control x:Name="weapons" Template="{StaticResource boostList}" DataContext="{Binding ProgressionData.ClassProgression.WeaponProficiencies}" Visibility="{Binding Count, Converter={StaticResource CountToVisibilityConverter}}">
                            <Control.Resources>
                                <ControlTemplate x:Key="labelTemplate">
                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h4a198683gedadg497dg9f15ga8606e44fc56, Converter={StaticResource TranslatedStringConverter}, StringFormat='{}{0} - '}" FontSize="{StaticResource ScaledDefaultFontSize}"/>
                                </ControlTemplate>
                            </Control.Resources>
                        </Control>

                        <Control x:Name="armour" Template="{StaticResource boostList}" DataContext="{Binding ProgressionData.ClassProgression.ArmourProficiencies}" Visibility="{Binding Count, Converter={StaticResource CountToVisibilityConverter}}">
                            <Control.Resources>
                                <ControlTemplate x:Key="labelTemplate">
                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=had29e589gd812g473bg90dfg66d1280fbbf1, Converter={StaticResource TranslatedStringConverter}, StringFormat='{}{0} - '}" FontSize="{StaticResource ScaledDefaultFontSize}"/>
                                </ControlTemplate>
                            </Control.Resources>
                        </Control>

                        <Control x:Name="sortedSkills" Template="{StaticResource skillProgressions}" DataContext="{Binding SortedItems, ElementName=SortedProgressionClassSkills}"/>
                    </StackPanel>
                </StackPanel>
            </ls:LSScrollViewer>

            <ls:LSButton Template="{StaticResource FrameWithIconButtonTemplate}" Command="{Binding DataContext.SetClassDetailsOpenCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{StaticResource FalseValue}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,60,60,0">
                <ls:LSButton.Resources>
                    <BitmapImage x:Key="FrameNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundSmall_d.png"/>
                    <BitmapImage x:Key="FrameHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundSmall_h.png"/>
                    <BitmapImage x:Key="FramePressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundSmall_d.png"/>
                    <BitmapImage x:Key="FrameDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundSmall_d.png"/>
                    <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_close_d.png"/>
                    <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_close_h.png"/>
                    <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_close_d.png"/>
                    <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_close_d.png"/>
                </ls:LSButton.Resources>
            </ls:LSButton>
        </Grid>

        <DataTemplate.Triggers>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="class"/>
                    <Condition Binding="{Binding SelectedClass, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ClassName" Property="ls:TextBlockFormatter.SourceText">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h26e82396g5fafg41f8gbd2eg6be21efd93d9"/>
                            <Binding Path="SelectedClass.Name"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="class"/>
                    <Condition Binding="{Binding SelectedMultiClass, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ClassName" Property="ls:TextBlockFormatter.SourceText">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h26e82396g5fafg41f8gbd2eg6be21efd93d9"/>
                            <Binding Path="SelectedMultiClass.Name"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="subclass"/>
                    <Condition Binding="{Binding SelectedSubClass, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ClassName" Property="ls:TextBlockFormatter.SourceText">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h26e82396g5fafg41f8gbd2eg6be21efd93d9"/>
                            <Binding Path="SelectedSubClass.Name"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="subclass">
                <Setter TargetName="weapons" Property="DataContext" Value="{Binding ProgressionData.SubClassProgression.WeaponProficiencies}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="subclass">
                <Setter TargetName="armour" Property="DataContext" Value="{Binding ProgressionData.SubClassProgression.ArmourProficiencies}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="subclass">
                <Setter TargetName="sortedSkills" Property="DataContext" Value="{Binding SortedItems, ElementName=SortedProgressionSubClassSkills}"/>
            </DataTrigger>


            <DataTrigger Binding="{Binding IsVisible, ElementName=weapons}" Value="True">
                <Setter TargetName="ProficienciesTitle" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsVisible, ElementName=armour}" Value="True">
                <Setter TargetName="ProficienciesTitle" Property="Visibility" Value="Visible"/>
            </DataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="featsPanel">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <StackPanel x:Name="featListPanel" Grid.Column="0" Margin="96,0,0,0">
                <Image Source="{StaticResource IconClass}" Stretch="None" Margin="0,64,0,0"/>

                <TextBlock x:Name="featsTitle" ls:TextBlockFormatter.SourceText="{Binding Source='hb7180a49g729ag4ec3g9f87gaeadb7d4252c', Converter={StaticResource TranslatedStringConverter}, StringFormat='{}{0} (1/1)'}" Style="{StaticResource PanelHeaderText}"/>

                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h3a0e9481ge605g41fbgb7fag21d4a45f0c93', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}" Margin="0,20,0,0"/>

                <ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" VerticalScrollBarVisibility="Auto" Height="1400" Margin="0,50,0,0" Padding="0,0,20,60">
                    <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}" Margin="5,0">

                        <ListBox x:Name="featsList" ItemsSource="{Binding SelectableFeats}" SelectedItem="{Binding SelectedFeat}" HorizontalAlignment="Center" Margin="0,0,0,0">
                            <ListBox.Template>
                                <ControlTemplate TargetType="ListBox">
                                    <ItemsPresenter/>
                                </ControlTemplate>
                            </ListBox.Template>

                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsRequirementsMet}" Value="False">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsAlreadyTaken}" Value="True">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ListBox.ItemContainerStyle>

                            <ListBox.ItemTemplate>
                                <DataTemplate DataType="ls:VMSelectableFeat">
                                    <StackPanel Orientation="Horizontal" x:Name="base" ToolTipService.ShowOnDisabled="True" Margin="20,0,0,0">
                                        <StackPanel.ToolTip>
                                            <ls:LSTooltip Content="{Binding DataContext, ElementName=base}">
                                                <ToolTip.ContentTemplate>
                                                    <DataTemplate>
                                                        <StackPanel>
                                                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Description}" Foreground="{StaticResource LS_accent100TxtColor}" FontSize="{StaticResource ScaledDefaultFontSize}" MaxWidth="{StaticResource MaxTooltipContentWidth}" TextWrapping="Wrap" Margin="0,20,0,20"/>

                                                            <StackPanel x:Name="unmetRequirements" Visibility="Collapsed">
                                                                <TextBlock Text="{Binding Source='he7dbfbb3g279cg4872gab74g3b11497fc320', Converter={StaticResource TranslatedStringConverter}}" FontSize="{StaticResource ScaledDefaultFontSize}"/>
                                                                <ItemsControl ItemsSource="{Binding Requirements}">
                                                                    <ItemsControl.ItemTemplate>
                                                                        <DataTemplate>
                                                                            <TextBlock x:Name="req" Text="{Binding Requirement}" TextWrapping="Wrap" FontSize="{StaticResource ScaledDefaultFontSize}"/>
                                                                            <DataTemplate.Triggers>
                                                                                <DataTrigger Binding="{Binding IsMet}" Value="False">
                                                                                    <Setter TargetName="req" Property="Foreground" Value="{DynamicResource LS_alertTxtColor}"/>
                                                                                </DataTrigger>
                                                                            </DataTemplate.Triggers>
                                                                        </DataTemplate>
                                                                    </ItemsControl.ItemTemplate>
                                                                </ItemsControl>
                                                            </StackPanel>
                                                        </StackPanel>
                                                        <DataTemplate.Triggers>
                                                            <DataTrigger Binding="{Binding IsRequirementsMet}" Value="False">
                                                                <Setter TargetName="unmetRequirements" Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                        </DataTemplate.Triggers>
                                                    </DataTemplate>
                                                </ToolTip.ContentTemplate>
                                            </ls:LSTooltip>
                                        </StackPanel.ToolTip>

                                        <Grid>
                                            <Image x:Name="bg" Source="{StaticResource BtnSmallRound}" Stretch="None"/>
                                            <Image x:Name="icon" Visibility="Collapsed" Source="{StaticResource TickActive}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </Grid>
                                        <TextBlock x:Name="txt" Text="{Binding Name}" Foreground="{StaticResource CCTextNormal}" Margin="20,0,0,0"/>
                                        <b:Interaction.Triggers>
                                            <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                                                <b:ChangePropertyAction TargetName="SpellSelectorGrid" PropertyName="Visibility" Value="Collapsed"/>
                                                <b:ChangePropertyAction TargetName="spellSelectorData" PropertyName="DataContext" Value="{x:Null}"/>
                                            </b:DataTrigger>
                                            <b:EventTrigger EventName="MouseEnter">
                                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                            </b:EventTrigger>
                                            <b:EventTrigger EventName="MouseLeftButtonDown">
                                                <ls:LSPlaySound Sound="UI_Shared_Secondary_Press"/>
                                            </b:EventTrigger>
                                            <b:EventTrigger EventName="MouseLeftButtonUp">
                                                <ls:LSPlaySound Sound="UI_HUD_LevelUp_SwapFeat_Click"/>
                                            </b:EventTrigger>
                                        </b:Interaction.Triggers>
                                    </StackPanel>
                                    <DataTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="bg" Property="Source" Value="{StaticResource BtnSmallRound_h}"/>
                                            <Setter TargetName="icon" Property="Source" Value="{StaticResource TickActive_h}"/>
                                            <Setter TargetName="txt" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
                                        </Trigger>
                                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                                            <Setter TargetName="icon" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="txt" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
                                        </DataTrigger>

                                        <DataTrigger Binding="{Binding IsAlreadyTaken}" Value="True">
                                            <Setter TargetName="base" Property="IsEnabled" Value="False"/>
                                            <Setter TargetName="bg" Property="Visibility" Value="Hidden"/>
                                            <Setter TargetName="icon" Property="Source" Value="{StaticResource TickInactive}"/>
                                            <Setter TargetName="icon" Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsRequirementsMet}" Value="False">
                                            <Setter TargetName="base" Property="IsEnabled" Value="False"/>
                                            <Setter TargetName="bg" Property="Visibility" Value="Hidden"/>
                                            <Setter TargetName="icon" Property="Source" Value="{StaticResource IconLock}"/>
                                            <Setter TargetName="icon" Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ListBox.ItemTemplate>

                        </ListBox>
                    </StackPanel>
                </ls:LSScrollViewer>
            </StackPanel>

            <Grid Grid.Column="1" Height="1650" DataContext="{Binding SelectedFeatDetails}" Visibility="{Binding HasFeat, Converter={StaticResource BoolToVisibleConverter}}" Margin="0,100">
                <ls:LSNineSliceImage Slices="100,80,100,80" Width="800" MinHeight="1650" Margin="-12,-16,-12,-12"  ImageSource="{StaticResource FeatEditBackground}"/>

                <StackPanel x:Name="featEditPanel">
                    <Image Source="{StaticResource IconClass}" Stretch="None" Margin="0,64,0,0"/>

                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Name}" Style="{StaticResource PanelHeaderText}"/>

                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Description.Text}" Style="{StaticResource PanelDescriptionText}" MaxWidth="700" Margin="0,20,0,0"/>

                    <ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" VerticalScrollBarVisibility="Auto" Height="1200" Width="840" Margin="-20,20,-20,0">
                        <StackPanel Width="800" HorizontalAlignment="Left" Margin="20,0">

                            <!-- Boosts and Abilities -->
                            <ItemsControl ItemsSource="{Binding FeatDetails.Progressions}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate DataType="ls:VMProgression">
                                        <StackPanel>
                                            <ContentControl x:Name="FeatFeatures" Template="{DynamicResource ShowFeaturesTemplate}" DataContext="{Binding Features.Boosts}" Content="{Binding Source='h4c3d6eacgf0adg4c31gb11ag3d4736a7fac3', Converter={StaticResource TranslatedStringConverter}}" Visibility="{Binding Count, Converter={StaticResource CountToVisibilityConverter}}" HorizontalAlignment="Center" Margin="0,20,0,0"/>

                                            <ItemsControl ItemsSource="{Binding Features.Abilities}">
                                                <ItemsControl.ItemTemplate>
                                                    <DataTemplate DataType="ls:VMAbility">
                                                        <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                                                            <Control Template="{StaticResource AbilityDisplayName}"/>
                                                            <TextBlock x:Name="AbilitySuffix" Text="{Binding Improvement, StringFormat={}{0: +#; -#; +0}}"/>
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </ItemsControl.ItemTemplate>
                                            </ItemsControl>
                                        </StackPanel>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>

                            <!-- Feat Ability Selector -->
                            <StackPanel x:Name="abilitySelection" Visibility="{Binding FeatDetails.AbilitySelection.Count, Converter={StaticResource CountToVisibilityConverter}}">
                                <StackPanel.Tag>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding Path="FeatDetails.SelectedAbilityCount"/>
                                        <Binding Path="FeatDetails.MaxSelectedAbilityCount"/>
                                    </MultiBinding>
                                </StackPanel.Tag>

                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,50,0,0">
                                    <TextBlock x:Name="AbilitySelectionTitle" ls:TextBlockFormatter.SourceText="{Binding Source='h72161eb0g8981g45cfgba63ga76e152e1fe9', Converter={StaticResource TranslatedStringConverter}}"
                                               FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource CCTextNormal}" MaxWidth="600" TextTrimming="CharacterEllipsis"/>
                                    <TextBlock x:Name="AbilitySelectionValue" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource CCTextPrimary}" Margin="20,0,0,0">
                                        <Run Text="{Binding FeatDetails.SelectedAbilityCount}"/><Run Text="{Binding FeatDetails.MaxSelectedAbilityCount, StringFormat='/{0}'}"/>
                                    </TextBlock>
                                </StackPanel>

                                <ItemsControl ItemsSource="{Binding FeatDetails.AbilitySelection}" HorizontalAlignment="Center" Margin="0,32,0,0">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate DataType="ls:VMAbility">
                                            <Grid>
                                                <Grid.Resources>
                                                    <BitmapImage x:Key="FrameNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                                                    <BitmapImage x:Key="FrameHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_h.png"/>
                                                    <BitmapImage x:Key="FramePressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                                                    <BitmapImage x:Key="FrameDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
                                                    <BitmapImage x:Key="IconProficiency" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/ico_proficiency.png"/>
                                                </Grid.Resources>

                                                <Image Style="{StaticResource abilityIconStyle}" HorizontalAlignment="Left" Stretch="Uniform" Height="88"/>
                                                <Image Source="{StaticResource IconProficiency}" Stretch="None" Visibility="{Binding IsPrimary, Converter={StaticResource BoolToVisibleConverter}, ConverterParameter='True'}"
                                                       HorizontalAlignment="Left" Margin="88,0,0,0">
                                                    <Image.ToolTip>
                                                        <ls:LSTooltip IsHitTestVisible="False" ContentTemplate="{StaticResource PrimaryAbilityTooltipContentTemplate}" Style="{StaticResource ManagedTooltipStyle}"/>
                                                    </Image.ToolTip>
                                                </Image>

                                                <Control Template="{StaticResource AbilityDisplayName}" ToolTipService.Placement="Left" FontSize="{StaticResource LargeFontSize}" HorizontalAlignment="Left" 
                                                         VerticalAlignment="Center" MaxWidth="300" Margin="132,0,0,0">
                                                    <Control.ToolTip>
                                                        <ls:LSTooltip Content="{Binding Path=DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                                    </Control.ToolTip>
                                                </Control>

                                                <Grid HorizontalAlignment="Left" Margin="440,0,0,0">
                                                    <ls:LSButton x:Name="leftBtn" Template="{StaticResource FrameWithIconButtonTemplate}"
                                                                 IsEnabled="{Binding Improvement, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}"
                                                                 Command="{Binding DataContext.DeselectAbility, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                                                 CommandParameter="{Binding}" SoundID="UI_HUD_CC_DecreaseAbility" HorizontalAlignment="Left">
                                                        <ls:LSButton.Resources>
                                                            <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_min_d.png"/>
                                                            <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_min_h.png"/>
                                                            <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_min_d.png"/>
                                                            <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_min_d.png"/>
                                                        </ls:LSButton.Resources>
                                                    </ls:LSButton>

                                                    <Grid VerticalAlignment="Center" HorizontalAlignment="Left" Margin="70,0,0,0" MinWidth="50">
                                                        <TextBlock x:Name="value" ls:TextBlockFormatter.SourceText="{Binding Value}" Foreground="LightGreen" FontSize="{StaticResource LargeFontSize}" HorizontalAlignment="Right"/>
                                                    </Grid>

                                                    <ls:LSButton x:Name="rightBtn" Template="{StaticResource FrameWithIconButtonTemplate}"
                                                                 Command="{Binding DataContext.SelectAbility, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                                                 CommandParameter="{Binding}" SoundID="UI_HUD_CC_IncreaseAbility" HorizontalAlignment="Left" Margin="128,0,0,0">
                                                        <ls:LSButton.Resources>
                                                            <BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_plus_d.png"/>
                                                            <BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_plus_h.png"/>
                                                            <BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_plus_d.png"/>
                                                            <BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_plus_d.png"/>
                                                        </ls:LSButton.Resources>
                                                    </ls:LSButton>
                                                </Grid>

                                            </Grid>
                                            <DataTemplate.Triggers>

                                                <DataTrigger Binding="{Binding Improvement}" Value="0">
                                                    <Setter TargetName="value" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
                                                </DataTrigger>

                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Value="True">
                                                            <Condition.Binding>
                                                                <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                                                                    <Binding Path="Improvement"/>
                                                                    <Binding Path="DataContext.FeatDetails.MaxSelectedAbilityCount" ElementName="featEditPanel"/>
                                                                </MultiBinding>
                                                            </Condition.Binding>
                                                        </Condition>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter TargetName="rightBtn" Property="IsEnabled" Value="False"/>
                                                </MultiDataTrigger>

                                                <!-- Disable increase ability button, if ability value >= 20 -->
                                                <DataTrigger Value="True">
                                                    <DataTrigger.Binding>
                                                        <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                                                            <Binding Path="Value"/>
                                                            <Binding Source="20"/>
                                                        </MultiBinding>
                                                    </DataTrigger.Binding>
                                                    <Setter TargetName="rightBtn" Property="IsEnabled" Value="False"/>
                                                </DataTrigger>

                                                <!-- Disable increase ability button, if all available points used -->
                                                <DataTrigger Binding="{Binding ElementName=abilitySelection, Path=Tag}" Value="True">
                                                    <Setter TargetName="rightBtn" Property="IsEnabled" Value="False"/>
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>

                            <!-- Feat Skills -->
                            <StackPanel x:Name="skillSelection" Visibility="{Binding FeatSkills.Skills.Count, Converter={StaticResource CountToVisibilityConverter}}">
                                <StackPanel.Resources>
                                    <BitmapImage x:Key="tabDotOff" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_pagination_tab_off.png"/>
                                    <BitmapImage x:Key="tabDotOn" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_pagination_tab_on.png"/>
                                </StackPanel.Resources>

                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                    <TextBlock x:Name="SkillSelectionTitle" ls:TextBlockFormatter.SourceText="{Binding Source='h0bddbaf0g8c93g4ddfgbb52ge3c54b72c3c6', Converter={StaticResource TranslatedStringConverter}}" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource CCTextNormal}"/>
                                    <TextBlock x:Name="SkillSelectionValue" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource CCTextPrimary}" Margin="20,0,0,0">
                                        <Run Text="{Binding FeatSkills.SelectedSkillCount}"/><Run Text="{Binding FeatSkills.MaxSelectedSkillCount, StringFormat='/{0}'}"/>
                                    </TextBlock>
                                </StackPanel>

                                <ItemsControl ItemsSource="{Binding FeatSkills.Skills}" HorizontalAlignment="Center" Margin="120,30,0,0">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate DataType="ls:VMCharacterCreationSkill">
                                            <Grid VerticalAlignment="Center" ToolTip="{StaticResource ManagedTooltip}" Width="600" Background="Transparent">

                                                <b:Interaction.Triggers>
                                                    <b:EventTrigger EventName="MouseLeftButtonUp">
                                                        <b:InvokeCommandAction Command="{Binding DataContext.ToggleSkill, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                                                    </b:EventTrigger>
                                                    <b:EventTrigger EventName="MouseLeftButtonDown">
                                                        <ls:LSPlaySound Sound="UI_Shared_Secondary_Press"/>
                                                    </b:EventTrigger>
                                                    <b:EventTrigger EventName="MouseEnter">
                                                        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                                    </b:EventTrigger>
                                                </b:Interaction.Triggers>

                                                <Control x:Name="skillName" Template="{StaticResource SkillDisplayName}" FontSize="{StaticResource ScaledDefaultFontSize}"
                                                         Foreground="{StaticResource CCTextSpecial}" HorizontalAlignment="Left"/>
                                                <TextBlock x:Name="skillRollBonus" Text="{Binding Value, StringFormat={}{0:+#;-#;+0}}" FontSize="{StaticResource ScaledDefaultFontSize}"
                                                           Foreground="{StaticResource CCTextSpecial}" HorizontalAlignment="Right" Margin="0,0,200,0"/>

                                                <Grid HorizontalAlignment="Right" Margin="0,0,100,0">
                                                    <Image x:Name="pointIcon" Stretch="None" Width="48" Height="48" />
                                                </Grid>

                                            </Grid>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding Enabled}" Value="True">
                                                    <Setter TargetName="skillName" Property="Foreground" Value="{StaticResource CCTextLight}"/>
                                                    <Setter TargetName="skillRollBonus" Property="Foreground" Value="{StaticResource CCTextLight}"/>
                                                    <Setter TargetName="pointIcon" Property="Source" Value="{StaticResource tabDotOff}"/>
                                                </DataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Enabled}" Value="True"/>
                                                        <Condition Binding="{Binding Selected}" Value="True"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter TargetName="skillName" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
                                                    <Setter TargetName="skillRollBonus" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
                                                    <Setter TargetName="pointIcon" Property="Source" Value="{StaticResource tabDotOn}"/>
                                                </MultiDataTrigger>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="skillName" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
                                                </Trigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>

                            <!-- Feat Passive Selection -->
                            <ItemsControl ItemsSource="{Binding FeatPassives}" Visibility="{Binding FeatPassives.Count, Converter={StaticResource CountToVisibilityConverter}}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate DataType="ls:VMCharacterCreationPassives">
                                        <ContentControl ContentTemplate="{StaticResource PassiveSelectorItemTemplate}" Content="{Binding}"/>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>

                            <!-- Feat Spell Selectors -->
                            <ItemsControl x:Name="Spells" ItemsSource="{Binding FeatDetails.SpellSelectors}" Visibility="{Binding FeatDetails.SpellSelectors.Count, ElementName=ClassSpellSelectors, Converter={StaticResource CountToVisibilityConverter}}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate DataType="ls:VMSpellSelector">
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                            <Border x:Name="SelectionAlignmentIndent" Height="20" Width="50"/>
                                            <ls:LSNineSliceImage x:Name="spellSelector" Padding="50,0,50,40" Slices="100,80,100,80" MinWidth="388" MaxWidth="1000" MinHeight="200"
                                                             ImageSource="{StaticResource DetailsBoxSmall}" Visibility="{Binding Count, Converter={StaticResource CountToVisibilityConverter}}"
                                                             HorizontalAlignment="Center" Margin="0,20,0,0">
                                                <StackPanel>
                                                    <TextBlock HorizontalAlignment="Center" FontSize="{StaticResource ScaledDefaultFontSize}">
                                                    <Run Text="{Binding Title}"/><Run Text="{Binding AddedCount, StringFormat=' ({0}'}"/><Run Text="{Binding Additions.Count, StringFormat='/{0})'}"/>
                                                    </TextBlock>

                                                    <ItemsControl ItemsSource="{Binding Additions}" Style="{StaticResource spellSelectionSpellListStyle}" MaxWidth="530">
                                                        <ItemsControl.ItemsPanel>
                                                            <ItemsPanelTemplate>
                                                                <WrapPanel MaxWidth="530"/>
                                                            </ItemsPanelTemplate>
                                                        </ItemsControl.ItemsPanel>
                                                        <ItemsControl.ItemTemplate>
                                                            <DataTemplate DataType="{x:Type ls:VMSpellReference}">
                                                                <ls:LSButton Template="{StaticResource selectedSpellTemplate}" DataContext="{Binding .}"
                                                                         Command="{Binding DataContext.DeselectSpell,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                                                    <ls:LSButton.CommandParameter>
                                                                        <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                                            <Binding Path="DataContext" ElementName="spellSelector"/>
                                                                            <Binding Path="."/>
                                                                        </MultiBinding>
                                                                    </ls:LSButton.CommandParameter>
                                                                </ls:LSButton>
                                                            </DataTemplate>
                                                        </ItemsControl.ItemTemplate>
                                                    </ItemsControl>

                                                    <ls:LSToggleButton x:Name="editSpellSelectorBtn" Template="{StaticResource EditButtonTemplate}" Margin="0,0,0,-40" IsChecked="False" SoundID="UI_HUD_CC_OpenCloseToggle">
                                                        <b:Interaction.Triggers>
                                                            <b:DataTrigger Binding="{Binding ElementName=editSpellSelectorBtn, Path=IsChecked}" Value="True">
                                                                <b:ChangePropertyAction TargetName="SpellSelectorGrid" PropertyName="Visibility" Value="Visible"/>
                                                                <b:ChangePropertyAction TargetName="spellSelectorData" PropertyName="DataContext" Value="{Binding DataContext, ElementName=spellSelector}"/>
                                                            </b:DataTrigger>
                                                            <b:DataTrigger Binding="{Binding ElementName=editSpellSelectorBtn, Path=IsChecked}" Value="False">
                                                                <b:Interaction.Behaviors>
                                                                    <b:ConditionBehavior>
                                                                        <b:ConditionalExpression>
                                                                            <b:ComparisonCondition LeftOperand="{Binding ElementName=spellSelectorData, Path=DataContext}" Operator="Equal"
                                                                                           RightOperand="{Binding DataContext, ElementName=spellSelector}"/>
                                                                        </b:ConditionalExpression>
                                                                    </b:ConditionBehavior>
                                                                </b:Interaction.Behaviors>
                                                                <b:ChangePropertyAction TargetName="SpellSelectorGrid" PropertyName="Visibility" Value="Collapsed"/>
                                                                <b:ChangePropertyAction TargetName="spellSelectorData" PropertyName="DataContext" Value="{x:Null}"/>
                                                            </b:DataTrigger>
                                                        </b:Interaction.Triggers>
                                                    </ls:LSToggleButton>
                                                </StackPanel>
                                                <b:Interaction.Triggers>
                                                    <b:DataTrigger Binding="{Binding ElementName=SpellSelectorGrid, Path=Visibility}" Value="Collapsed">
                                                        <b:ChangePropertyAction TargetName="editSpellSelectorBtn" PropertyName="IsChecked" Value="False"/>
                                                    </b:DataTrigger>
                                                    <b:PropertyChangedTrigger Binding="{Binding ElementName=spellSelectorData, Path=DataContext}">
                                                        <b:Interaction.Behaviors>
                                                            <b:ConditionBehavior>
                                                                <b:ConditionalExpression>
                                                                    <b:ComparisonCondition LeftOperand="{Binding ElementName=spellSelectorData, Path=DataContext}" Operator="NotEqual"
                                                                                           RightOperand="{Binding DataContext, ElementName=spellSelector}"/>
                                                                </b:ConditionalExpression>
                                                            </b:ConditionBehavior>
                                                        </b:Interaction.Behaviors>
                                                        <b:ChangePropertyAction TargetName="editSpellSelectorBtn" PropertyName="IsChecked" Value="False"/>
                                                    </b:PropertyChangedTrigger>
                                                </b:Interaction.Triggers>
                                            </ls:LSNineSliceImage>

                                            <Image x:Name="SelectionPointer" Source="{StaticResource DetailsBoxPointerActive}" Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Right" Visibility="Hidden"/>
                                        </StackPanel>
                                        <DataTemplate.Triggers>
                                            <Trigger SourceName="editSpellSelectorBtn" Property="IsChecked" Value="True">
                                                <Setter TargetName="spellSelector" Property="ImageSource" Value="{StaticResource DetailsBoxSmallActive}"/>
                                                <Setter TargetName="SelectionPointer" Property="Visibility" Value="Visible"/>
                                            </Trigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </StackPanel>
                    </ls:LSScrollViewer>
                </StackPanel>
            </Grid>

            <Grid x:Name="SpellSelectorGrid" Grid.Column="2" Height="1650" Margin="0,100" Visibility="Collapsed" Panel.ZIndex="10" Width="800">
                <ls:LSNineSliceImage Slices="100,80,100,80" Width="800" MinHeight="1650" Margin="-12,-16,-12,-12" ImageSource="{StaticResource FeatEditBackground}"/>
                <ContentControl x:Name="spellSelectorData" Content="{Binding .}" Template="{StaticResource FeatSpellSelector}"/>
                <ls:LSButton Style="{StaticResource SmallCloseButton}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,30,32,0">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Click">
                            <b:ChangePropertyAction TargetName="editSpellSelectorBtn" PropertyName="IsChecked" Value="False"/>
                            <b:ChangePropertyAction TargetName="SpellSelectorGrid" PropertyName="Visibility" Value="Collapsed"/>
                            <b:ChangePropertyAction TargetName="spellSelectorData" PropertyName="DataContext" Value="{x:Null}"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSButton>
            </Grid>
        </Grid>

        <ControlTemplate.Triggers>

            <DataTrigger Binding="{Binding SelectedFeat}" Value="{x:Null}">
                <Setter TargetName="featsTitle" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hb7180a49g729ag4ec3g9f87gaeadb7d4252c', Converter={StaticResource TranslatedStringConverter}, StringFormat='{}{0} (0/1)'}"/>
            </DataTrigger>

            <DataTrigger Value="False">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="SelectedFeatDetails.FeatDetails.SelectedAbilityCount"/>
                        <Binding Path="SelectedFeatDetails.FeatDetails.MaxSelectedAbilityCount"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="AbilitySelectionTitle" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
                <Setter TargetName="AbilitySelectionValue" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>

            <DataTrigger Value="False">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="SelectedFeatDetails.FeatSkills.SelectedSkillCount"/>
                        <Binding Path="SelectedFeatDetails.FeatSkills.MaxSelectedSkillCount"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="SkillSelectionTitle" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
                <Setter TargetName="SkillSelectionValue" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>
