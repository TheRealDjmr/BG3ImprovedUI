<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"

                    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
                    xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
					mc:Ignorable="d">

    <!-- MOD START - Custom modded icon files to load -->
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="../Library/IUI_ClassIcons.xaml"/>
		<ResourceDictionary Source="../Library/IUI_RaceIcons.xaml"/>
		<ResourceDictionary Source="../Library/IUI_ActionResourceIcons.xaml"/>
		<ResourceDictionary Source="../Library/IUI_BackgroundIcons.xaml"/>
    </ResourceDictionary.MergedDictionaries>
	<!-- MOD END -->

    <System:TimeSpan x:Key="DefaultButtonTapTime">0:0:0.3</System:TimeSpan>
    
    <System:Double x:Key="HotBarSlotWidth">88</System:Double>
    <System:Double x:Key="HotBarSlotHeight">88</System:Double>
    <System:Double x:Key="HotBarIconWidth">80</System:Double>
    <System:Double x:Key="HotBarIconHeight">80</System:Double>
    
    <System:Int32 x:Key="MaxDisplayedStatusesTurnOrder">2</System:Int32>
    <System:Int32 x:Key="InverseMaxDisplayedStatusesTurnOrder">-2</System:Int32>
    
    <KeyTime x:Key="LevelUpArrowAnimationFrame1">0:0:0.0</KeyTime>
    <KeyTime x:Key="LevelUpArrowAnimationFrame2">0:0:2.0</KeyTime>
    <KeyTime x:Key="LevelUpArrowAnimationFrame3">0:0:2.2</KeyTime>
    <KeyTime x:Key="LevelUpArrowAnimationFrame4">0:0:2.4</KeyTime>

    <BitmapImage  x:Key="LightSourceIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_torch_d.png" />
    
    <BitmapImage  x:Key="GoldIconImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_gold.png" />
    <BitmapImage x:Key="ConcentrationBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/hud_target_CharacterConcentration.png"/>
    <BitmapImage x:Key="AvatarConcentrationBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/hud_target_AvatarConcentration.png"/>
    <BitmapImage x:Key="EnemyConcentrationBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/hud_target_EnemyConcentration.png"/>
    <BitmapImage x:Key="MapMarkerGlow" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/marker_glow.png"/>

    <Style x:Key="ManagedTooltipStyle" TargetType="ls:LSTooltip" BasedOn="{StaticResource {x:Type ls:LSTooltip}}">
        <Setter Property="Content" Value="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
        <!-- ToolTipService.HorizontalOffset doesn't work, so we need to set the HorizontalOffset in the tooltip instead -->
        <Setter Property="HorizontalOffset" Value="{Binding (ToolTipService.HorizontalOffset), RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
    </Style>

    <ls:LSTooltip x:Key="ManagedTooltip" IsHitTestVisible="False" Style="{StaticResource ManagedTooltipStyle}"/>

    <Style x:Key="RomanNumeralLevelImage" TargetType="Image">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Level}" Value="0">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="1">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/num_01.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="2">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/num_02.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="3">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/num_03.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="4">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/num_04.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="5">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/num_05.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="6">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/num_06.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="7">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/num_07.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="8">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/num_08.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="9">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/num_09.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="10">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/num_10.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Section styles -->

    <!-- MOD START - Custom modded action resources -->
	<Style TargetType="Image" x:Key="ActionResourceTypeIdToSource" BasedOn="{StaticResource IUI_ActionResourceTypeIdToSource}"/>
	<Style TargetType="Image" x:Key="SectionImageStyle" BasedOn="{StaticResource IUI_SectionImageStyle}"/>
	<!-- MOD END -->

	<!-- MOD START - Custom backgrounds, taken directly from DefaultTheme.Styles and just overwritten here -->
	<Style x:Key="BackgroundIconStyle" TargetType="Rectangle" BasedOn="{StaticResource IUI_BackgroundIconStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Guid}" Value="633aa4be-365f-4358-ba56-e2b85f9a88ec">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Acolyte.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="38c7c859-c284-4df2-b17f-6199edc40e6b">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Astarion.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>            
            <DataTrigger Binding="{Binding Guid}" Value="76925f0b-3ec8-4f42-86a9-cd4f745af2ac">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Charlatan.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="e8c84134-5e91-4ecc-881a-efc47680129b">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Criminal.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="229775c9-3044-4779-a3bb-532c39238e03">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Entertainment.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="efcb0b57-5d5a-4a54-a7b3-a618829fe379">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Folk_Hero.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="5426bad7-d02e-4884-aa2c-382d40f611bf">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Gale.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>            
            <DataTrigger Binding="{Binding Guid}" Value="e9aeac40-6c4e-4d81-9a24-e9eeb6208e85">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Guild_Artisan.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="da427b49-2732-43a0-808c-c8987de56251">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Halsin.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>            
            <DataTrigger Binding="{Binding Guid}" Value="20d865ea-03bd-47bf-97d3-777e1b36b073">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/HauntedOne.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="a1dab8dc-3be9-4062-b4db-a640230bba61">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Hermit.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="1441d9c8-c117-47c9-858d-588cd003192e">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Jaheira.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="7e9fc515-6c03-47d0-952f-f346128d56e6">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Karlach.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="a16099db-2d25-4d02-bf66-476302beb66e">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Laezel.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="dba0a9d1-15bd-4061-99f2-f1ec0f758258">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Minsc.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="38a3fe7a-59f4-4dbf-88e1-6e9b62e74ff1">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Minthara.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="7e820dee-a8fc-43b2-8661-2b404454bade">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Noble.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="5b1e726f-52bf-4e93-a798-9f93c067ee7f">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Outlander.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="8807a6c6-d8cf-494b-aec2-cc01d7517a56">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Sage.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="7a7be1dc-4bf7-49a0-bc33-31440b68c035">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Sailor.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="aa8ee193-973a-4d2b-906f-3f8488a75f2c">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Shadowheart.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="1252a86e-9baa-4ccb-b8ce-2378ae006f0b">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Soldier.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="ac38525a-222b-4280-9c8e-60d5533b675c">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Urchin.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="30a9679f-be5b-4484-9c8e-e5edc9245f53">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_backgrounds/Wyll.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>            
        </Style.Triggers>
    </Style>
	<!-- MOD END -->

    <ControlTemplate x:Key="CharacterClassList">
        <ItemsControl AlternationCount="{Binding Stats.ClassList.Count}" ItemsSource="{Binding Stats.ClassList}" HorizontalAlignment="Center">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding ClassDisplayName}" Foreground="{DynamicResource LS_ActivePanelFontColor}"/>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </ControlTemplate>

    <Style x:Key="PortraitGridStyle" TargetType="Grid">
        <Setter Property="Opacity" Value="1"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsCurrentTurn}" Value="False"/>
                    <Condition Binding="{Binding InTurnBasedMode}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Opacity" Value="0.65"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AbilityIconStatStyle" TargetType="Image">
        <Setter Property="Stretch" Value="None"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IDString}" Value="Strength">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/strength.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Constitution">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/constitution.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Dexterity">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/dexterity.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Intelligence">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/intelligence.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Wisdom">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/wisdom.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Charisma">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/charisma.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

	<!-- MOD START - Custom Class icons -->
	<Style x:Key="MainClassIconStyle" TargetType="Image" BasedOn="{StaticResource IUI_MainClassIconStyle}"/>
	<Style x:Key="MainClassIconHotbarStyle" TargetType="Image" BasedOn="{StaticResource IUI_MainClassIconHotbarStyle}"/>
	<Style x:Key="ClassIconStyle" TargetType="Image" BasedOn="{StaticResource IUI_ClassIconStyle}"/>
	<Style x:Key="ClassIconHotbarStyle" TargetType="Image" BasedOn="{StaticResource IUI_ClassIconHotbarStyle}"/>
	<!-- MOD END -->

    <!-- MOD START - Custom Race icons -->
	<Style x:Key="RaceIconStyle" TargetType="Rectangle" BasedOn="{StaticResource IUI_RaceIconStyle}">
    <!-- MOD END -->
        <Style.Triggers>
            <DataTrigger Binding="{Binding Guid}" Value="9c61a74a-20df-4119-89c5-d996956b6c66">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Dragonborn.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="fdae09c5-7bfc-47bc-8996-01f797e0c170">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Dragonborn_Black.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="2103e15a-1eae-4dc0-a9b7-3b96c3a08869">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Dragonborn_Blue.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="32f676f0-41ca-4469-baa6-341d5c95a708">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Dragonborn_Brass.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="48318453-8aa8-4924-827d-173c957ac1de">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Dragonborn_Bronze.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="3f7e4753-277e-4259-9b29-423b9149cfb4">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Dragonborn_Copper.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Guid}" Value="fe648fc4-3bc9-412c-b692-15fecddc3c69">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Dragonborn_Gold.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="d6eadf47-54f7-4b05-84b3-0a83eb88d016">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Dragonborn_Green.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="dff74c31-2ddc-4270-9615-01a1438ee61c">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Dragonborn_Silver.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="cbe10ab9-11a6-450e-844a-175bcca25de7">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Dragonborn_White.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="61a2c59d-fe8d-4644-8d04-6fae2b239eaf">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Dragonborne_Red.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>


            <DataTrigger Binding="{Binding Guid}" Value="4f5d1434-5175-4fa9-b7dc-ab24fba37929">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Drow.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="c5f8ebdd-f4a5-4d2d-9eab-4a8d1b1dd724">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Drow_LolthSworn.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="4d30b4f9-7bb2-4fc2-a7bc-080f116e325a">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Drow_Seldarine.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Guid}" Value="fe584d14-71ea-4bee-8ba0-99f780d4c957">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Duergar.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="0ab2874d-cfdc-405e-8a97-d37bfbb23c52">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Dwarf.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="78f5e3e8-a9f8-4249-8007-84dc922640b2">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Dwarf_GoldHill.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="6e455d3b-293a-420b-baae-74260ed9aebf">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Dwarf_ShieldMountain.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Guid}" Value="6c038dcb-7eb5-431d-84f8-cecfaf1c0c5a">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Elf.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!-- Astarion UndeadHighElfHidden -->
            <DataTrigger Binding="{Binding Guid}" Value="f4792c5f-8740-4f22-b77d-5df1e5753c46">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Elf_HighElf.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Guid}" Value="4fda6bce-0b91-4427-901f-690c2d091c47">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Elf_HighElf.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="a459ba68-a9ec-4c8e-b127-602615f5b4c0">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Elf_WoodElf.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="bdf9b779-002c-4077-b377-8ea7c1faa795">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Githyanki.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="f1b3f884-4029-4f0f-b158-1f9fe0ae5a0d">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Gnome.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Guid}" Value="3560f4a2-c0b8-4f8b-baf8-6b6eaef0c160">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Gnome_Deep.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="0c6f801e-74fc-492a-ab25-3ca9604156b4">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Gnome_Forest.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="2cf6c770-24ab-4608-9617-d1e46c11ab55">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Gnome_Rock.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="45f4ac10-3c89-4fb2-b37d-f973bb9110c0">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Half-Elf.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="30fafb0b-7c8b-4917-bd2a-536233b35d3c">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Half-Elf_HighHalf-Elf.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Guid}" Value="76057327-da03-4398-aaf0-c59345ef3a8b">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Half-Elf_WoodHalf-Elf.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Guid}" Value="e966f47f-998a-41df-ad86-d83b44299efb">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Half-Elf_DrowHalf-Elf.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>


            <DataTrigger Binding="{Binding Guid}" Value="78cd3bcc-1c43-4a2a-aa80-c34322c16a04">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Halfling.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="a8828cb9-589d-489e-8373-6495eb31ffc1">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Halfling_Lightfoot.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="24e075cc-b21e-4639-ac60-fc513083b0e7">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Halfling_Strongheart.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Guid}" Value="5c39a726-71c8-4748-ba8d-f768b3c11a91">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Half-Orc.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="0eb594cb-8820-4be6-a58d-8be7a1a98fba">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Human.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="b6dccbed-30f3-424b-a181-c4540cf38197">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Tiefling.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="3f30547c-248c-4781-b0e3-6ef2ab99426b">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Tiefling_Asmodeus.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Guid}" Value="b03bdf0f-876d-4567-a0a3-28627319c919">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Tiefling_Mephistopeles.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Guid}" Value="88d0d219-9dcb-462b-aab6-ccf31eeee2e3">
                <Setter Property="OpacityMask">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/icons_races/Tiefling_Zariel.png"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

        </Style.Triggers>
    </Style>

    <!-- Character View, Party View Mode Switch Buttons-->


    <Style x:Key="RarityFrameForegroundImageStyle" TargetType="Image">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Rarity}" Value="Uncommon">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_uncommon_front.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Rarity}" Value="Rare">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_rare_front.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Rarity}" Value="VeryRare">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_veryrare_front.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Rarity}" Value="Legendary">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_legendary_front.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsStoryItem}" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_story_front.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ContainerItemBackgroundStyle" TargetType="Image">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="Stretch" Value="None"/>
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_container_back.png"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsContainer}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="RarityFrameBackgroundImageStyle" TargetType="Image">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Rarity}" Value="Uncommon">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_uncommon_back.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Rarity}" Value="Rare">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_rare_back.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Rarity}" Value="VeryRare">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_veryrare_back.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Rarity}" Value="Legendary">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_legendary_back.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsStoryItem}" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_story_back.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BaseInvContainerItemStyle" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="{DynamicResource ScaledNewSlotSize}"/>
        <Setter Property="Height" Value="{DynamicResource ScaledNewSlotSize}"/>
        <Setter Property="noesis:StyleInteraction.Behaviors">
            <Setter.Value>
                <noesis:StyleBehaviorCollection>
                    <ls:MouseModifyBehavior SuppressMouseEvents="{Binding Path=(ls:MultiSelect.IsEnabled) ,RelativeSource={RelativeSource AncestorType=ListBoxItem}}"/>
                </noesis:StyleBehaviorCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="noesis:StyleInteraction.Triggers">
	        <Setter.Value>
		        <noesis:StyleTriggerCollection>
			        <b:EventTrigger EventName="MouseEnter">
				        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
			        </b:EventTrigger>

			        <b:EventTrigger EventName="MouseDoubleClick" >
				        <b:InvokeCommandAction Command="{Binding DataContext.UseGameObject, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Object}" />
			        </b:EventTrigger>
		        </noesis:StyleTriggerCollection>
	        </Setter.Value>
        </Setter>
        <Setter Property="ls:ContextMenuService.Context" Value="Inventory"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <ls:LSEntityObject x:Name="CellRoot" Context="{Binding (ls:ContextMenuService.Context) , RelativeSource={RelativeSource Mode=TemplatedParent} }" ls:ContextMenuService.GenerateEnabled="False" DataContext="{Binding Object}" EntityRef="{Binding EntityHandle}" Background="Transparent" ToolTipService.Placement="Right">
                        <ls:LSEntityObject.ToolTip>
                            <ls:LSTooltip Content="{Binding DataContext.Object,RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                        </ls:LSEntityObject.ToolTip>
	                    <b:Interaction.Behaviors>
                            <ls:ContextMenuFillBehavior Context="{Binding (ls:ContextMenuService.Context) , RelativeSource={RelativeSource Mode=TemplatedParent} }" Player="{Binding DataContext.CurrentPlayer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" TargetObject="{Binding .}" Source="{Binding SelectedItems,RelativeSource={RelativeSource AncestorType=ListBox}}" Command="{Binding DataContext.ContextActionPressed, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
	                    </b:Interaction.Behaviors>
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="MouseEnter">
                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="DragEnter">
                                <b:InvokeCommandAction Command="{Binding DataContext.UpdateDragErrorCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Path=DataContext.Object, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="DragLeave">
                                <b:InvokeCommandAction Command="{Binding DataContext.UpdateDragErrorCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{x:Null}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                        <ContentPresenter  IsHitTestVisible="False"/>
                        <Image x:Name="SelectedImg" Source="{StaticResource InvSlot_Selector}" IsHitTestVisible="False" Visibility="Hidden" Opacity="1.0" />
                        <Rectangle x:Name="LockForeground" Fill="{StaticResource LS_DisabledPanelColor}" Visibility="Collapsed"/>
                    </ls:LSEntityObject>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible" />
                            <Setter TargetName="SelectedImg" Property="Opacity" Value="0.8"/>
                        </Trigger>
	                    <Trigger Property="IsMouseOver" Value="True">
		                    <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible" />
		                    <Setter TargetName="SelectedImg" Property="Opacity" Value="1.0"/>
	                    </Trigger>
                        <DataTrigger Binding="{Binding Object.IsGroupingBlocked}" Value="True">
                            <Setter TargetName="LockForeground" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InvContainerListBoxItemStyle" TargetType="ListBoxItem"  BasedOn="{StaticResource BaseInvContainerItemStyle}">
        <Setter Property="ls:ContextMenuService.Context" Value="{Binding DataContext.ContainerContext,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
        <Setter Property="noesis:StyleInteraction.Triggers">
	        <Setter.Value>
                <noesis:StyleTriggerCollection>
	                <b:EventTrigger EventName="MouseDoubleClick" >
		                <b:Interaction.Behaviors>
			                <b:ConditionBehavior>
				                <b:ConditionalExpression>
					                <b:ComparisonCondition LeftOperand="{Binding DataContext.IsSubContainer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="False"/>
				                </b:ConditionalExpression>
			                </b:ConditionBehavior>
		                </b:Interaction.Behaviors>
		                <b:InvokeCommandAction Command="{Binding DataContext.TakeItemCommand.ActionCommand,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Object}" />
	                </b:EventTrigger>

	                <b:EventTrigger EventName="MouseDoubleClick" >
		                <b:Interaction.Behaviors>
			                <b:ConditionBehavior>
				                <b:ConditionalExpression>
					                <b:ComparisonCondition LeftOperand="{Binding DataContext.IsSubContainer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="True"/>
				                </b:ConditionalExpression>
			                </b:ConditionBehavior>
		                </b:Interaction.Behaviors>
		                <b:InvokeCommandAction Command="{Binding DataContext.UseGameObject, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Object}" />
	                </b:EventTrigger>
                </noesis:StyleTriggerCollection>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InventoryWaresCellItemImageStyle" TargetType="Image">
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_tab_wares.png" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Visibility" Value="Hidden" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsWare}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="InventoryCellLabelStyle" TargetType="Label"  BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Content" Value="{Binding Count, Converter={StaticResource AbbreviateNumberConverter}}" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="Foreground" Value="{DynamicResource LS_PrimaryColor}" />
        <Setter Property="FontSize" Value="{DynamicResource SmallFontSize}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="noesis:Text.Stroke" Value="Black" />
        <Setter Property="noesis:Text.StrokeThickness" Value="8" />
        <Setter Property="Visibility" Value="Visible" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Count}" Value="1">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--used for all texts in cells or slots like items, spells etc to have a consistent stroke everywhere -->
    <Style x:Key="CellTextStyle" TargetType="TextBlock" >
	    <Setter Property="noesis:Text.Stroke" Value="#FF000000"/>
	    <Setter Property="noesis:Text.StrokeThickness" Value="4"/>
	    <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
    </Style>

    <Style x:Key="EquippedTextStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CellTextStyle}">
        <Setter Property="Foreground" Value="{StaticResource LS_tint100}" />
	    <Setter Property="IsHitTestVisible" Value="False" />
	    <Setter Property="FontSize" Value="{DynamicResource ScaledLargeFontSize}"/>
    </Style>

    <Style x:Key="ItemAmountTextStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CellTextStyle}">
	    <Setter Property="noesis:Text.StrokeThickness" Value="8"/>
	    <Setter Property="FontSize" Value="{DynamicResource ScaledMediumFontSize}"/>
        <Setter Property="IsHitTestVisible" Value="False" />
    </Style>

    <Style x:Key="NewInventoryCellItemStyle" TargetType="Control">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Image x:Name="NewItemIcon" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_new.png" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None"/>
                        <Image x:Name="AnimatedImage" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_new_h.png" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Visibility="Collapsed" Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsNew}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <BeginStoryboard.Storyboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="AnimatedImage" RepeatBehavior="3x">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard.Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <Setter TargetName="AnimatedImage" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Margin" Value="0,-16,0,0" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsNew}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ContainerItemCountItemStyle" TargetType="Control">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <b:Interaction.Behaviors>
                            <ls:InventoriesMergerBehavior x:Name="InventoriesMerger" Inventories="{Binding Inventories}"/>
                        </b:Interaction.Behaviors>
                        <TextBlock Style="{StaticResource ItemAmountTextStyle}" Text="{Binding InventoriesSlots.Count, ElementName=InventoriesMerger}" Visibility="{Binding InventoriesSlots.Count, ElementName=InventoriesMerger, Converter={StaticResource CountToVisibilityConverter}}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Margin" Value="0,-16,0,0" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsContainer}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ContainerCellItemStyle" TargetType="Control">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Image x:Name="ContainerIcon" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_container_more_d.png" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None"/>
                        <Image x:Name="NewItemInsideIcon" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_container_more_new1.png" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Visibility="Collapsed"/>
                        <Image x:Name="AnimatedImage" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_container_more_new2.png" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Visibility="Collapsed" Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding NewItemsInside, FallbackValue=False}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <BeginStoryboard.Storyboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="AnimatedImage" RepeatBehavior="3x">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard.Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <Setter TargetName="NewItemInsideIcon" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="AnimatedImage" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContainerIcon" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsContainer, FallbackValue=False}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <ControlTemplate x:Key="InventoryInUseSlotIndicator">
        <Rectangle Name="active" Fill="White" Visibility="{Binding IsInUse, Converter={StaticResource BoolToVisibleConverter}}">
            <Rectangle.Triggers>
                <EventTrigger RoutedEvent="Rectangle.Unloaded">
                    <StopStoryboard BeginStoryboardName="InUseSlotIndicatorAnim" />
                </EventTrigger>
            </Rectangle.Triggers>
        </Rectangle>
        <ControlTemplate.Triggers>
            <Trigger Property="Visibility" Value="Visible" SourceName="active">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="InUseSlotIndicatorAnim">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="active" Storyboard.TargetProperty="Opacity" From="0.70" To="0.50" Duration="0:0:0.5" AutoReverse="True" RepeatBehavior="Forever">
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase EasingMode="EaseInOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="InUseSlotIndicatorAnim" />
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="EquippedTorchIcon" DataType="{x:Type ls:VMItem}">
       
        <Image x:Name="icon" Source="{StaticResource LightSourceIcon}" Width="44" Height="44" Stretch="Fill" Visibility="Collapsed"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding EquippedAsTorch}" Value="ThisEquipped">
                <Setter TargetName="icon" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding EquippedAsTorch}" Value="OtherEquipped">
                <Setter TargetName="icon" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="Template.GameObject" DataType="ls:VMGameObject">
        <Grid x:Name="rootGrid" Width="{DynamicResource ScaledNewSlotSize}" Height="{DynamicResource ScaledNewSlotSize}" >
            <Image Style="{StaticResource ContainerItemBackgroundStyle}" Stretch="Fill" Width="{DynamicResource ScaledNewItemIconSizeHighlight}" Height="{DynamicResource ScaledNewItemIconSizeHighlight}"/>
			<Image Style="{StaticResource RarityFrameBackgroundImageStyle}" Stretch="Fill" Width="{DynamicResource ScaledNewItemIconSizeHighlight}" Height="{DynamicResource ScaledNewItemIconSizeHighlight}"/>
            <Rectangle Fill="{Binding Icon}" Width="{DynamicResource ScaledNewItemIconSize}" Height="{DynamicResource ScaledNewItemIconSize}" IsHitTestVisible="False" />
            <Viewbox x:Name="ItemAmountHolder" Width="{DynamicResource ScaledNewSlotSize}" HorizontalAlignment="Right" VerticalAlignment="Bottom" Visibility="{Binding Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter=1}" StretchDirection="DownOnly">
                <TextBlock x:Name="ItemAmount" Text="{Binding Count, Converter={StaticResource AbbreviateNumberConverter}}" Style="{StaticResource ItemAmountTextStyle}" Margin="8,0"/>
            </Viewbox>
            <Image Style="{StaticResource RarityFrameForegroundImageStyle}" Stretch="Fill" Width="{DynamicResource ScaledNewItemIconSizeHighlight}" Height="{DynamicResource ScaledNewItemIconSizeHighlight}"/>
            <Image x:Name="WaresIcon" HorizontalAlignment="Center" VerticalAlignment="Center" Style="{StaticResource InventoryWaresCellItemImageStyle}"/>
            <ContentPresenter ContentTemplate="{StaticResource EquippedTorchIcon}" Content="{Binding .}" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0,4,4,0"/>
            <Control Style="{StaticResource ContainerCellItemStyle}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,4,4,0"/>
            <Control Style="{StaticResource ContainerItemCountItemStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,3,9,0"/>
        </Grid>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding DataContext.IsInventoryLocked, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Value="True"/>
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                <Binding Path="DataContext.OwnerUserID" RelativeSource="{RelativeSource AncestorType={x:Type ItemsControl}}"/>
                                <Binding Path="DataContext.CurrentPlayer.UserId" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="rootGrid" Property="Effect">
                    <Setter.Value>
                        <ls:SaturationEffect Saturation="0.3"/>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="Template.ItemEquipment" DataType="{x:Type ls:VMItem}">
        <Grid x:Name="rootGrid" Width="{DynamicResource ScaledNewSlotSize}" Height="{DynamicResource ScaledNewSlotSize}">
            <Image Style="{StaticResource RarityFrameBackgroundImageStyle}" Stretch="Fill" Width="{DynamicResource ScaledNewItemIconSizeHighlight}" Height="{DynamicResource ScaledNewItemIconSizeHighlight}"/>
            <Rectangle Fill="{Binding Icon}" Width="{DynamicResource ScaledNewItemIconSize}" Height="{DynamicResource ScaledNewItemIconSize}" IsHitTestVisible="False" />
            <Image Style="{StaticResource RarityFrameForegroundImageStyle}" Stretch="Fill" Width="{DynamicResource ScaledNewItemIconSizeHighlight}" Height="{DynamicResource ScaledNewItemIconSizeHighlight}"/>
            <Image x:Name="WaresIcon" HorizontalAlignment="Center" VerticalAlignment="Center" Style="{StaticResource InventoryWaresCellItemImageStyle}"/>
            <ContentPresenter ContentTemplate="{StaticResource EquippedTorchIcon}" Content="{Binding .}" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0,4,4,0"/>
        </Grid>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding DataContext.IsInventoryLocked, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Value="True"/>
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                <Binding Path="DataContext.OwnerUserID" RelativeSource="{RelativeSource AncestorType={x:Type ItemsControl}}"/>
                                <Binding Path="DataContext.CurrentPlayer.UserId" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="rootGrid" Property="Effect">
                    <Setter.Value>
                        <ls:SaturationEffect Saturation="0.3"/>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="Template.ItemContainer" DataType="{x:Type ls:VMItem}">
        <Grid x:Name="rootGrid" Width="{DynamicResource ScaledNewSlotSize}" Height="{DynamicResource ScaledNewSlotSize}">
            <Image Style="{StaticResource ContainerItemBackgroundStyle}" Stretch="Fill" Width="{DynamicResource ScaledNewItemIconSizeHighlight}" Height="{DynamicResource ScaledNewItemIconSizeHighlight}"/>
            <Rectangle Fill="{Binding Icon}" Width="{DynamicResource ScaledNewItemIconSize}" Height="{DynamicResource ScaledNewItemIconSize}" IsHitTestVisible="False" />
            <ContentPresenter ContentTemplate="{StaticResource EquippedTorchIcon}" Content="{Binding .}" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0,4,4,0"/>
            <Control Style="{StaticResource ContainerCellItemStyle}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,4,4,0"/>
            <Control Style="{StaticResource ContainerItemCountItemStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,3,9,0"/>
        </Grid>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding DataContext.IsInventoryLocked, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Value="True"/>
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                <Binding Path="DataContext.OwnerUserID" RelativeSource="{RelativeSource AncestorType={x:Type ItemsControl}}"/>
                                <Binding Path="DataContext.CurrentPlayer.UserId" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="rootGrid" Property="Effect">
                    <Setter.Value>
                        <ls:SaturationEffect Saturation="0.3"/>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="Template.Item" DataType="{x:Type ls:VMItem}">
        <Grid x:Name="rootGrid" Width="{DynamicResource ScaledNewSlotSize}" Height="{DynamicResource ScaledNewSlotSize}">
            <Image Style="{StaticResource RarityFrameBackgroundImageStyle}" Stretch="Fill" Width="{DynamicResource ScaledNewItemIconSizeHighlight}" Height="{DynamicResource ScaledNewItemIconSizeHighlight}"/>
            <Rectangle Fill="{Binding Icon}" Width="{DynamicResource ScaledNewItemIconSize}" Height="{DynamicResource ScaledNewItemIconSize}" IsHitTestVisible="False" />
            <Viewbox x:Name="ItemAmountHolder" Width="{DynamicResource ScaledNewSlotSize}" HorizontalAlignment="Right" VerticalAlignment="Bottom" Visibility="{Binding Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter=1}" StretchDirection="DownOnly">
                <TextBlock x:Name="ItemAmount" Text="{Binding Count, Converter={StaticResource AbbreviateNumberConverter}}" Style="{StaticResource ItemAmountTextStyle}" Margin="8,0"/>
            </Viewbox>
            <Image Style="{StaticResource RarityFrameForegroundImageStyle}" Stretch="Fill" Width="{DynamicResource ScaledNewItemIconSizeHighlight}" Height="{DynamicResource ScaledNewItemIconSizeHighlight}"/>
            <Image x:Name="WaresIcon" HorizontalAlignment="Center" VerticalAlignment="Center" Style="{StaticResource InventoryWaresCellItemImageStyle}"/>
        </Grid>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding DataContext.IsInventoryLocked, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Value="True"/>
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                <Binding Path="DataContext.OwnerUserID" RelativeSource="{RelativeSource AncestorType={x:Type ItemsControl}}"/>
                                <Binding Path="DataContext.CurrentPlayer.UserId" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="rootGrid" Property="Effect">
                    <Setter.Value>
                        <ls:SaturationEffect Saturation="0.3"/>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="Template.InventorySlot" DataType="ls:VMInventorySlot">
        <ContentPresenter x:Name="Presenter" Content="{Binding Object}" ContentTemplate="{StaticResource Template.GameObject}" />

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Object.Type}" Value="Item">
                <Setter TargetName="Presenter" Property="ContentTemplate" Value="{StaticResource Template.Item}"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Object.Type}" Value="Item"/>
                    <Condition Binding="{Binding Object.IsEquipment}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Presenter" Property="ContentTemplate" Value="{StaticResource Template.ItemEquipment}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Object.Type}" Value="Item"/>
                    <Condition Binding="{Binding Object.IsContainer}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Presenter" Property="ContentTemplate" Value="{StaticResource Template.ItemContainer}"/>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="InventoryCellTemplate" >
        <!-- This is a ContentControl to facilitate the interaction eventtriggers -->
        <ContentControl x:Name="invCellBase" ToolTipService.Placement="Right" Tag="{Binding DataContext,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
            <Grid>
                <Grid Width="{DynamicResource ItemIconSize}" Height="{DynamicResource ItemIconSize}" DataContext="{Binding Object}">
                    <Image Style="{StaticResource RarityFrameBackgroundImageStyle}"/>
                    <ls:LSEntityObject Context="Inventory" EntityRef="{Binding EntityHandle}" Background="{Binding Icon}">
                        <Image Style="{StaticResource InventoryWaresCellItemImageStyle}"/>
                        <Label Style="{StaticResource InventoryCellLabelStyle}" IsHitTestVisible="False"/>
                        <Control Style="{StaticResource NewInventoryCellItemStyle}" />

                        <!-- Disable slot if the item is in use -->
                        <Control IsHitTestVisible="True" Template="{StaticResource InventoryInUseSlotIndicator}"/>

                    </ls:LSEntityObject>
                    <Image Style="{StaticResource RarityFrameForegroundImageStyle}"/>
                </Grid>
                <Image  x:Name="SelectedImg" Source="{StaticResource InvSlot_Selector}" IsHitTestVisible="False" Visibility="Hidden" Stretch="None"/>
            </Grid>
        </ContentControl>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Inventory Grid-->
    <Style TargetType="ListBox" x:Key="InventoryGrid" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible" />
        <Setter Property="ItemsPanel" >
            <Setter.Value>
                <ItemsPanelTemplate>
                    <ls:LSGrid x:Name="InvGrid" Background="{StaticResource InventoryCell2x2Brush}" noesis:Element.PPAAMode="Disabled" SnapsToDevicePixels="True" ContainerData="{Binding }" Columns="{DynamicResource invCols}" Rows="{DynamicResource invRows}" ScrollAmount="114" CellWidth="{DynamicResource InvSlotSize}" CellHeight="{DynamicResource InvSlotSize}" VerticalSpacing="{DynamicResource InvSpacing}" HorizontalSpacing="{DynamicResource InvSpacing}" ActionUpEvent="UIUp" ActionDownEvent="UIDown" ActionRightEvent="UIRight" ActionLeftEvent="UILeft">
                        <ls:LSGrid.Style>
                            <Style TargetType="ls:LSGrid">
                                <Setter Property="Margin" Value="0,4,0,0" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                                        <Setter Property="Margin" Value="0,0,0,0" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ls:LSGrid.Style>
                        <b:Interaction.Behaviors>
                            <ls:DropOnInventoryGridBehavior DropCommand="{Binding DataContext.DropOnInventorySlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            <ls:DragGameObjectGridBehavior/>
                        </b:Interaction.Behaviors>
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="WidgetClosing">
                                <b:InvokeCommandAction Command="{Binding DataContext.ClearInventoryNewFlags, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding }"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSGrid>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Template" Value="{StaticResource InventoryCellTemplate}" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Width" Value="{DynamicResource InvSlotSize}" />
                    <Setter Property="Height" Value="{DynamicResource InvSlotSize}" />
                    <Setter Property="Padding" Value="0" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="VerticalContentAlignment" Value="Top"/>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="Background" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="Background" Value="Transparent" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!--interrupts-->
    <BitmapImage x:Key="QuestionMarkIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions_c/c_ico_reactionAsk_active.png"/>

    <BitmapImage x:Key="ReactionCheckImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/ico_check_d.png"/>
    <BitmapImage x:Key="ReactionCheckImgH" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/ico_check_h.png"/>
    <System:Double x:Key="InterruptIconSize">80</System:Double>
    <System:Double x:Key="InterruptQuestionSize">48</System:Double>
    <System:Double x:Key="InterruptNumberFontSize">32</System:Double>
    <Style x:Key="InterruptIconRootStyle" TargetType="Grid">
        <Setter Property="ToolTipService.Placement" Value="Right"/>
    </Style>
    <DataTemplate x:Key="InterruptIcon" DataType="ls:VMInterrupt">
        <Grid x:Name="InterruptRoot" ToolTip="{StaticResource ManagedTooltip}" Style="{DynamicResource InterruptIconRootStyle}" Background="Transparent">
            <!--size is dynamic since it's different in hotbar-->
            <Rectangle Fill="{Binding Icon}" Width="{DynamicResource InterruptIconSize}" Height="{DynamicResource InterruptIconSize}" />
            <Rectangle x:Name="Overlay" Fill="{StaticResource LS_tint100}" Opacity="0.23" Visibility="Collapsed" noesis:Element.BlendingMode="Additive"/>
            <Image x:Name="QuestionIcon" Stretch="Uniform" Source="{StaticResource QuestionMarkIcon}" Visibility="{Binding Ask,Converter={StaticResource BoolToVisibleConverter}}" VerticalAlignment="Top" HorizontalAlignment="Right" Height="{DynamicResource InterruptQuestionSize}">
                <Image.Effect>
                    <DropShadowEffect BlurRadius="5" ShadowDepth="0" Opacity="1" Color="{StaticResource tint00}"/>
                </Image.Effect>
            </Image>
            <TextBlock x:Name="lvl" Text="{Binding Level , Converter={StaticResource DecimalToRomanConverter}}" Visibility="{Binding Level, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter=1}" FontSize="{DynamicResource InterruptNumberFontSize}" HorizontalAlignment="Right" VerticalAlignment="Bottom" noesis:Text.Stroke="{StaticResource LS_tint00}" noesis:Text.StrokeThickness="4" Margin="0,0,0,-8"/>
            <Rectangle x:Name="DisabledOverlay" Fill="Black" Opacity="0.4" Visibility="Collapsed"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=InterruptRoot}" Value="True">
                <Setter TargetName="Overlay" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Enabled}" Value="False">
                <Setter TargetName="DisabledOverlay" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Available}" Value="False">
                <Setter TargetName="DisabledOverlay" Property="Opacity" Value="0.66"/>
                <Setter TargetName="DisabledOverlay" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CanUse}" Value="False">
                <Setter TargetName="DisabledOverlay" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Name, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="ReactionDecisionPopup" >
                <Setter TargetName="QuestionIcon" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="InterruptToggleBtnTemplate" TargetType="ToggleButton">
        <ControlTemplate.Resources>
            <Style TargetType="TextBlock" >
                <Setter Property="FontSize" Value="{DynamicResource ScaledSmallFontSize}" />
                <Setter Property="TextWrapping" Value="Wrap" />
                <Setter Property="MaxWidth" Value="600" />
                <Setter Property="IsHitTestVisible" Value="False" />
            </Style>
            <BitmapImage x:Key="CheckboxRound_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/checkBoxRound_h.png"/>
            <Style TargetType="ContentPresenter">
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="TextWrapping" Value="Wrap" />
                        <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
                    </Style>
                </Style.Resources>
            </Style>
            <SolidColorBrush x:Key="RowBG_d" Opacity="0.4" Color="{StaticResource accent75Color}"/>
            <SolidColorBrush x:Key="RowBG_h" Opacity="0.6" Color="{StaticResource accent75Color}"/>
            <SolidColorBrush x:Key="RowBG_guest_h" Opacity="0.4" Color="{StaticResource guestAccent100}"/>

            <DataTemplate DataType="ls:VMInterrupt">
                <Grid >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <ContentPresenter x:Name="Icon" Grid.Column="0" Grid.RowSpan="2" ContentTemplate="{StaticResource InterruptIcon}" Content="{Binding .}" IsHitTestVisible="False" Margin="0,0,10,0" VerticalAlignment="Center"/>
                    <TextBlock x:Name="Name" Grid.Column="1" Text="{Binding Name}" Foreground="{StaticResource LS_tint100}" HorizontalAlignment="Left"/>
                    <ItemsControl x:Name="CostList" Grid.Column="1" Grid.Row="1" AlternationCount="{Binding Costs.Count}" ItemsSource="{Binding Costs}" Visibility="{Binding Costs.Count, Converter={StaticResource CountToVisibilityConverter}}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.IsEnabled="True" ToolTipService.Placement="Right" >
                                    <TextBlock Style="{StaticResource SectionResourceNameStyle}" VerticalAlignment="Center" Text="{Binding MaxValue, StringFormat='{}{0}'}" Visibility="{Binding MaxValue, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter='1'}" Margin="0,0,4,0"/>
                                    <Image Stretch="Uniform" Style="{StaticResource SectionImageStyle}" Height="36" Width="36"/>
                                    <TextBlock Style="{StaticResource SectionResourceNameStyle}" VerticalAlignment="Center" Text="{Binding Level, Converter={StaticResource DecimalToRomanConverter}}" Visibility="{Binding Level, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter='1'}"/>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                    <TextBlock x:Name="AvailableMsg" Grid.Column="1" Grid.Row="1" Text="{Binding Source=h7bb323e1g2294g4f5eg905eg82ae9d71abf0,Converter={StaticResource TranslatedStringConverter}}" FontSize="{StaticResource ScaledMediumFontSize}" Foreground="{StaticResource LS_alertTxtColor}" Visibility="Collapsed" MaxWidth="384" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" HorizontalAlignment="Left"/>
                </Grid>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Enabled}" Value="False">
                        <Setter TargetName="Name" Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Available}" Value="False">
                        <Setter TargetName="Name" Property="Foreground" Value="{StaticResource LS_accent00TxtColor}"/>
                        <Setter TargetName="CostList" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="AvailableMsg" Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CanUse}" Value="False">
                        <Setter TargetName="Name" Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </ControlTemplate.Resources>

        <Grid x:Name="rootIntTemp" ToolTipService.IsEnabled="False"  ToolTipService.Placement="Right" ToolTipService.VerticalOffset="-74" Width="700" Margin="0,0,0,6" Background="Transparent">
            <Grid.ToolTip>
                <ls:LSTooltip x:Name="InterruptTooltip" Content="{Binding Path=Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </Grid.ToolTip>
            <Grid>
                <Border x:Name="InterruptBtnBg" BorderBrush="{StaticResource LS_PanelSelectedBorderInverted}" BorderThickness="2" CornerRadius="12" Background="{StaticResource RowBG_d}"/>
                
                <Grid HorizontalAlignment="Left" VerticalAlignment="Center" Margin="12,0,0,0">
                    <Image x:Name="BtnCheckBG" Source="{StaticResource CheckboxRound_h}" Stretch="None">
                        <Image.Effect>
                            <DropShadowEffect BlurRadius="10" ShadowDepth="0" Opacity="1" Color="{StaticResource tint00}"/>
                        </Image.Effect>
                    </Image>
                    <Image x:Name="BtnCheck" Source="{StaticResource ReactionCheckImg}" Stretch="None" Visibility="Visible" Margin="-55"/>
                </Grid>
                <ContentPresenter Margin="60,8,10,8" />
            </Grid>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Content,Converter={StaticResource TypeConverter}, RelativeSource={RelativeSource Mode=Self}}" Value="ls.VMInterrupt">
                <Setter TargetName="rootIntTemp" Property="ToolTipService.ShowOnDisabled" Value="True"/>
                <Setter TargetName="rootIntTemp" Property="ToolTipService.IsEnabled" Value="True"/>
                <Setter TargetName="InterruptTooltip" Property="Content" Value="{Binding Path=Content, RelativeSource={RelativeSource Mode=Self}}" />
            </DataTrigger>

            <!--UNSELECTED DEFAULT-->
            <Trigger Property="IsChecked" Value="False">
                <Setter TargetName="BtnCheck" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="InterruptBtnBg" Property="BorderBrush" Value="{StaticResource LS_PanelBorder}"/>
                <Setter TargetName="InterruptBtnBg" Property="Background" Value="{StaticResource LS_BlackA20}"/>
            </Trigger>
            
            <!--UNSELECTED HOVER-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="BtnCheck" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="BtnCheck" Property="Source" Value="{StaticResource ReactionCheckImg}"/>
                <Setter TargetName="InterruptBtnBg" Property="Background" Value="{StaticResource RowBG_h}"/>
                <Setter TargetName="InterruptBtnBg" Property="BorderBrush" Value="{StaticResource LS_PanelSelectedBorderInverted}"/>
            </MultiTrigger>
            
            <!--OTHER PLAYERS-->
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="BtnCheckBG" Property="Opacity" Value="0.25"/>
                <Setter TargetName="InterruptBtnBg" Property="Background" Value="{StaticResource LS_BlackA20}"/>
            </Trigger>
            
            <!--OTHER PLAYERS SELECTED-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="BtnCheckBG" Property="Opacity" Value="0.25"/>
                <Setter TargetName="InterruptBtnBg" Property="Background" Value="{StaticResource RowBG_guest_h}"/>
            </MultiTrigger>
            
            <!--DISABLED-->
            <DataTrigger Binding="{Binding Available}" Value="False">
                <Setter TargetName="BtnCheck" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="InterruptBtnBg" Property="BorderBrush" Value="{StaticResource LS_tint20}"/>
                <Setter TargetName="InterruptBtnBg" Property="BorderThickness" Value="1"/>
                <Setter TargetName="InterruptBtnBg" Property="Background" Value="{StaticResource LS_BlackA20}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    
    <!-- HotBar BEGIN -->

    <ControlTemplate x:Key="HotBarActiveSlotIndicator">
        <ControlTemplate.Resources>
            <BitmapImage x:Key="AnimSelectedImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/animSelected.png"/>
        </ControlTemplate.Resources>
        <Canvas Margin="5,5,0,0">
            <ls:AnimatedImage x:Name="PassiveEnergyFill" Template="{StaticResource BaseAnimatedImage}" Canvas.Top="-63" Canvas.Left="-72" ClipSize="215,215" RepeatBehavior="Forever" Time="0:0:0.033" LastFrame="59"
                              Source="{StaticResource AnimSelectedImg}"/>
        </Canvas>
    </ControlTemplate>

    <ControlTemplate x:Key="HotBarActiveSlotIndicatorPassive">
        <Ellipse Name="PassiveSlotAnimFrame" StrokeThickness="4" Visibility="{Binding IsActive, Converter={StaticResource BoolToVisibleConverter}}">
            <Ellipse.Stroke>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="White" Offset="0"/>
                    <GradientStop Color="Transparent" Offset="1"/>
                </LinearGradientBrush>
            </Ellipse.Stroke>
            <Ellipse.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                    <StopStoryboard BeginStoryboardName="Bsb_Passive"/>
                </EventTrigger>
            </Ellipse.Triggers>
        </Ellipse>
        <ControlTemplate.Triggers>
            <Trigger Property="Visibility" Value="Visible" SourceName="PassiveSlotAnimFrame">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="Bsb_Passive" Storyboard="{StaticResource GradientChaser}"/>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="Bsb_Passive"/>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="HotBarActiveSlotIndicatorMetamagic">
        <ControlTemplate.Resources>
            <BitmapImage x:Key="roundIconCoverImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/roundIconCover.png"/>
            <BitmapImage x:Key="roundEnergyFillImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/roundEnergyFill.png"/>
            <BitmapImage x:Key="roundFlameEdgeImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/roundFlameEdge.png"/>
        </ControlTemplate.Resources>
        <Grid Width="{StaticResource HotBarSlotWidth}" Height="{StaticResource HotBarSlotHeight}">
            <ls:AnimatedImage x:Name="PassiveEnergyFill" Template="{StaticResource BaseAnimatedImage}" ClipSize="80,80" RepeatBehavior="1x" Time="0:0:0.033" Source="{StaticResource roundEnergyFillImg}" Visibility="Collapsed"/>
            <ls:AnimatedImage x:Name="PassiveFlameEdge" Template="{StaticResource BaseAnimatedImage}" ClipSize="80,80" LastFrame="41" RepeatBehavior="Forever" Time="0:0:0.033" Source="{StaticResource roundFlameEdgeImg}" Opacity="0" Visibility="Collapsed"/>
            <Image x:Name="PassiveCover" Source="{StaticResource roundIconCoverImg}" Visibility="Collapsed" Opacity="0" Width="{StaticResource HotBarIconWidth}" Height="{StaticResource HotBarIconHeight}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsActive}" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="PassiveEnergyFill"/>
                <Setter Property="Visibility" Value="Visible" TargetName="PassiveFlameEdge"/>
                <Setter Property="Visibility" Value="Visible" TargetName="PassiveCover"/>
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="FadeInPassiveFlameEdge">
                        <Storyboard RepeatBehavior="1x">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PassiveFlameEdge">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard x:Name="FadeInOutPassiveCover">
                        <Storyboard RepeatBehavior="1x">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PassiveCover">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>

                    <BeginStoryboard x:Name="LoopPassiveCover">
                        <Storyboard RepeatBehavior="Forever" BeginTime="0:0:0.5">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PassiveCover">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.2"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.2"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="FadeInPassiveFlameEdge"/>
                    <StopStoryboard BeginStoryboardName="FadeInOutPassiveCover"/>
                    <StopStoryboard BeginStoryboardName="LoopPassiveCover"/>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="EquippedItemIconIndicator">
        <ControlTemplate.Resources>
            <BitmapImage x:Key="SelfEquippedIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_EQ_selected.png"/>
            <BitmapImage x:Key="PartyEquippedIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_EQ_party.png"/>
            <BitmapImage x:Key="CoopEquippedIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_EQ_coop.png"/>
            <System:Double x:Key="IconHeight">28</System:Double>
            <System:Double x:Key="IconWidth">36</System:Double>
        </ControlTemplate.Resources>

        <Image x:Name="icon" Stretch="Uniform" Width="{DynamicResource IconWidth}" Height="{DynamicResource IconHeight}" Source="{StaticResource CoopEquippedIcon}"/>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Equipped}" Value="NotEquipped">
                <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource ListContainsItemConverter}">
                        <Binding Path="DataContext.CurrentPlayer.AssignedCharacters" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                        <Binding Path="EquippedBy"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="icon" Property="Source" Value="{StaticResource PartyEquippedIcon}"/>
            </DataTrigger>

            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="EquippedBy"/>
                        <Binding Path="DataContext.CurrentPlayer.SelectedCharacter" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="icon" Property="Source" Value="{StaticResource SelfEquippedIcon}"/>
            </DataTrigger>

            <!-- Trade conditions -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding DataContext.CurrentTradingCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                <Binding Path="DataContext.CurrentTradingCharacter" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                <Binding Path="DataContext.PlayerTraderCharacter" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="icon" Property="Source" Value="{StaticResource PartyEquippedIcon}"/>
            </MultiDataTrigger>

            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="EquippedBy"/>
                        <Binding Path="DataContext.CurrentTradingCharacter" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="icon" Property="Source" Value="{StaticResource SelfEquippedIcon}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Hotbar slot Representation START-->
    <ControlTemplate x:Key="HotbarSlotGlow">
        <ControlTemplate.Resources>
            <BitmapImage x:Key="MetamagicEnergyFillImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/squareEnergyFill.png"/>
            <BitmapImage x:Key="FadeFlameEdgeImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/squareFlameEdge.png"/>
            <BitmapImage x:Key="MetaMagicCoverImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/squareIconCover.png"/>
        </ControlTemplate.Resources>
        <Grid>
            <!-- The borders are here because only one storyboard can manipulate a property at a time, so even starting a storyboard with a start delay, the storyboard will already take ownership of the property -->
            <Border x:Name="FadeFlameEdge" Visibility="Collapsed">
                <ls:AnimatedImage x:Name="MetamagicFlameEdge" Template="{StaticResource BaseAnimatedImage}" ClipSize="80,80" LastFrame="45" RepeatBehavior="Forever" Time="0:0:0.033" Source="{StaticResource FadeFlameEdgeImg}"/>
            </Border>

            <Border x:Name="FadeCover" Visibility="Collapsed">
                <Image x:Name="MetamagicCover" Source="{StaticResource MetaMagicCoverImg}" />
            </Border>
            <Border x:Name="EnergyFill" Visibility="Collapsed">
                <ls:AnimatedImage x:Name="MetamagicEnergyFill" Template="{StaticResource BaseAnimatedImage}" ClipSize="80,80" RepeatBehavior="1x" Time="0:0:0.033" Source="{StaticResource MetamagicEnergyFillImg}"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.CurrentSpellTask, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource NullToBoolTrueConverter}}" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="EnergyFill"/>
                <Setter Property="Visibility" Value="Visible" TargetName="FadeFlameEdge"/>
                <Setter Property="Visibility" Value="Visible" TargetName="FadeCover"/>
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="EnergyFillControl">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="EnergyFill">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.55" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard x:Name="FadeInFlameEdge">
                        <Storyboard RepeatBehavior="1x" FillBehavior="Stop">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FadeFlameEdge">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0.9"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard x:Name="FadeInOutCover">
                        <Storyboard RepeatBehavior="1x" BeginTime="0:0:0.0" FillBehavior="Stop">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FadeCover">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0.9"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard x:Name="LoopFlameEdge">
                        <Storyboard RepeatBehavior="Forever" BeginTime="0:0:0.6">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MetamagicFlameEdge">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.9"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.9"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard x:Name="LoopCover">
                        <Storyboard RepeatBehavior="Forever" BeginTime="0:0:0.6">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MetamagicCover">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.6"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.6"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="FadeInFlameEdge"/>
                    <StopStoryboard BeginStoryboardName="FadeInOutCover"/>
                    <StopStoryboard BeginStoryboardName="LoopFlameEdge"/>
                    <StopStoryboard BeginStoryboardName="LoopCover"/>
                    <StopStoryboard BeginStoryboardName="EnergyFillControl"/>
                </DataTrigger.ExitActions>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsActive}" Value="True">
                <Setter Property="Tag" Value="True"/>
            </DataTrigger>
            <!--Tag is used so this can be force enabled when needed (like when selecting upcasts in the hotbar)-->
            <Trigger Property="Tag" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="FadeFlameEdge"/>
                <Setter Property="Visibility" Value="Visible" TargetName="FadeCover"/>
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="FixEdge">
                        <Storyboard RepeatBehavior="1x">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MetamagicFlameEdge">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.9"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.9"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard x:Name="LoopSpellCover">
                        <Storyboard RepeatBehavior="Forever">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MetamagicCover">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.6"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.6"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="FixEdge"/>
                    <StopStoryboard BeginStoryboardName="LoopSpellCover"/>
                </Trigger.ExitActions>
            </Trigger>
            <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                <StopStoryboard BeginStoryboardName="FadeInFlameEdge"/>
                <StopStoryboard BeginStoryboardName="FadeInOutCover"/>
                <StopStoryboard BeginStoryboardName="LoopFlameEdge"/>
                <StopStoryboard BeginStoryboardName="LoopCover"/>
                <StopStoryboard BeginStoryboardName="FixEdge"/>
                <StopStoryboard BeginStoryboardName="LoopSpellCover"/>
                <StopStoryboard BeginStoryboardName="EnergyFillControl"/>
            </EventTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <BitmapImage x:Key="IcoPlusImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_spellSubSelectIndicator.png"/>

    <DataTemplate x:Key="SpellContent" DataType="ls:VMHotBarSlot">
        <Border x:Name="Slot" Panel.ZIndex="0" Width="{StaticResource HotBarSlotWidth}" Height="{StaticResource HotBarSlotHeight}" Background="Transparent">
            <Grid Width="{StaticResource HotBarIconWidth}" Height="{StaticResource HotBarIconHeight}" >
                <Rectangle x:Name="iconHolder" Fill="{Binding Spell.Icon}"/>
                <TextBlock x:Name="SpellSlotLevel" Text="{Binding Spell.SpellSlotLevel, Converter={StaticResource DecimalToRomanConverter}}" Foreground="{StaticResource LS_specialTxtColor}" VerticalAlignment="Bottom" HorizontalAlignment="Right"
                                       Height="35" Margin="0,0,3,0" FontSize="{StaticResource ScaledMediumFontSize}"  noesis:Text.StrokeThickness="5" Visibility="{Binding (ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource BoolToVisibleConverter}}"/>
                <Image x:Name="SubSelectIndicator" Source="{StaticResource IcoPlusImg}" Stretch="None" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,8,8,0" Visibility="Collapsed"/>
                <Control Style="{StaticResource NewInventoryCellItemStyle}"/>
            </Grid>
        </Border>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Spell.IsContainer}" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="SubSelectIndicator" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DataContext.PanelContentType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Spell">
                <Setter Property="Visibility" Value="Collapsed" TargetName="SubSelectIndicator"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                <Setter TargetName="SpellSlotLevel" Property="FontSize" Value="{StaticResource ScaledTinyFontSize}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="ItemContent" DataType="ls:VMHotBarSlot">
        <DataTemplate.Resources>

            <System:Double x:Key="ScaledNewItemIconSize">72</System:Double>
            <System:Double x:Key="ScaledNewItemIconSizeHighlight">73.8</System:Double>
            <System:Double x:Key="ScaledNewSlotSize">79.2</System:Double>
        </DataTemplate.Resources>

        <Border x:Name="Slot" DataContext="{Binding GameObject}" Width="{StaticResource HotBarSlotWidth}" Height="{StaticResource HotBarSlotHeight}" Background="Transparent">
            <Grid x:Name="SlotContent" Width="{StaticResource HotBarIconWidth}" Height="{StaticResource HotBarIconHeight}" VerticalAlignment="Center" HorizontalAlignment="Center">
                <ContentPresenter x:Name="Presenter" Content="{Binding .}" ContentTemplate="{StaticResource Template.GameObject}" />
                <Control x:Name="EquipmentIcon" Template="{StaticResource EquippedItemIconIndicator}" VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="4,0,0,4">
                    <Control.Resources>
                        <System:Double x:Key="IconHeight">42</System:Double>
                        <System:Double x:Key="IconWidth">54</System:Double>
                    </Control.Resources>
                </Control>
                <Image x:Name="SubSelectIndicator" Source="{StaticResource IcoPlusImg}" Stretch="None" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,8,8,0" Visibility="Collapsed" />
            </Grid>
        </Border>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding GameObject.Type}" Value="Item">
                <Setter TargetName="Presenter" Property="ContentTemplate" Value="{StaticResource Template.Item}"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding GameObject.Type}" Value="Item"/>
                    <Condition Binding="{Binding GameObject.IsEquipment}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Presenter" Property="ContentTemplate" Value="{StaticResource Template.ItemEquipment}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding GameObject.Type}" Value="Item"/>
                    <Condition Binding="{Binding GameObject.IsContainer}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Presenter" Property="ContentTemplate" Value="{StaticResource Template.ItemContainer}"/>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="CharacterContent" DataType="ls:VMHotBarSlot">
        <Border x:Name="Slot" Width="{StaticResource HotBarIconWidth}" Height="{StaticResource HotBarIconHeight}">
            <Grid Width="{StaticResource HotBarSlotWidth}" Height="{StaticResource HotBarSlotHeight}" DataContext="{Binding GameObject}">
                <Image Style="{StaticResource RarityFrameBackgroundImageStyle}"/>
                <Rectangle x:Name="iconHolder" Fill="{Binding Icon}"/>
                <Image Style="{StaticResource RarityFrameForegroundImageStyle}"/>
                <Image x:Name="SubSelectIndicator" Source="{StaticResource IcoPlusImg}" Stretch="None" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,8,8,0" Visibility="Collapsed" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="PassiveContent" DataType="ls:VMHotBarSlot">
        <Border x:Name="Slot" Width="{StaticResource HotBarIconWidth}" Height="{StaticResource HotBarIconHeight}">
            <Grid Width="{StaticResource HotBarIconWidth}" Height="{StaticResource HotBarIconHeight}">
                <Ellipse x:Name="passiveIconHolder" Fill="{Binding Passive.Icon}"/>
                <!-- GUS-216305 - Hiding spell slot level, to uncomment or remove according to results -->
                <TextBlock x:Name="SpellSlotLevel" Text="{Binding Spell.SpellSlotLevel, Converter={StaticResource DecimalToRomanConverter}}" Foreground="{StaticResource LS_specialTxtColor}" VerticalAlignment="Bottom" HorizontalAlignment="Right" Height="35"
                                               Margin="0,0,3,0" FontSize="{StaticResource ScaledMediumFontSize}"  noesis:Text.StrokeThickness="5" Visibility="{Binding (ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource BoolToVisibleConverter}}"/>
                <Image x:Name="SubSelectIndicator" Source="{StaticResource IcoPlusImg}" Stretch="None" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,8,8,0" Visibility="Collapsed" />
                <Ellipse Fill="Black" x:Name="disCover" Visibility="Collapsed" Opacity="0.5"/>
                <Control x:Name="ActiveSlotIndicatorPassive" IsHitTestVisible="False" Visibility="Collapsed" Template="{StaticResource HotBarActiveSlotIndicatorPassive}"/>
            </Grid>
        </Border>

        <DataTemplate.Triggers>
            
            <DataTrigger Binding="{Binding IsActive}" Value="True">
                <Setter TargetName="ActiveSlotIndicatorPassive" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="HotBarSlotStyle" TargetType="ls:LSButton" >
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BoundEvent" Value="{Binding BoundEvent}"/>
        <Setter Property="Command" Value="{Binding DataContext.UseSlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
        <Setter Property="CommandParameter" Value="{Binding}"/>
        <Setter Property="SoundID" Value="UI_HUD_HotbarSlot"/>
        <Setter Property="ContentTemplate" Value="{StaticResource SpellContent}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ls:LSButton">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CellTextStyle}">
                            <Setter Property="FontWeight" Value="Bold" />
                        </Style>
                    </ControlTemplate.Resources>

                    <Grid x:Name="Slot" ToolTipService.Placement="Top" ToolTipService.IsEnabled="True" Tag="{Binding IsActive, FallbackValue=False}" ToolTipService.ShowOnDisabled="True" Background="Transparent">
                        <Grid.ToolTip>
                            <ls:LSTooltip x:Name="hbTooltip" Content="{Binding DataContext.Spell, ElementName=Slot}" ls:TooltipExtender.Context="Hotbar" VerticalOffset="-60" />
                        </Grid.ToolTip>
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="MouseEnter">
                                <b:InvokeCommandAction Command="{Binding DataContext.HighlightResourcesCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                                <b:InvokeCommandAction Command="{Binding DataContext.RemoveIsNewFlag, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="MouseEnter">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding SlotType}" Operator="Equal" RightOperand="Item"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:InvokeCommandAction Command="{Binding DataContext.SetDebugUIEntityCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding GameObject.EntityHandle}"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="MouseLeave">
                                <b:InvokeCommandAction Command="{Binding DataContext.ClearResourceHighlightsCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="MouseLeave">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding SlotType}" Operator="Equal" RightOperand="Item"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:InvokeCommandAction Command="{Binding DataContext.ClearDebugUIEntityCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="Unloaded">
                                <b:ChangePropertyAction TargetName="HotbarslotBtn" PropertyName="CommandParameter" Value="{x:Null}"/>
                            </b:EventTrigger>
                            <!-- Start and stop a UI loop sound when non-passive spells are selected/deselected in the hotbar -->
                            <b:DataTrigger Binding="{Binding IsActive}" Value="True">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding SlotType}" Operator="NotEqual" RightOperand="Passive"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <ls:LSPlaySound Sound="UI_HUD_SkillSelect_Default_LoopOn"/>
                            </b:DataTrigger>
                            <b:DataTrigger Binding="{Binding IsActive}" Value="False">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding SlotType}" Operator="NotEqual" RightOperand="Passive"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <ls:LSPlaySound Sound="UI_HUD_SkillSelect_Default_LoopOff"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                        <b:Interaction.Behaviors>
                            <ls:AdornedBehavior AdornerLayerOwner="{Binding RelativeSource={RelativeSource AncestorType=AdornerDecorator}}" IsAdornerVisible="{Binding ElementName=Slot, Path=Tag}">
                                <ls:AdornedBehavior.AdornerStyle>
                                    <Style TargetType="Control">
                                        <Setter Property="Template" Value="{StaticResource HotBarActiveSlotIndicator}"/>
                                        <Setter Property="IsHitTestVisible" Value="False"/>
                                        <Style.Triggers>
                                            <!-- Passives use a border in the template instead of this adorned behavior -->
                                            <DataTrigger Binding="{Binding SlotType}" Value="Passive">
                                                <Setter Property="Template" Value="{x:Null}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Passive.IsMetaMagic}" Value="True">
                                                <Setter Property="Template" Value="{StaticResource HotBarActiveSlotIndicatorMetamagic}" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ls:AdornedBehavior.AdornerStyle>
                            </ls:AdornedBehavior>
                        </b:Interaction.Behaviors>
                        
                        <ContentPresenter x:Name="cnt" />
                        <Rectangle Fill="{StaticResource LS_HoverColor}" x:Name="hover" Visibility="Collapsed"/>
                        <Rectangle x:Name="disCover" Visibility="Collapsed" Opacity="0.5" Fill="Black"/>

                        <!-- Icon glow animation slot (Metamagic, UnlockSpellVariant) -->
                        <Control x:Name="MetaMagicOverlay" IsHitTestVisible="False" Width="{StaticResource HotBarSlotWidth}" Height="{StaticResource HotBarSlotHeight}" Template="{x:Null}"/>
                        <TextBlock x:Name="HotKey" IsHitTestVisible="False" Text="{Binding HotKey}" Margin="4,0,0,-6" HorizontalAlignment="Left" VerticalAlignment="Bottom" FontSize="{StaticResource ScaledSmallFontSize}" Visibility="Collapsed" />

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="hover"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding CanUse}" Value="False">
                            <Setter Property="Visibility" Value="Visible" TargetName="disCover"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding IsVisible,RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter TargetName="Slot" Property="Tag" Value="False"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotIndex, Converter={StaticResource ModuloConverter}, ConverterParameter='2'}" Value="1">
                            <Setter TargetName="hbTooltip" Property="VerticalOffset" Value="-148"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="Character">
                            <Setter TargetName="hbTooltip" Property="Content" Value="{Binding DataContext.GameObject, ElementName=Slot}" />
                            <Setter TargetName="Slot" Property="Tag" Value="False"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="Item">
                            <Setter TargetName="hbTooltip" Property="Content" Value="{Binding DataContext.GameObject, ElementName=Slot}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="Passive">
                            <Setter TargetName="hbTooltip" Property="Content" Value="{Binding DataContext.Passive, ElementName=Slot}" />
                            <Setter TargetName="hover" Property="Clip">
                                <Setter.Value>
                                    <EllipseGeometry RadiusX="44" RadiusY="44" Center="44,44"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="disCover" Property="Clip">
                                <Setter.Value>
                                    <EllipseGeometry RadiusX="44" RadiusY="44" Center="44,44"/>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Keyboard">
                            <Setter Property="Visibility" Value="Visible" TargetName="HotKey"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Name}" Value="">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding CanUse}" Value="False"/>
                                <Condition Binding="{Binding Spell.IsContainer}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Command" Value="{x:Null}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding CanUse}" Value="False"/>
                                <Condition Binding="{Binding Spell.IsContainer}" Value="True"/>
                                <Condition Binding="{Binding DataContext.PanelContentType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Spell"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Command" Value="{x:Null}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive}" Value="True"/>
                                <Condition Binding="{Binding SlotType}" Value="Spell"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Command" Value="{x:Null}"/>
                            <Setter Property="IsEnabled" Value="False"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive}" Value="True"/>
                                <Condition Binding="{Binding SlotType}" Value="Action"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Command" Value="{x:Null}"/>
                            <Setter Property="IsEnabled" Value="False"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive}" Value="True"/>
                                <Condition Binding="{Binding SlotType}" Value="Item"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Command" Value="{x:Null}"/>
                            <Setter Property="IsEnabled" Value="False"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding GameObject.IsModified}" Value="True">
                            <Setter TargetName="MetaMagicOverlay" Property="Template" Value="{StaticResource HotbarSlotGlow}" />
                            <Setter TargetName="Slot" Property="Tag" Value="False"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Spell.IsModified}" Value="True">
                            <Setter TargetName="MetaMagicOverlay" Property="Template" Value="{StaticResource HotbarSlotGlow}" />
                            <Setter TargetName="Slot" Property="Tag" Value="False"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding SlotType}" Value="Item">
                <Setter Property="ContentTemplate" Value="{StaticResource ItemContent}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding SlotType}" Value="Character">
                <Setter Property="ContentTemplate" Value="{StaticResource CharacterContent}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding SlotType}" Value="Passive">
                <Setter Property="ContentTemplate" Value="{StaticResource PassiveContent}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SlotType}" Value="Passive"/>
                    <Condition Binding="{Binding IsActive}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="SoundID" Value="UI_HUD_Passive_Untoggle"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SlotType}" Value="Passive"/>
                    <Condition Binding="{Binding IsActive}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="SoundID" Value="UI_HUD_Passive_Toggle"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SlotType}" Value="Item"/>
                    <Condition Binding="{Binding GameObject.Count}" Value="0"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" Value="Hidden"/>
            </MultiDataTrigger>

            <!-- Weapon actions will open the Weapon filter -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Spell.WeaponActionType}" Value="Melee"/>
                    <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.Equipment.MeleeMainHand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Command" Value="{Binding DataContext.UseMeleeWeaponCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                <Setter Property="CommandParameter" Value="{Binding .}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Spell.WeaponActionType}" Value="Ranged"/>
                    <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.Equipment.RangedMainHand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Command" Value="{Binding DataContext.UseRangedWeaponCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                <Setter Property="CommandParameter" Value="{Binding .}"/>
            </MultiDataTrigger>

            <!-- Arrows will also open the Ranged Weapon filter -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SlotType}" Value="Item"/>
                    <Condition Binding="{Binding GameObject.UseType}" Value="Arrow"/>
                    <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.Equipment.RangedMainHand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Command" Value="{Binding DataContext.UseRangedWeaponCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                <Setter Property="CommandParameter" Value="{Binding .}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Hotbar slot Representation END -->

    <DataTemplate x:Key="TutorialNotification">
        <DataTemplate.Resources>
            <System:TimeSpan x:Key="Lifespan">0:3:0</System:TimeSpan>
        </DataTemplate.Resources>
        <StackPanel x:Name="holder" Orientation="Horizontal" HorizontalAlignment="Right" Visibility="Collapsed">
            <StackPanel.Background>
                <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tutorial/tutorialNotification_bg.png"/>
            </StackPanel.Background>
            <StackPanel.RenderTransform>
                <TranslateTransform />
            </StackPanel.RenderTransform>
            <TextBlock x:Name="text" Text="{Binding Title}" VerticalAlignment="Center" Margin="20" TextWrapping="Wrap"/>
            <ls:LSButton x:Name="playButton"
                                         Command="{Binding DataContext.OpenTutorialPopup, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                         CommandParameter="{Binding}">
                <ls:LSButton.RenderTransform>
                    <TranslateTransform />
                </ls:LSButton.RenderTransform>
                <Grid>
                    <Image x:Name="BtnBg" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_d.png" Stretch="None"/>
                    <Image x:Name="icon" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Tutorial/ico_play_d.png" Stretch="None"/>
                    <Canvas>
                        <Canvas.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="0.86" ScaleY="0.86"/>
                                <RotateTransform Angle="45"/>
                                <TranslateTransform X="38" Y="38"/>
                            </TransformGroup>
                        </Canvas.RenderTransform>
                        <Path x:Name="Path0" Data="F1M0,-36.87a36.87,36.87,0,0,0,0,73.73a36.87,36.87,0,0,0,0,-73.73Z">
                            <Path.Fill>
                                <LinearGradientBrush MappingMode="Absolute" StartPoint="-108.95,39.75" EndPoint="-21.42,42.08">
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.5" Color="#4CFFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.25" Color="#26FFFFFF"/>
                                    <GradientStop Offset="0.5" Color="#4CFFFFFF"/>
                                    <GradientStop Offset="0.75" Color="#26FFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                </LinearGradientBrush>
                            </Path.Fill>
                        </Path>
                        <Path x:Name="Path1" StrokeThickness="4" StrokeMiterLimit="4" Data="M0,-36.87a36.87,36.87,0,0,0,0,73.73a36.87,36.87,0,0,0,0,-73.73Z">
                            <Path.Stroke>
                                <LinearGradientBrush MappingMode="Absolute" StartPoint="-108.95,39.75" EndPoint="-21.42,42.08">
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.5" Color="#F6FFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.24" Color="#7FFFFFFF"/>
                                    <GradientStop Offset="0.48" Color="#FFFFFFFF"/>
                                    <GradientStop Offset="0.74" Color="#7FFFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                </LinearGradientBrush>
                            </Path.Stroke>
                        </Path>

                        <Path x:Name="Path2" Data="F1M0,-36.87a36.87,36.87,0,0,0,0,73.73a36.87,36.87,0,0,0,0,-73.73Z">
                            <Path.Fill>
                                <LinearGradientBrush MappingMode="Absolute" StartPoint="-108.95,39.75" EndPoint="-21.42,42.08">
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.5" Color="#4CFFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.25" Color="#26FFFFFF"/>
                                    <GradientStop Offset="0.5" Color="#4CFFFFFF"/>
                                    <GradientStop Offset="0.75" Color="#26FFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                </LinearGradientBrush>
                            </Path.Fill>
                        </Path>
                        <Path x:Name="Path3" StrokeThickness="4" StrokeMiterLimit="4" Data="M0,-36.87a36.87,36.87,0,0,0,0,73.73a36.87,36.87,0,0,0,0,-73.73Z">
                            <Path.Stroke>
                                <LinearGradientBrush MappingMode="Absolute" StartPoint="-108.95,39.75" EndPoint="-21.42,42.08">
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.5" Color="#F6FFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.24" Color="#7FFFFFFF"/>
                                    <GradientStop Offset="0.48" Color="#FFFFFFFF"/>
                                    <GradientStop Offset="0.74" Color="#7FFFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                </LinearGradientBrush>
                            </Path.Stroke>
                        </Path>
                    </Canvas>
                </Grid>
            </ls:LSButton>
            <b:Interaction.Triggers>
                <b:PropertyChangedTrigger Binding="{Binding Opacity, ElementName=text}">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding Opacity, ElementName=text}" Operator="Equal" RightOperand="0" />
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:InvokeCommandAction Command="{Binding DataContext.RemoveTutorialNotification, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                </b:PropertyChangedTrigger>
                <b:EventTrigger EventName="MouseRightButtonDown">
                    <b:InvokeCommandAction Command="{Binding DataContext.RemoveTutorialNotification, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="Loaded">
                    <ls:LSPlaySound Sound="UI_HUD_TooltipNotificationAppear"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </StackPanel>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding InputType}" Value="TutorialInputKeyboard"/>
                    <Condition Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Keyboard" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="holder" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding InputType}" Value="TutorialInputGamepad"/>
                    <Condition Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="holder" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding InputType}" Value="TutorialInputAll"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="holder" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <Trigger Property="Visibility" Value="Visible">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="ShowAnimation">
                        <BeginStoryboard.Storyboard>
                            <Storyboard Duration="0:0:2.07">
                                <DoubleAnimation Storyboard.TargetName="holder"
                                                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                                                                    Duration="0:0:0.7" From="700" To="0">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Fill.StartPoint" Storyboard.TargetName="Path0">
                                    <DiscretePointKeyFrame KeyTime="0:0:1.13" Value="-108.95,39.75"/>
                                    <LinearPointKeyFrame KeyTime="0:0:1.53" Value="40.25,-0"/>
                                </PointAnimationUsingKeyFrames>
                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Fill.EndPoint" Storyboard.TargetName="Path0">
                                    <DiscretePointKeyFrame KeyTime="0:0:1.13" Value="-21.42,42.08"/>
                                    <LinearPointKeyFrame KeyTime="0:0:1.53" Value="100,0"/>
                                </PointAnimationUsingKeyFrames>
                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Stroke.StartPoint" Storyboard.TargetName="Path1">
                                    <DiscretePointKeyFrame KeyTime="0:0:1" Value="-108.95,39.75"/>
                                    <LinearPointKeyFrame KeyTime="0:0:1.4" Value="40.25,-0"/>
                                </PointAnimationUsingKeyFrames>
                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Stroke.EndPoint" Storyboard.TargetName="Path1">
                                    <DiscretePointKeyFrame KeyTime="0:0:1" Value="-21.42,42.08"/>
                                    <LinearPointKeyFrame KeyTime="0:0:1.4" Value="100,0"/>
                                </PointAnimationUsingKeyFrames>

                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Fill.StartPoint" Storyboard.TargetName="Path2">
                                    <DiscretePointKeyFrame KeyTime="0:0:2.67" Value="-108.95,39.75"/>
                                    <LinearPointKeyFrame KeyTime="0:0:3.07" Value="40.25,-0"/>
                                </PointAnimationUsingKeyFrames>
                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Fill.EndPoint" Storyboard.TargetName="Path2">
                                    <DiscretePointKeyFrame KeyTime="0:0:2.67" Value="-21.42,42.08"/>
                                    <LinearPointKeyFrame KeyTime="0:0:3.07" Value="100,0"/>
                                </PointAnimationUsingKeyFrames>
                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Stroke.StartPoint" Storyboard.TargetName="Path3">
                                    <DiscretePointKeyFrame KeyTime="0:0:2.54" Value="-108.95,39.75"/>
                                    <LinearPointKeyFrame KeyTime="0:0:2.94" Value="40.25,-0"/>
                                </PointAnimationUsingKeyFrames>
                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Stroke.EndPoint" Storyboard.TargetName="Path3">
                                    <DiscretePointKeyFrame KeyTime="0:0:2.54" Value="-21.42,42.08"/>
                                    <LinearPointKeyFrame KeyTime="0:0:2.94" Value="100,0"/>
                                </PointAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>

            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="HideStoryboard">
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="text" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource Lifespan}" Duration="0:0:0.7" From="1" To="0">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseIn"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                                <DoubleAnimation Storyboard.TargetName="playButton" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" BeginTime="{StaticResource Lifespan}" Duration="0:0:0.7" To="-185">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseIn"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                                <DoubleAnimation Storyboard.TargetName="playButton" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" BeginTime="{StaticResource Lifespan}" Duration="0:0:0.7" To="-130">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseIn"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="HideStoryboard"/>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True" SourceName="playButton">
                <Setter TargetName="BtnBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_h.png"/>
                <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tutorial/ico_play_h.png" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" SourceName="playButton">
                <Setter TargetName="BtnBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_p.png" />
                <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tutorial/ico_play_d.png" />
                <Setter TargetName="icon" Property="Margin" Value="0,4,0,0" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>


    <BitmapImage x:Key="BtnMediumRound" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_round_medium_d.png" />

    <!-- Locked bottombar locked bar -->
    <ControlTemplate x:Key="LockHotbarButtonLocked" TargetType="ls:LSButton">
        <Grid>
            <Image x:Name="bg" Source="{StaticResource BtnMediumRound}" Stretch="None"  HorizontalAlignment="Center" VerticalAlignment="Center"/>
            <Image x:Name="img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_lock_enabled_d.png" Stretch="None"  HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_round_medium_h.png" />
                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_lock_enabled_h.png" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_round_medium_p.png" />
                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_lock_enabled_h.png" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- Locked bottombar locked END -->

    <!-- Locked bottombar unlocked -->
    <ControlTemplate x:Key="LockHotbarButtonUnlocked" TargetType="ls:LSButton">
        <Grid>
            <Image x:Name="bg" Source="{StaticResource BtnMediumRound}" Stretch="None"  HorizontalAlignment="Center" VerticalAlignment="Center"/>
            <Image x:Name="img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_lock_disabled_d.png" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_round_medium_h.png" />
                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_lock_disabled_h.png" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_round_medium_p.png" />
                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_lock_disabled_h.png" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- Locked bottombar unlocked END -->

    <!--Inactive Dialogue.InactivePortrait Representation -->
    <DataTemplate x:Key="Dialogue.InactivePortrait" DataType="{x:Type ls:Character}">
        <Button Background="Transparent" Command="{Binding DataContext.SelectCharacter,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}">
            <Button.InputBindings>
                <MouseBinding Gesture="RightClick" Command="{Binding DataContext.SelectCharacter,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
            </Button.InputBindings>
            <Canvas Style="{DynamicResource Dialogue.MiniPortrait.Canvas}" Opacity="0.55">
                <!-- character image -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Border}">
                    <ls:LSEntityObject Margin="0" EntityRef="{Binding EntityHandle}" Background="{Binding Icon}"/>
                </Border>
                <!-- border-->
                <Image>
                    <Image.Style>
                        <Style TargetType="Image">
                            <Setter Property="Width" Value="120"/>
                            <Setter Property="Height" Value="188"/>
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_d.png" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding CharacterType}" Value="Avatar">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_d.png" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>

                <!-- health -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Health}">
                    <ProgressBar Value="{Binding Stats.Health.PercentValue, Mode=OneWay}" Maximum="1" Minimum="0" Background="Black" Foreground="{StaticResource LS_HealthBarForegound}" BorderBrush="{x:Null}"/>
                </Border>
            </Canvas>
        </Button>
    </DataTemplate>
    <!--Inactive Dialogue.InactivePortrait Representation -->

    <!--Inactive Dialogue.ActivePortrait Representation -->
    <DataTemplate x:Key="Dialogue.ActivePortrait"  DataType="{x:Type ls:Character}">
        <DataTemplate.Resources>
            <BitmapImage x:Key="FrameInactive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_h.png"/>
        </DataTemplate.Resources>
        <ContentControl>
            <Canvas Style="{DynamicResource Dialogue.MiniPortrait.Canvas}">
                <!-- character image -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Border}">
                    <ls:LSEntityObject Margin="0" EntityRef="{Binding EntityHandle}" Background="{Binding Icon}"/>
                </Border>

                <!-- border-->
                <Image x:Name="FrameImg" Source="{StaticResource FrameInactive}" Width="120" Height="188"/>

                <!-- health -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Health}">
                    <ProgressBar Value="{Binding Stats.Health.PercentValue, Mode=OneWay}" Maximum="1" Minimum="0" Background="Black" Foreground="{StaticResource LS_HealthBarForegound}" BorderBrush="{x:Null}"/>
                </Border>
            </Canvas>
        </ContentControl>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding CharacterType}" Value="Avatar">
                <Setter TargetName="FrameImg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_h.png" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!--Inactive Dialogue.ActivePortrait Representation -->

    <!--MiniPlayerPortraits END -->

    <!--Speaker selection BEGIN -->

    <ControlTemplate x:Key="CharacterModeIcon">
        <ControlTemplate.Resources>
            <BitmapImage x:Key="IconModeCombat" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/ico_mode_combat.png"/>
        </ControlTemplate.Resources>
        <Image x:Name="Icon" Source="{StaticResource IconModeCombat}" Stretch="None"/>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding CharacterMode}" Value="Idle">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CharacterMode}" Value="InFTB">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/ico_mode_FTB.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CharacterMode}" Value="InDialogue">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/ico_mode_dialogue.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CharacterMode}" Value="InTrade">
                <Setter TargetName="Icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/ico_mode_trade.png"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Action resource UI -->
    <Storyboard x:Key="ActionResources.ActionGroup.ActionPoint.PreviewAnimation" RepeatBehavior="Forever">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Image.Opacity)">
            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
            <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="0.5">
                <EasingDoubleKeyFrame.EasingFunction>
                    <CubicEase EasingMode="EaseInOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
            <EasingDoubleKeyFrame KeyTime="0:0:1.5" Value="1">
                <EasingDoubleKeyFrame.EasingFunction>
                    <CubicEase EasingMode="EaseInOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>
    
    <DataTemplate x:Key="ActionResources.ActionGroup.ActionPoint">
        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
            <Image x:Name="image" Stretch="None" Source="{DynamicResource Highlight}" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Image.RenderTransform>
                    <TransformGroup>
                        <SkewTransform/>
                        <ScaleTransform CenterX="22" CenterY="32"/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Image.RenderTransform>
            </Image>
            <Image x:Name="imageExplosion" Stretch="None" Source="{DynamicResource Highlight}" Opacity="0" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Image.RenderTransform>
                    <TransformGroup>
                        <SkewTransform/>
                        <ScaleTransform CenterX="22" CenterY="32"/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Image.RenderTransform>
            </Image>
        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Available">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Available}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Highlight">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Highlight}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Missing">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Missing}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Used">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Used}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding (ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" Value="NoAnimation">
                <Setter TargetName="imageExplosion" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Used"/>
                    <Condition Binding="{Binding Path=IsActionPointSpent, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="True"/>
                    <Condition Binding="{Binding Path=Visibility, ElementName=imageExplosion}" Value="Visible"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="explodeAnim">
                        <Storyboard RepeatBehavior="1x">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="imageExplosion" Storyboard.TargetProperty="(Image.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1.6"/>
                                <DiscreteDoubleKeyFrame Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="imageExplosion" Storyboard.TargetProperty="(Image.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1.6"/>
                                <DiscreteDoubleKeyFrame Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="imageExplosion" Storyboard.TargetProperty="(Image.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Highlight"/>
                    <Condition Binding="{Binding Path=DataContext.PreviewState, RelativeSource={RelativeSource AncestorType={x:Type ls:LSActionPointResources}}}" Value="Hover"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="previewAnim" Storyboard="{StaticResource ActionResources.ActionGroup.ActionPoint.PreviewAnimation}" Storyboard.TargetName="image"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="previewAnim"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Path=DataContext.PreviewState, RelativeSource={RelativeSource AncestorType={x:Type ls:LSActionPointResources}}}" Value="Inactive">
                <Setter Property="Opacity" Value="0.5"/>
            </DataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="ActionResources.ActionGroup.ActionPointWithBG">
        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
            <Image x:Name="image" Stretch="None" Source="{DynamicResource Highlight}" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Image.RenderTransform>
                    <TransformGroup>
                        <SkewTransform/>
                        <ScaleTransform CenterX="12" CenterY="12"/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Image.RenderTransform>
            </Image>
            <Image x:Name="imageExplosion" Stretch="None" Source="{DynamicResource Highlight}" Opacity="0" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Image.RenderTransform>
                    <TransformGroup>
                        <SkewTransform/>
                        <ScaleTransform CenterX="12" CenterY="12"/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Image.RenderTransform>
            </Image>
        </Grid>


        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Available">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Available}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Highlight">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Highlight}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Missing">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Missing}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Used">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Used}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Used"/>
                    <Condition Binding="{Binding Path=IsActionPointSpent, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="explodeAnim">
                        <Storyboard RepeatBehavior="1x">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="imageExplosion" Storyboard.TargetProperty="(Image.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="2.5"/>
                                <DiscreteDoubleKeyFrame Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="imageExplosion" Storyboard.TargetProperty="(Image.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="2.5"/>
                                <DiscreteDoubleKeyFrame Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="imageExplosion" Storyboard.TargetProperty="(Image.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Highlight"/>
                    <Condition Binding="{Binding Path=DataContext.PreviewState, RelativeSource={RelativeSource AncestorType={x:Type ls:LSActionPointResources}}}" Value="Hover"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="previewAnim" Storyboard="{StaticResource ActionResources.ActionGroup.ActionPoint.PreviewAnimation}" Storyboard.TargetName="image"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="previewAnim"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Path=DataContext.PreviewState, RelativeSource={RelativeSource AncestorType={x:Type ls:LSActionPointResources}}}" Value="Inactive">
                <Setter Property="Opacity" Value="0.5"/>
            </DataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- MOD START - Custom modded action resources -->
	<Style x:Key="ActionResourcesTemplateSelector" TargetType="ls:LSActionPointResources" BasedOn="{StaticResource IUI_ActionResourcesTemplateSelector}"/>
	<!-- MOD END -->

    <!-- Action resource UI END -->

    <!-- Map marker (outside viewport) -->

    <ControlTemplate x:Key="Map.MarkerDataTemplateOutsideViewport" TargetType="{x:Type ls:LSWorldMapMarker}">
        <Canvas x:Name="canvas" ToolTipService.IsEnabled="True">
            <Canvas.ToolTip>
                <ls:LSTooltip Content="{Binding Path=DataContext.Name,ElementName=canvas}"/>
            </Canvas.ToolTip>
            <Canvas x:Name="IconHolder" Width="112" Height="112" Canvas.Left="-56" RenderTransformOrigin="0.5 0.0">
                <Canvas.RenderTransform>
                    <RotateTransform Angle="{Binding Rotation, RelativeSource={RelativeSource TemplatedParent}}"/>
                </Canvas.RenderTransform>
                <Button x:Name="IconBtn" Background="{x:Null}" Command="{Binding DataContext.SetCameraOnGameObject,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                        CommandParameter="{Binding GameObject}"
                        Padding="0" RenderTransformOrigin="0.5 0.5" Canvas.Left="15" Canvas.Top="21">
                    <Button.RenderTransform>
                        <RotateTransform Angle="{Binding CounterRotation, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Button.RenderTransform>
                    <Ellipse x:Name="Icon"  Fill="{Binding GameObject.Icon}" Width="80" Height="80"/>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Click" >
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding Type}" RightOperand="CharacterParty"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding DataContext.SelectCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding GameObject}"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </Button>
            </Canvas>
        </Canvas>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Name}" Value="">
                <Setter TargetName="canvas" Property="ToolTipService.IsEnabled" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Player">
                <Setter TargetName="canvas" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Multiplayer">
                <Setter TargetName="canvas" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterParty">
                <Setter TargetName="canvas" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="QuestMarker">
                <Setter TargetName="canvas" Property="Visibility" Value="Visible"/>
                <Setter TargetName="IconBtn" Property="Command" Value="{x:Null}" />
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.Quest}" />
                <Setter TargetName="Icon" Property="Fill" Value="{StaticResource Map.OffscreenIcon.Quest}" />
                <Setter TargetName="Icon" Property="Width" Value="34" />
                <Setter TargetName="Icon" Property="Height" Value="34" />
                <Setter TargetName="IconBtn" Property="Canvas.Left" Value="39" />
                <Setter TargetName="IconBtn" Property="Canvas.Top" Value="47" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="LocationMarker">
                <Setter TargetName="canvas" Property="Visibility" Value="Visible"/>
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.Quest}" />
                <Setter TargetName="Icon" Property="Fill" Value="{StaticResource Map.OffscreenIcon.Location}" />
                <Setter TargetName="Icon" Property="Width" Value="34" />
                <Setter TargetName="Icon" Property="Height" Value="34" />
                <Setter TargetName="IconBtn" Property="Canvas.Left" Value="39" />
                <Setter TargetName="IconBtn" Property="Canvas.Top" Value="47" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Custom">
                <Setter TargetName="canvas" Property="Visibility" Value="Visible"/>
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.Quest}" />
                <Setter TargetName="Icon" Property="Fill" Value="{StaticResource Map.OffscreenIcon.Custom}" />
                <Setter TargetName="Icon" Property="Width" Value="34" />
                <Setter TargetName="Icon" Property="Height" Value="34" />
                <Setter TargetName="IconBtn" Property="Canvas.Left" Value="39" />
                <Setter TargetName="IconBtn" Property="Canvas.Top" Value="47" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding GameObject.Type}" Value="Character"/>
                    <Condition Binding="{Binding GameObject.CharacterMode}" Value="InCombat"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="canvas" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterFriendly">
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.Friendly}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="CharacterFriendly"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.FriendlyHighlight}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterEnemy">
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.Enemy}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="CharacterEnemy"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.EnemyHighlight}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterNeutral">
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.Neutral}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="CharacterNeutral"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.NeutralHighlight}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterParty">
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.Party}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="CharacterParty"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.PartyHighlight}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Player">
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.Selected}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="Player"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.SelectedHighlight}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Multiplayer">
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Multiplayer}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="Multiplayer"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.MultiplayerHighlight}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>



    <!-- Marker Highlight -->
    <ControlTemplate x:Key="Map.HighlightDataTemplate" TargetType="{x:Type ls:LSWorldMapHighlight}">
        <Canvas x:Name="canvas">
            <Grid x:Name="PART_Area" Width="{TemplateBinding AreaSize}" Height="{TemplateBinding AreaSize}"
                  Canvas.Left="{Binding ActualWidth, ElementName=PART_Area, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}" 
                  Canvas.Top="{Binding ActualHeight, ElementName=PART_Area, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"
                  RenderTransformOrigin="0.5 0.5">
                <Ellipse x:Name="AreaLocation"
                         Stroke="#CCffefae" StrokeThickness="2"
                         RenderTransformOrigin="0.5 0.5" noesis:Element.BlendingMode="Normal" Opacity="0">
                    <Ellipse.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform x:Name="ScaleTransForm" />
                        </TransformGroup>
                    </Ellipse.RenderTransform>
                    <Ellipse.Fill>
                        <RadialGradientBrush>
                            <GradientStop Offset="0" Color="#00FFCC00" />
                            <GradientStop Offset="0.8" Color="#44FFCC00"/>
                            <GradientStop Offset="1" Color="#A8FFCC00"/>
                        </RadialGradientBrush>
                    </Ellipse.Fill>
                </Ellipse>

            </Grid>
        </Canvas>
        
        <ControlTemplate.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="MapHighidling">
                        <Storyboard RepeatBehavior="Forever">

                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="AreaLocation">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>

                                <EasingDoubleKeyFrame KeyTime="0:0:2.5" Value="1.025">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <QuarticEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>

                                <EasingDoubleKeyFrame KeyTime="0:0:5" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <QuarticEase EasingMode="EaseIn"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>

                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="AreaLocation">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                
                                <EasingDoubleKeyFrame KeyTime="0:0:2.5" Value="1.025">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <QuarticEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                
                                <EasingDoubleKeyFrame KeyTime="0:0:5" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <QuarticEase EasingMode="EaseIn"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>

                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="AreaLocation" >

                                <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0.6">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <QuarticEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>

                                <EasingDoubleKeyFrame KeyTime="0:0:2.5" Value="0.99">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <QuarticEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                
                                <EasingDoubleKeyFrame KeyTime="0:0:5" Value="0.6">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <QuarticEase EasingMode="EaseIn"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>

            <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                <StopStoryboard BeginStoryboardName="MapHighidling"/>
            </EventTrigger>
        </ControlTemplate.Triggers>
        
    </ControlTemplate>

    <Style TargetType="ls:LSWorldMapHighlight">
        <Setter Property="Template" Value="{StaticResource Map.HighlightDataTemplate}" />
        <Setter Property="Panel.ZIndex" Value="0" />
    </Style>

    <ControlTemplate x:Key="SelectorTemplate" TargetType="Control">
        <ls:LSNineSliceImage ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_itemSelector.png" Slices="16" Focusable="False" Margin="-12" Padding="{TemplateBinding Padding}">
            <Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" MinHeight="10" MinWidth="10"  VerticalAlignment="Top" HorizontalAlignment="Left" Margin="12"/>
        </ls:LSNineSliceImage>
    </ControlTemplate>

    <ControlTemplate x:Key="HeaderInspirationPointsGold" TargetType="Control">
        <ControlTemplate.Resources>
            <Style x:Key="MouseOverStyle" TargetType="StackPanel">
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
                        <Setter Property="FontSize" Value="{StaticResource ScaledMediumFontSize}"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="Margin" Value="24,0,6,0"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type StackPanel}}}" Value="True">
                                <Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Style.Resources>
            </Style>
        </ControlTemplate.Resources>
        <StackPanel x:Name="root" Orientation="Horizontal" >

            <StackPanel x:Name="SuppliesHolder" Orientation="Horizontal" Background="Transparent" ToolTipService.IsEnabled="True" ToolTipService.Placement="Bottom" Style="{StaticResource MouseOverStyle}">
                <StackPanel.ToolTip>
                    <ls:LSTooltip Content="{Binding Path=DataContext,ElementName=SuppliesHolder}" ls:TooltipExtender.Owner="{Binding Path=DataContext.SelectedCharacter, ElementName=root}">
                        <ls:LSTooltip.ContentTemplate>
                            <DataTemplate>
                                <StackPanel>
                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h977af483ga6d9g4334g9ee0g3b85b94c67db_32, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipTitleStyle}"/>
                                    <TextBlock Width="{DynamicResource MaxTooltipContentWidth}" TextWrapping="Wrap" Style="{StaticResource TooltipDefaultTextStyle}">
                                        <ls:TextBlockFormatter.SourceText>
                                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                <Binding Source="hd7341f92g766ag4d6fg81a6gb5006d22a44b"/>
                                                <Binding Path="RequiredPartySupplies"/>
                                            </MultiBinding>
                                        </ls:TextBlockFormatter.SourceText>
                                    </TextBlock>
                                </StackPanel>
                            </DataTemplate>
                        </ls:LSTooltip.ContentTemplate>
                    </ls:LSTooltip>
                </StackPanel.ToolTip>

                <TextBlock Text="{Binding PartySupplies}"/>
                <Image x:Name="SuppliesImage" VerticalAlignment="Center" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_supplies.png" Stretch="Uniform" Width="52" Margin="0,-2,0,2"/>

            </StackPanel>

            <StackPanel x:Name="InspirationHolder" Orientation="Horizontal" Background="Transparent" ToolTipService.IsEnabled="True" ToolTipService.Placement="Bottom" Style="{StaticResource MouseOverStyle}">
                <StackPanel.ToolTip>
                    <ls:LSTooltip Content="{Binding .}" ls:TooltipExtender.Owner="{Binding Path=DataContext.SelectedCharacter, ElementName=root}">
                        <ls:LSTooltip.ContentTemplate>
                            <DataTemplate>
                                <StackPanel>
                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=hea6d302egf0f6g48a5gb063gd2a165d1beb9, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipTitleStyle}"/>
                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=hd14181dbgc234g48f9gbb1dg4a014583669e, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipDefaultTextStyle}"/>
                                </StackPanel>
                            </DataTemplate>
                        </ls:LSTooltip.ContentTemplate>
                    </ls:LSTooltip>
                </StackPanel.ToolTip>

                <TextBlock Text="{Binding SelectedCharacter.Stats.InspirationPointsResource.Value}"/>
                <Image VerticalAlignment="Center" Stretch="None" Margin="0,-2,0,2">
                    <Image.Style>
                        <Style TargetType="Image">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resource_inspirationPoint_tile.png"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SelectedCharacter.Stats.InspirationPointsResource.Value}" Value="0">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resource_inspirationPoint_inactive_tile.png"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
            </StackPanel>

            <StackPanel x:Name="PartyGoldHolder" Orientation="Horizontal" Background="Transparent" Style="{StaticResource MouseOverStyle}">
                <StackPanel.ToolTip>
                    <ls:LSTooltip>
                        <ls:LSTooltip.Content>
                            <StackPanel>
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=ha6564037g4678g44cdga274gadc09cbef56f, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipTitleStyle}"/>
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h1e646e86g3c05g4c96g9fd8g9c521871d554, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipDefaultTextStyle}"/>
                            </StackPanel>
                        </ls:LSTooltip.Content>
                    </ls:LSTooltip>
                </StackPanel.ToolTip>
                <TextBlock Text="{Binding PartyGold, StringFormat={}{0:N0}}"/>
                <Image Source="{StaticResource GoldIconImg}" Stretch="Uniform" Width="40" VerticalAlignment="Center" Margin="0,-6" />
            </StackPanel>

            <StackPanel x:Name="IndividualGoldHolder" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Right" Background="Transparent" Visibility="Collapsed" Style="{StaticResource MouseOverStyle}">
                <StackPanel.ToolTip>
                    <ls:LSTooltip>
                        <ls:LSTooltip.Content>
                            <StackPanel>
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h55e5ec72g331dg4dc9g9532g4a68ba0bc2a3, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipTitleStyle}"/>
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h1e646e86g3c05g4c96g9fd8g9c521871d554, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipDefaultTextStyle}"/>
                            </StackPanel>
                        </ls:LSTooltip.Content>
                    </ls:LSTooltip>
                </StackPanel.ToolTip>
                <TextBlock Text="{Binding SelectedCharacter.Inventory.Gold, StringFormat={}{0:N0}}"/>
                <Image Source="{StaticResource GoldIconImg}" Stretch="Uniform" Width="40" VerticalAlignment="Center" Margin="0,-6" />
            </StackPanel>

        </StackPanel>

        <ControlTemplate.Triggers>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                        <Binding Path="PartySupplies"/>
                        <Binding Path="RequiredPartySupplies"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="SuppliesImage" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_suppliesAquired.png"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Name, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="CharacterPanel" >
                <Setter TargetName="IndividualGoldHolder" Property="Visibility" Value="Visible"/>
                <Setter TargetName="PartyGoldHolder" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="TinyStatusTemplate" DataType="{x:Type ls:VMStatus}">
        <Grid Height="40" Width="40">
            <Ellipse Stretch="Uniform" Fill="{StaticResource LS_PanelBackground}" />
            <Ellipse Width="36" Height="36" VerticalAlignment="Center" HorizontalAlignment="Center" Fill="{Binding Icon}" />
        </Grid>
    </DataTemplate>
    
    <Style x:Key="StatusDurationTextStyle" TargetType="TextBlock">
        <Setter Property="Text" Value="-" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding DurationType}" Value="Permanent">
                <Setter Property="Text" Value="{Binding Source='h82302eb4g8ff2g4ffegbe60gc579e1ae23af',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="Timer">
                <Setter Property="Text">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h2dc60835g9000g440fga70fg330291eda7eb"/>
                            <Binding Path="DataContext.Duration" RelativeSource="{RelativeSource Mode=Self}"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Duration}" Value="1" />
                    <Condition Binding="{Binding DurationType}" Value="Timer" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Text">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h134a812fgc09eg43d7gbaadg9cb153532707"/>
                                <Binding Path="DataContext.Duration" RelativeSource="{RelativeSource Mode=Self}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="FromSurface">
                <Setter Property="Text" Value="{Binding Source='hb2a148a4g90e3g4726g91a4g6f75d101d8a9',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="Aura">
                <Setter Property="Text" Value="{Binding Source='h51826368gf983g41a8gaf5cg0b141e1a1239',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="UntilRest">
                <Setter Property="Text" Value="{Binding Source='h50ea69dagf61eg466fga47eg530c55933114',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="Environment">
                <Setter Property="Text" Value="{Binding Source='hffed1068gce4cg4b81g99c0g9e7967ed129c',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>

        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="InventoryViewBlocker">
        <Rectangle x:Name="InventoryBlocker" Fill="{StaticResource LS_DisabledPanelColor}" 
                   Visibility="{Binding IsContentEditable, Mode=OneWay, Converter={StaticResource BoolToCollapsedConverter}}"/>
    </ControlTemplate>

    <Style x:Key="TutorialCategoryStyle" TargetType="TextBlock">
        <Setter Property="Text" Value="{Binding Source='he162765ega290g4934ga287g65430dcac222', Converter={StaticResource TranslatedStringConverter}}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Tutorial.Category}" Value="Combat">
                <Setter Property="Text" Value="{Binding Source='h470a1dcfg4daag4f70g8f74g7c40dd9e56fe', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tutorial.Category}" Value="Gameplay">
                <Setter Property="Text" Value="{Binding Source='h1e323305g61b3g4f01gb4dag9f9e4d9cf670', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tutorial.Category}" Value="Character">
                <Setter Property="Text" Value="{Binding Source='h3c4dec9bgf673g4967gb69ag4a143056e291', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tutorial.Category}" Value="Exploration">
                <Setter Property="Text" Value="{Binding Source='h4447b265g36e8g4ed2g9f91g96dcd20dd041', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="TargetHealthBarTemplate" TargetType="Control" >
        <Grid x:Name="HPBarContainer" HorizontalAlignment="Center" d:DataContext="{d:DesignInstance {x:Type ls:VMGameObject}, IsDesignTimeCreatable=True}">
            <ls:LSProgressBar x:Name="HealthBar" Margin="0,30,0,0" Width="674" Height="28" Clip="M 12 0 L 660 0 L 672 14 L 660 28 L 12 28 L 0 14 Z" Minimum="0" SubValue="{Binding Stats.TemporaryHealth.Value, Mode=OneWay}" Background="{StaticResource LS_HealthBarBackgound}" BorderBrush="Transparent" VerticalAlignment="Top" Visibility="{Binding Stats.Health.IsValid, Converter={StaticResource BoolToVisibleConverter}}" ls:LSProgressBar.AllowValueChangedEvents="True">
                <ls:LSProgressBar.Maximum>
                    <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                        <Binding Path="Stats.Health.Max" Mode="OneWay"/>
                        <Binding Path="Stats.TemporaryHealth.Max" Mode="OneWay"/>
                    </MultiBinding>
                </ls:LSProgressBar.Maximum>
                <ls:LSProgressBar.Value>
                    <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                        <Binding Path="Stats.Health.Value" Mode="OneWay"/>
                        <Binding Path="Stats.TemporaryHealth.Value" Mode="OneWay"/>
                    </MultiBinding>
                </ls:LSProgressBar.Value>

                <b:Interaction.Triggers>
                    <b:PropertyChangedTrigger Binding="{Binding .}">
                        <ls:LSControlStoryboard ControlStoryboardOption="Play">
                            <ls:LSControlStoryboard.Storyboard>
                                <Storyboard FillBehavior="Stop">
                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(ls:LSProgressBar.AllowValueChangedEvents)">
                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                        <DiscreteBooleanKeyFrame KeyTime="0:0:0.4" Value="True" />
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </ls:LSControlStoryboard.Storyboard>
                        </ls:LSControlStoryboard>
                    </b:PropertyChangedTrigger>
                    <b:EventTrigger EventName="UnLoaded">
                        <b:ControlStoryboardAction Storyboard="{Binding Path=(b:Interaction.Triggers)[0].Actions[0].Storyboard ,RelativeSource={RelativeSource Self}}" ControlStoryboardOption="Stop" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>

                <ls:LSProgressBar.Template>
                    <ControlTemplate TargetType="ls:LSProgressBar" >
                        <Grid Name="PART_Track" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                            <!-- This is only here to use as a 'from' size for the animated part -->
                            <Rectangle Name="PART_OldIndicator" Fill="{StaticResource LS_HealthBarForegound}" ClipToBounds="True" HorizontalAlignment="Left" Visibility="Hidden"/>
                            <!-- Tag value is changed through the HealthAnimation storyboard -->
                            <Rectangle Name="AnimatedPart" Fill="{StaticResource LS_tint100}" HorizontalAlignment="Left" Tag="1" Panel.ZIndex="3">
                                <Rectangle.Width>
                                    <MultiBinding Converter="{StaticResource LinearInterpolationConverter}">
                                        <Binding Path="Width" ElementName="PART_OldIndicator"/>
                                        <Binding Path="Width" ElementName="PART_AvailableIndicator"/>
                                        <Binding Path="Tag" RelativeSource="{RelativeSource Mode=Self}"/>
                                    </MultiBinding>
                                </Rectangle.Width>
                            </Rectangle>
                            <Grid x:Name="HealthHolder" ClipToBounds="True" HorizontalAlignment="Left" Panel.ZIndex="4">
                                <Rectangle Name="PART_AvailableIndicator" Fill="{StaticResource LS_HealthBarForegound}"/>
                                <Rectangle Name="PART_SubIndicator" Fill="{StaticResource LS_TemporaryHBForeground}" HorizontalAlignment="Right"/>
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <EventTrigger RoutedEvent="ls:LSProgressBar.ValueDecreased">
                                <BeginStoryboard x:Name="DamageAnimation">
                                    <BeginStoryboard.Storyboard>
                                        <Storyboard FillBehavior="Stop">
                                            <!-- Bindings as values refuse to work here. Using Tag as a % value for a lerp converter on the target element, which will lerp to correct values -->
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Tag" Storyboard.TargetName="AnimatedPart">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard.Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>

                            <EventTrigger RoutedEvent="ls:LSProgressBar.ValueIncreased">
                                <BeginStoryboard x:Name="HealthAnimation">
                                    <BeginStoryboard.Storyboard>
                                        <Storyboard FillBehavior="Stop">
                                            <!-- Bindings as values refuse to work here. Using Tag as a % value for a lerp converter on the target element, which will lerp to correct values -->
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Tag" Storyboard.TargetName="AnimatedPart">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="1">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseOut"/>
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>

                                            <Int32AnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.ZIndex)" Storyboard.TargetName="AnimatedPart">
                                                <SplineInt32KeyFrame KeyTime="00:00:00.00" Value="5"/>
                                            </Int32AnimationUsingKeyFrames>

                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PART_OldIndicator">
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0.0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>

                                            <Int32AnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.ZIndex)" Storyboard.TargetName="PART_OldIndicator">
                                                <SplineInt32KeyFrame KeyTime="00:00:00.00" Value="6"/>
                                            </Int32AnimationUsingKeyFrames>

                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Fill" Storyboard.TargetName="PART_AvailableIndicator">
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource LS_tint100}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Fill" Storyboard.TargetName="PART_SubIndicator">
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource LS_tint100}" />
                                            </ObjectAnimationUsingKeyFrames>

                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Fill" Storyboard.TargetName="AnimatedPart">
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource LS_HealthBarForegound}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard.Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="FrameworkElement.Unloaded" >
                                <StopStoryboard BeginStoryboardName="DamageAnimation"/>
                                <StopStoryboard BeginStoryboardName="HealthAnimation"/>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                <StopStoryboard BeginStoryboardName="HealthAnimation"/>
                                <BeginStoryboard x:Name="DisableOnloadAnimation">
                                    <Storyboard FillBehavior="Stop">
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(ls:LSProgressBar.AllowValueChangedEvents)">
                                            <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0.4" Value="True" />
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ls:LSProgressBar.Template>
            </ls:LSProgressBar>
            <Image x:Name="BGImage" HorizontalAlignment="Center" VerticalAlignment="Top" Stretch="None" Width="900" Margin="0,0,0,-44" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/target_bar_hp.png"/>
            <StackPanel x:Name="HealthTextStack" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,20,0,0" Visibility="{Binding Stats.Health.IsValid, Converter={StaticResource BoolToVisibleConverter}}">
                <StackPanel.Resources>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource TargetInfoTextStyle}"/>
                </StackPanel.Resources>
	            <TextBlock x:Name="HealthText" Text="{Binding Stats.Health.Value}"/>
                <TextBlock x:Name="HealthMaxText" Text="{Binding Stats.Health.Max, StringFormat='/{0}'}"/>

                <TextBlock x:Name="TempHealthText" Text="{Binding Stats.TemporaryHealth.Value, StringFormat=' + {0}'}" Visibility="{Binding Stats.TemporaryHealth.Value, Converter={StaticResource CountToVisibilityConverter}}"/>
                <TextBlock x:Name="TempHealthMaxText" Text="{Binding Stats.TemporaryHealth.Max, StringFormat='/{0}'}" Visibility="{Binding Stats.TemporaryHealth.Value, Converter={StaticResource CountToVisibilityConverter}}"/>
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding CharacterType}" Value="Boss">
                <Setter TargetName="BGImage" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/target_bar_hp_boss.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Stats.Health.IsValid}" Value="False">
                <Setter TargetName="BGImage" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/target_no_hp.png"/>
                <Setter TargetName="BGImage" Property="Margin" Value="0"/>
            </DataTrigger>

            <!-- Hide NPC HP -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsPlayableCharacter}" Value="False"/>
                    <Condition Binding="{Binding DataContext.Data.CurrentRuleSetModifiers, Converter={StaticResource RuleSetModifierValueConverter}, ConverterParameter='HIDE_NPC_HP', RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="HealthTextStack" Property="Visibility" Value="Hidden"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!-- Hide Item HP -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Item"/>
                    <Condition Binding="{Binding DataContext.Data.CurrentRuleSetModifiers, Converter={StaticResource RuleSetModifierValueConverter}, ConverterParameter='HIDE_NPC_HP', RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="HealthTextStack" Property="Visibility" Value="Hidden"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="CursorDashTemplate">
        <ControlTemplate.Resources>
            <System:Double x:Key="BaseColorOpacity">0.65</System:Double>
            <SolidColorBrush x:Key="BaseColor" Color="{StaticResource accent100Color}"/>
            <SolidColorBrush x:Key="HighlightColor" Color="{StaticResource accent100Color}"/>
            <SolidColorBrush x:Key="PreviewColor" Color="{StaticResource tempHPColor}"/>
        </ControlTemplate.Resources>

        <Grid x:Name="InnerProjectilesDash" Visibility="Visible" HorizontalAlignment="Center" VerticalAlignment="Center">
            
            <Path x:Name="Used" Style="{DynamicResource PieStyle}" HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="{DynamicResource HighlightColor}" Visibility="Hidden">
                <!-- Disabled this section for now, as it seems to just always display a full circle and overlap everything really badly -->
                <b:Interaction.Behaviors>
                    <ls:PathDashBehavior SegmentCount="{Binding MaxValue}" RelativeSegmentLength="{DynamicResource RelativeSegmentLength}" StartAngle="-90"/>
                </b:Interaction.Behaviors>
            </Path>
            
            <ls:LSPie x:Name="Remaining" SweepDirection="Clockwise" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Visible">
                <ls:LSPie.Value>
                    <MultiBinding Converter="{StaticResource DivideMultiConverter}">
                        <Binding Path="Remaining"/>
                        <Binding Path="MaxValue"/>
                    </MultiBinding>
                </ls:LSPie.Value>
                <Path Style="{DynamicResource PieStyle}" Stroke="{DynamicResource BaseColor}" Opacity="{DynamicResource BaseColorOpacity}">
                    <b:Interaction.Behaviors>
                        <ls:PathDashBehavior SegmentCount="{Binding MaxValue}" RelativeSegmentLength="{DynamicResource RelativeSegmentLength}" StartAngle="-90"/>
                    </b:Interaction.Behaviors>
                </Path>
            </ls:LSPie>

            <ls:LSPie x:Name="Selected" SweepDirection="Clockwise" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5 0.5" Visibility="Visible">
                <ls:LSPie.Tag>
                    <MultiBinding Converter="{StaticResource DivideMultiConverter}">
                        <Binding Source="360"/>
                        <Binding Path="MaxValue"/>
                    </MultiBinding>
                </ls:LSPie.Tag>
                <ls:LSPie.RenderTransform>
                    <RotateTransform>
                        <RotateTransform.Angle>
                            <MultiBinding Converter="{StaticResource MultiplierMultiConverter}">
                                <Binding Path="Tag" ElementName="Selected"/>
                                <Binding Path="CurrentValue"/>
                            </MultiBinding>
                        </RotateTransform.Angle>
                    </RotateTransform>
                </ls:LSPie.RenderTransform>
                <ls:LSPie.Value>
                    <MultiBinding Converter="{StaticResource DivideMultiConverter}">
                        <Binding Path="CurrentSelection"/>
                        <Binding Path="MaxValue"/>
                    </MultiBinding>
                </ls:LSPie.Value>
                <Path Style="{DynamicResource PieStyle}" Stroke="{DynamicResource PreviewColor}">
                    <b:Interaction.Behaviors>
                        <ls:PathDashBehavior SegmentCount="{Binding MaxValue}" RelativeSegmentLength="{DynamicResource RelativeSegmentLength}" StartAngle="-90"/>
                    </b:Interaction.Behaviors>
                </Path>
            </ls:LSPie>

        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="SimplifiedCursorDashTemplate">
        <ControlTemplate.Resources>
            <System:Double x:Key="BaseColorOpacity">0.65</System:Double>
            <SolidColorBrush x:Key="BaseColor" Color="{StaticResource accent100Color}"/>
            <SolidColorBrush x:Key="HighlightColor" Color="{StaticResource accent100Color}"/>
        </ControlTemplate.Resources>

        <Grid x:Name="InnerProjectilesDash" Visibility="Visible" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Path x:Name="Remaining" Style="{DynamicResource PieStyle}" HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="{DynamicResource BaseColor}" Opacity="{DynamicResource BaseColorOpacity}">
                <b:Interaction.Behaviors>
                    <ls:PathDashBehavior SegmentCount="{Binding MaxValue}" RelativeSegmentLength="{DynamicResource RelativeSegmentLength}" StartAngle="-90"/>
                </b:Interaction.Behaviors>
            </Path>

            <ls:LSPie x:Name="UsedGloom" SweepDirection="Counterclockwise" HorizontalAlignment="Center" VerticalAlignment="Center" Value="{Binding Value, ElementName=Used}">
                <Path Style="{DynamicResource PieStyle}" Stroke="{DynamicResource GlowColor}" StrokeThickness="18">
                    <b:Interaction.Behaviors>
                        <ls:PathDashBehavior SegmentCount="{Binding MaxValue}" RelativeSegmentLength="{DynamicResource RelativeSegmentLength}" StartAngle="-90"/>
                    </b:Interaction.Behaviors>
                    <Path.Effect>
                        <BlurEffect Radius="18"/>
                    </Path.Effect>
                </Path>
            </ls:LSPie>

            <ls:LSPie x:Name="Used" SweepDirection="Counterclockwise" HorizontalAlignment="Center" VerticalAlignment="Center">
                <ls:LSPie.Value>
                    <MultiBinding Converter="{StaticResource DivideMultiConverter}">
                        <Binding Path="CurrentValue"/>
                        <Binding Path="MaxValue"/>
                    </MultiBinding>
                </ls:LSPie.Value>
                <Path Style="{DynamicResource PieStyle}" Stroke="{DynamicResource HighlightColor}">
                    <b:Interaction.Behaviors>
                        <ls:PathDashBehavior SegmentCount="{Binding MaxValue}" RelativeSegmentLength="{DynamicResource RelativeSegmentLength}" StartAngle="-90"/>
                    </b:Interaction.Behaviors>
                </Path>
            </ls:LSPie>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="DataContext" RelativeSource="{RelativeSource Self}"/>
                        <Binding Path="DataContext.CurrentPlayer.UIData.ActiveTask.TargetValues" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="Used" Property="Value">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource DivideMultiConverter}">
                            <Binding Path="CurrentValue" Converter="{StaticResource AddConverter}" ConverterParameter="-1"/>
                            <Binding Path="MaxValue"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Story Timer -->

    <Style x:Key="StoryTimerStyle" TargetType="ContentPresenter">
        <Style.Resources>
            <KeyTime x:Key="TimerFadeInTime">0:0:0.5</KeyTime>
            <KeyTime x:Key="TimerFadeInTime2">0:0:0.55</KeyTime>

            <Style x:Key="MainPiesStyle" TargetType="ls:LSPie">
                <Setter Property="SweepDirection" Value="Clockwise"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
            </Style>

            <Style x:Key="PathStyle" TargetType="Path">
                <Setter Property="StrokeThickness" Value="7"/>
                <Setter Property="noesis:Element.PPAAIn" Value="0.3"/>
                <Setter Property="noesis:Element.PPAAOut" Value="2.0"/>
                <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor"/>
                <Setter Property="UseLayoutRounding" Value="True"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Width" Value="144"/>
                <Setter Property="Height" Value="144"/>
                <Setter Property="Stroke" Value="{StaticResource LS_accent75TxtColor}"/>
                <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                <Setter Property="Data">
                    <Setter.Value>
                        <EllipseGeometry RadiusX="66" RadiusY="66" Center="72,72"/>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="HeaderImageStyle" TargetType="Image">
                <Setter Property="Stretch" Value="None"/>
            </Style>
            <Style x:Key="FrameImageStyle" TargetType="Image">
                <Setter Property="Stretch" Value="None"/>
            </Style>
            <Style x:Key="timerNumberStyle" TargetType="TextBlock">
                <Setter Property="FontSize" Value="{StaticResource GiganticFontSize}"/>
                <Setter Property="Margin" Value="0,4,0,0"/>
            </Style>
            <Style x:Key="timerAnimContents1" TargetType="Image">
                <Setter Property="Width" Value="144"/>
                <Setter Property="Height" Value="144"/>
            </Style>
            <Style x:Key="timerAnimContents2" TargetType="Ellipse">
                <Setter Property="Width" Value="200"/>
                <Setter Property="Height" Value="200"/>
            </Style>
            <Style x:Key="timerAnimContents3" TargetType="Ellipse">
                <Setter Property="Width" Value="144"/>
                <Setter Property="Height" Value="144"/>
            </Style>
            <Style x:Key="timerIconSize" TargetType="Image">
                <Setter Property="Height" Value="44"/>
            </Style>



            <KeyTime x:Key="ttAnim01">0:0:0.5</KeyTime>
            <KeyTime x:Key="ttAnim02">0:0:1.5</KeyTime>
            <KeyTime x:Key="ttAnim03">0:0:2</KeyTime>
            <KeyTime x:Key="ttAnim04">0:0:4</KeyTime>

            <KeyTime x:Key="ttAnim01f">0:0:0.25</KeyTime>
            <KeyTime x:Key="ttAnim02f">0:0:0.75</KeyTime>
            <KeyTime x:Key="ttAnim03f">0:0:1</KeyTime>
            <KeyTime x:Key="ttAnim04f">0:0:2</KeyTime>

            <Storyboard x:Key="TurnTicked" FillBehavior="Stop">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="StartGlow" RepeatBehavior="1x">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim01}" Value="0.5"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim03}" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim04}" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="Hourglass">
                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                    <DiscreteObjectKeyFrame KeyTime="{StaticResource ttAnim03}" Value="{x:Static Visibility.Collapsed}"/>
                </ObjectAnimationUsingKeyFrames>
                <DoubleAnimation From="0" To="180" Duration="0:0:0.6" RepeatBehavior="1x" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="Hourglass">
                    <DoubleAnimation.EasingFunction>
                        <CubicEase />
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="TurnAmountLabel" RepeatBehavior="1x"  >
                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim02}" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim03}" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Hourglass" RepeatBehavior="1x" >
                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim01}" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim02}" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim03}" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            
            <Storyboard x:Key="SpinAnimation" FillBehavior="Stop">
                <DoubleAnimation Storyboard.TargetName="holdButtonShine" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" From="0" To="360" Duration="0:0:2" AutoReverse="False" RepeatBehavior="Forever" />
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="DangerGlow" RepeatBehavior="Forever">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim01}" Value="0.3"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim03}" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim04}" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="DangerGlow2" RepeatBehavior="Forever">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim01}" Value="0.5"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim03}" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim04}" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="holdButtonShine" RepeatBehavior="Forever">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim01}" Value="0.5"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim02}" Value="0.8"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim04}" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="mainRing" RepeatBehavior="Forever">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0.7"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim01}" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim02}" Value="0.7"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim04}" Value="0.7"/>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="TurnAmountLabel" Storyboard.TargetProperty="(TextBlock.RenderTransform).(ScaleTransform.ScaleX)" RepeatBehavior="Forever">
                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1.1"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim04}" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="TurnAmountLabel" Storyboard.TargetProperty="(TextBlock.RenderTransform).(ScaleTransform.ScaleY)" RepeatBehavior="Forever">
                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1.1"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim04}" Value="1"/>
                </DoubleAnimationUsingKeyFrames>

            </Storyboard>

            <Storyboard x:Key="SpinAnimationFast" FillBehavior="Stop">
                <DoubleAnimation Storyboard.TargetName="holdButtonShine" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" From="0" To="360" Duration="0:0:1" AutoReverse="False" RepeatBehavior="Forever" />
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="DangerGlow" RepeatBehavior="Forever">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim01f}" Value="0.3"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim03f}" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim04f}" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="DangerGlow2" RepeatBehavior="Forever">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim01f}" Value="0.5"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim03f}" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim04f}" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="holdButtonShine" RepeatBehavior="Forever">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim01f}" Value="0.5"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim02f}" Value="0.8"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim04f}" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="mainRing" RepeatBehavior="Forever">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0.7"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim01f}" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim02f}" Value="0.7"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim04f}" Value="0.7"/>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="TurnAmountLabel" Storyboard.TargetProperty="(TextBlock.RenderTransform).(ScaleTransform.ScaleX)" RepeatBehavior="Forever">
                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.125" Value="1.3"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim04f}" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="TurnAmountLabel" Storyboard.TargetProperty="(TextBlock.RenderTransform).(ScaleTransform.ScaleY)" RepeatBehavior="Forever">
                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.125" Value="1.3"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="{StaticResource ttAnim04f}" Value="1"/>
                </DoubleAnimationUsingKeyFrames>

            </Storyboard>

            <BitmapImage x:Key="TextHourglass" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/tasklist_hourglass.png"/>
            <BitmapImage x:Key="DangerZone" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap_c/c_alertGlow.png"/>
        </Style.Resources>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="ls:VMStoryTimer">
                    <Grid x:Name="StoryTimerRoot" MinHeight="10" MinWidth="10" >
                        <Grid.RenderTransform>
                            <TranslateTransform/>
                        </Grid.RenderTransform>
                        <StackPanel>
                            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/minimap_logPane_header.png" Stretch="None" />
                            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/minimap_logPane_body.png" Stretch="None" />
                        </StackPanel>
                        <StackPanel Margin="0,55,0,0">
                            <TextBlock Text="{Binding Description}" FontSize="{StaticResource ScaledMediumFontSize}" Foreground="{StaticResource LS_accent75TxtColor}" TextAlignment="Center" noesis:Text.Stroke="{StaticResource LS_tint00}" noesis:Text.StrokeThickness="4" HorizontalAlignment="Center" Width="540" TextWrapping="Wrap"/>
                            <ls:TimerControl VerticalAlignment="Top" HorizontalAlignment="Center" x:Name="Timer" CurrentTime="{Binding CurrentTime}" TotalTime="{Binding TotalTime}" Visibility="{Binding ShowTimerFeatures, Converter={StaticResource BoolToVisibleConverter}}" >
                                <ls:TimerControl.Template>
                                    <ControlTemplate TargetType="ls:TimerControl">
                                        <StackPanel>
                                            <StackPanel Orientation="Horizontal" Margin="0,14,0,12" HorizontalAlignment="Center">
                                                <Image Source="{DynamicResource TextHourglass}" Stretch="UniformToFill" Margin="0,0,3,0" Visibility="{Binding ShowTimerFeatures, Converter={StaticResource BoolToVisibleConverter}}" Style="{DynamicResource timerIconSize}" />
                                                <TextBlock x:Name="TurnLabelBlock" FontSize="{DynamicResource ScaledMediumFontSize}" Foreground="{StaticResource LS_accent100TxtColor}" TextAlignment="Center" noesis:Text.Stroke="{StaticResource LS_tint00}" noesis:Text.StrokeThickness="4" HorizontalAlignment="Center" MaxWidth="480" TextWrapping="Wrap">
                                                    <TextBlock.Text>
                                                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                            <Binding Source="h77576fbfg80f2g4ca6gba42g62dd93143213" />
                                                            <Binding Path="TurnsRemaining" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                                            <Binding Source="" />
                                                        </MultiBinding>
                                                    </TextBlock.Text>
                                                </TextBlock>
                                            </StackPanel>

                                            <Grid>

                                                <Image HorizontalAlignment="Center" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/timer_headerFrame.png" VerticalAlignment="Top" Margin="0,8,0,0" Style="{DynamicResource HeaderImageStyle}"/>
                                                <Image HorizontalAlignment="Center" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/timer_frame.png" Style="{DynamicResource FrameImageStyle}"/>
                                                <Image x:Name="DangerGlow" IsHitTestVisible="False" Stretch="UniformToFill" Source="{StaticResource DangerZone}" Focusable="False" Opacity="0" Style="{DynamicResource timerAnimContents1}"/>
                                                <Ellipse x:Name="DangerGlow2" Opacity="0" Style="{DynamicResource timerAnimContents2}">
                                                    <Ellipse.Fill>
                                                        <RadialGradientBrush>
                                                            <GradientStop Color="{StaticResource alertColor}" Offset="0"/>
                                                            <GradientStop Color="#00fe265d" Offset="1"/>
                                                        </RadialGradientBrush>
                                                    </Ellipse.Fill>
                                                </Ellipse>
                                                <Ellipse x:Name="StartGlow" Opacity="0" Style="{DynamicResource timerAnimContents2}">
                                                    <Ellipse.Fill>
                                                        <RadialGradientBrush>
                                                            <GradientStop Color="White" Offset="0"/>
                                                            <GradientStop Color="Transparent" Offset="1"/>
                                                        </RadialGradientBrush>
                                                    </Ellipse.Fill>
                                                </Ellipse>
                                                <Ellipse x:Name="holdButtonShine" StrokeThickness="18" Opacity="0" RenderTransformOrigin="0.5,0.5" Style="{DynamicResource timerAnimContents3}">
                                                    <Ellipse.Stroke>
                                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" >
                                                            <GradientStop Color="{StaticResource alertColor}" Offset="0"/>
                                                            <GradientStop Color="#00fe265d" Offset="0.3"/>
                                                            <GradientStop Color="#00fe265d" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Ellipse.Stroke>
                                                    <Ellipse.RenderTransform>
                                                        <RotateTransform Angle="180"/>
                                                    </Ellipse.RenderTransform>
                                                </Ellipse>

                                                <ls:LSPie x:Name="mainRing" Style="{StaticResource MainPiesStyle}" Value="{TemplateBinding TurnPercentRemaining}" Opacity="0.8">
                                                    <Path Style="{DynamicResource PathStyle}" >
                                                        <b:Interaction.Behaviors>
                                                            <ls:PathDashBehavior SegmentCount="{Binding TotalTurns,RelativeSource={RelativeSource Mode=TemplatedParent}}" StartAngle="-90" FixedGapLength="1" />
                                                        </b:Interaction.Behaviors>
                                                    </Path>
                                                </ls:LSPie>

                                                <ls:LSPie Style="{StaticResource MainPiesStyle}" Value="{TemplateBinding CurrentTurnPercentRemaining}" RenderTransformOrigin="0.5 0.5">
                                                    <ls:LSPie.RenderTransform>
                                                        <RotateTransform Angle="{Binding CurrentTurnAngle,RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                                    </ls:LSPie.RenderTransform>
                                                    <Path Style="{DynamicResource PathStyle}" Stroke="White" StrokeThickness="8">
                                                        <b:Interaction.Behaviors>
                                                            <ls:PathDashBehavior SegmentCount="{Binding TotalTurns,RelativeSource={RelativeSource Mode=TemplatedParent}}" StartAngle="-90" FixedGapLength="1" />
                                                        </b:Interaction.Behaviors>
                                                    </Path>
                                                </ls:LSPie>
                                                <Image x:Name="Hourglass" HorizontalAlignment="Center" VerticalAlignment="Center" Source="{StaticResource IconHourglass}" Height="90" Width="90" Stretch="Uniform" Visibility="Collapsed" RenderTransformOrigin="0.5 0.5">
                                                    <Image.RenderTransform>
                                                        <RotateTransform Angle="0"/>
                                                    </Image.RenderTransform>
                                                </Image>
                                                <TextBlock x:Name="TurnAmountLabel" Text="{Binding TurnsRemaining,RelativeSource={RelativeSource Mode=TemplatedParent}}" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5"  Foreground="{StaticResource LS_accent100TxtColor}" noesis:Text.Stroke="{StaticResource LS_tint00}" noesis:Text.StrokeThickness="4" Style="{DynamicResource timerNumberStyle}" >
                                                    <TextBlock.RenderTransform>

                                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                                    </TextBlock.RenderTransform>

                                                </TextBlock>

                                                <b:Interaction.Triggers>
                                                    <b:PropertyChangedTrigger Binding="{Binding TurnsRemaining,RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                                        <b:Interaction.Behaviors>
                                                            <b:ConditionBehavior>
                                                                <b:ConditionalExpression>
                                                                    <b:ComparisonCondition LeftOperand="{Binding TurnsRemaining,RelativeSource={RelativeSource Mode=TemplatedParent}}" Operator="NotEqual" RightOperand="0"/>
                                                                    <b:ComparisonCondition LeftOperand="{Binding TurnsRemaining,RelativeSource={RelativeSource Mode=TemplatedParent}}" Operator="NotEqual" RightOperand="{Binding TotalTurns,RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                                                </b:ConditionalExpression>
                                                            </b:ConditionBehavior>
                                                        </b:Interaction.Behaviors>
                                                        <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource TurnTicked}" />
                                                    </b:PropertyChangedTrigger>
                                                </b:Interaction.Triggers>
                                            </Grid>
                                        </StackPanel>
                                        <ControlTemplate.Triggers>


                                            <Trigger Property="TurnsRemaining" Value="1">
                                                <Setter TargetName="TurnLabelBlock" Value="{Binding Source='heab9d072g7b51g4d7cg807eg1d04b452cbc7', Converter={StaticResource TranslatedStringConverter}}" Property="Text"/>
                                            </Trigger>

                                            <DataTrigger Binding="{Binding TurnsRemaining, RelativeSource={RelativeSource Self}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=3}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard x:Name="startTimerSpinAnimation" Storyboard="{StaticResource SpinAnimation}" />
                                                </DataTrigger.EnterActions>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding TurnsRemaining, RelativeSource={RelativeSource Self}, Converter={StaticResource LessThanConverter}, ConverterParameter=4}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard x:Name="startTimerFastSpinAnimation" Storyboard="{StaticResource SpinAnimationFast}" />
                                                </DataTrigger.EnterActions>
                                            </DataTrigger>


                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </ls:TimerControl.Template>
                            </ls:TimerControl>
                        </StackPanel>
                    </Grid>
                    <DataTemplate.Triggers>

                        <DataTrigger Binding="{Binding Content, ElementName=StoryTimer}" Value="{x:Null}">
                            <DataTrigger.EnterActions>
                                <StopStoryboard BeginStoryboardName="AppearAnim" />
                                <BeginStoryboard  x:Name="DisappearAnim">
                                    <BeginStoryboard.Storyboard>
                                        <Storyboard >
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame KeyTime="{StaticResource TimerFadeInTime2}" Value="{x:Static Visibility.Collapsed}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                                                <EasingDoubleKeyFrame KeyTime="{DynamicResource TimerFadeInTime}" Value="0">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseOut"/>
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard.Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="DisappearAnim" />
                                <BeginStoryboard x:Name="AppearAnim" >
                                    <BeginStoryboard.Storyboard>
                                        <Storyboard >
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="{DynamicResource TimerFadeInTime}" Value="1">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseOut"/>
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>

                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="100"/>
                                                <EasingDoubleKeyFrame KeyTime="{DynamicResource TimerFadeInTime}" Value="0">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseOut"/>
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>

                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Timer" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="{DynamicResource TimerFadeInTime}" Value="1">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseOut"/>
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard.Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                        <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                            <StopStoryboard BeginStoryboardName="AppearAnim" />
                            <StopStoryboard BeginStoryboardName="DisappearAnim" />
                            <StopStoryboard BeginStoryboardName="LoadAnim" />
                        </EventTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <DataTemplate x:Key="CallAlliesIcon">
        <DataTemplate.Resources>
            <BitmapImage x:Key="CallForthAlliesBase" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/CALL_FORTH_ALLIES_Base.png" />
            <BitmapImage x:Key="CallForthAlliesGlow" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/CALL_FORTH_ALLIES_Glow.png" />
        </DataTemplate.Resources>
        <Grid Width="{DynamicResource CallAlliesSize}" Height="{DynamicResource CallAlliesSize}">
            <Grid.Triggers>
                <EventTrigger RoutedEvent="Grid.Unloaded">
                    <StopStoryboard BeginStoryboardName="CallAlliesGlowAnim" />
                </EventTrigger>
            </Grid.Triggers>
            <Grid.Clip>
                <EllipseGeometry Center="{DynamicResource CallAlliesCenter}" RadiusX="{DynamicResource CallAlliesHalfSize}" RadiusY="{DynamicResource CallAlliesHalfSize}"/>
            </Grid.Clip>
            <Image x:Name="CallAlliesBase" Stretch="Uniform" Source="{StaticResource CallForthAlliesBase}"/>
            <Image x:Name="CallAlliesGlow" Stretch="Uniform" Source="{StaticResource CallForthAlliesGlow}" Opacity="1">
                <Image.OpacityMask>
                    <RadialGradientBrush x:Name="MaskBrush" MappingMode="Absolute" RadiusX="{DynamicResource CallAlliesHalfSize}" RadiusY="{DynamicResource CallAlliesHalfSize}"
                                         Center="{DynamicResource CallAlliesCenter}" GradientOrigin="{DynamicResource CallAlliesCenter}">
                        <RadialGradientBrush.GradientStops>
                            <GradientStop x:Name="GradientStart" Color="#00000000" Offset="0"/>
                            <GradientStop x:Name="GradientStop" Color="#FF000000" Offset="1"/>
                        </RadialGradientBrush.GradientStops>
                    </RadialGradientBrush>
                </Image.OpacityMask>
            </Image>
        </Grid>
        <DataTemplate.Triggers>
            <Trigger SourceName="CallAlliesBase" Property="IsVisible" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="CallAlliesGlowAnim">
                        <Storyboard Duration="0:0:10" RepeatBehavior="Forever">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="GradientStop" Storyboard.TargetProperty="Color" Duration="0:0:2">
                                <EasingColorKeyFrame KeyTime="0" Value="#00000000">
                                    <EasingColorKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut"/>
                                    </EasingColorKeyFrame.EasingFunction>
                                </EasingColorKeyFrame>
                                <EasingColorKeyFrame KeyTime="0:0:0.5" Value="#FF000000">
                                    <EasingColorKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut"/>
                                    </EasingColorKeyFrame.EasingFunction>
                                </EasingColorKeyFrame>
                                <EasingColorKeyFrame KeyTime="0:0:1.5" Value="#FF000000">
                                    <EasingColorKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut"/>
                                    </EasingColorKeyFrame.EasingFunction>
                                </EasingColorKeyFrame>
                                <EasingColorKeyFrame KeyTime="0:0:2" Value="#00000000">
                                    <EasingColorKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut"/>
                                    </EasingColorKeyFrame.EasingFunction>
                                </EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="GradientStart" Storyboard.TargetProperty="Color" Duration="0:0:1.5">
                                <EasingColorKeyFrame KeyTime="0" Value="#00000000">
                                    <EasingColorKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut"/>
                                    </EasingColorKeyFrame.EasingFunction>
                                </EasingColorKeyFrame>
                                <EasingColorKeyFrame KeyTime="0:0:0.5" Value="#00000000">
                                    <EasingColorKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut"/>
                                    </EasingColorKeyFrame.EasingFunction>
                                </EasingColorKeyFrame>
                                <EasingColorKeyFrame KeyTime="0:0:1" Value="#FF000000">
                                    <EasingColorKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut"/>
                                    </EasingColorKeyFrame.EasingFunction>
                                </EasingColorKeyFrame>
                                <EasingColorKeyFrame KeyTime="0:0:1.5" Value="#00000000">
                                    <EasingColorKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut"/>
                                    </EasingColorKeyFrame.EasingFunction>
                                </EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="CallAlliesGlowAnim" />
                </Trigger.ExitActions>
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Storyboard x:Key="PingMarkerAnimatedStoryboard" FillBehavior="Stop">
        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GlowEffectIcon" Storyboard.TargetProperty="Visibility">
            <DiscreteObjectKeyFrame KeyTime="0:0:0.0" Value="{x:Static Visibility.Visible}"/>
            <DiscreteObjectKeyFrame KeyTime="0:0:0.9" Value="{x:Static Visibility.Collapsed}"/>
            <DiscreteObjectKeyFrame KeyTime="0:0:1.6" Value="{x:Static Visibility.Visible}"/>
            <DiscreteObjectKeyFrame KeyTime="0:0:2.2" Value="{x:Static Visibility.Collapsed}"/>
            <DiscreteObjectKeyFrame KeyTime="0:0:3.2" Value="{x:Static Visibility.Visible}"/>
            <DiscreteObjectKeyFrame KeyTime="0:0:3.8" Value="{x:Static Visibility.Collapsed}"/>
        </ObjectAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GlowEffectIcon" Storyboard.TargetProperty="Width">
            <EasingDoubleKeyFrame KeyTime="0:0:0" Value="72"/>
            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="6"/>
            <EasingDoubleKeyFrame KeyTime="0:0:0.9" Value="170"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="6"/>
            <EasingDoubleKeyFrame KeyTime="0:0:2.2" Value="170"/>
            <EasingDoubleKeyFrame KeyTime="0:0:3.2" Value="6"/>
            <EasingDoubleKeyFrame KeyTime="0:0:3.8" Value="170"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GlowEffectIcon" Storyboard.TargetProperty="Opacity">
            <SplineDoubleKeyFrame KeyTime="0:0:0" Value="0.6"/>
            <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
            <SplineDoubleKeyFrame KeyTime="0:0:0.9" Value="0.6"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="1"/>
            <EasingDoubleKeyFrame KeyTime="0:0:2.2" Value="0.6"/>
            <EasingDoubleKeyFrame KeyTime="0:0:3.2" Value="1"/>
            <EasingDoubleKeyFrame KeyTime="0:0:3.8" Value="0.6"/>
        </DoubleAnimationUsingKeyFrames>
        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Icon" Storyboard.TargetProperty="Source">
            <DiscreteObjectKeyFrame KeyTime="0:0:0.9">
                <DiscreteObjectKeyFrame.Value>
                    <BitmapImage UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/marker_signal_twist.png"/>
                </DiscreteObjectKeyFrame.Value>
            </DiscreteObjectKeyFrame>
            <DiscreteObjectKeyFrame KeyTime="0:0:1.2">
                <DiscreteObjectKeyFrame.Value>
                    <BitmapImage UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/marker_signal.png"/>
                </DiscreteObjectKeyFrame.Value>
            </DiscreteObjectKeyFrame>
        </ObjectAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Icon" Storyboard.TargetProperty="Opacity">
            <DiscreteDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
            <DiscreteDoubleKeyFrame KeyTime="0:0:0.9" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Icon" Storyboard.TargetProperty="Width">
            <EasingDoubleKeyFrame KeyTime="0:0:0.9" Value="180"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="48"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.5" Value="48"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="84"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.7" Value="48"/>
            <EasingDoubleKeyFrame KeyTime="0:0:3.1" Value="48"/>
            <EasingDoubleKeyFrame KeyTime="0:0:3.2" Value="84"/>
            <EasingDoubleKeyFrame KeyTime="0:0:3.3" Value="48"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Icon" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)">
            <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
            <EasingDoubleKeyFrame KeyTime="0:0:0.9" Value="0"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="180"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.3" Value="150"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.4" Value="160"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.7" Value="190"/>
            <EasingDoubleKeyFrame KeyTime="0:0:2.0" Value="220"/>
            <EasingDoubleKeyFrame KeyTime="0:0:4.0" Value="420"/>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <ControlTemplate x:Key="Map.Template.MarkerPing.InsideViewport" TargetType="{x:Type Control}">
        <Canvas x:Name="canvas" >
            <Image x:Name="GlowEffectIcon" Stretch="Uniform" Width="48" Source="{StaticResource MapMarkerGlow}" RenderTransformOrigin="0.5, 0.55" Visibility="Collapsed"
	               Canvas.Left="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"
	               Canvas.Top="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"/>

            <Button x:Name="IconBtn" Background="{x:Null}" Command="{Binding DataContext.SetCameraOnGameObject,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                    CommandParameter="{Binding Path=DataContext.GameObject, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                    Canvas.Left="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"
                    Canvas.Top="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"
                    RenderTransformOrigin="0.5 0.5" >
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Click" >
                        <b:InvokeCommandAction Command="{Binding DataContext.SelectMapMarker, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding .}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                <Button.RenderTransform>
                    <RotateTransform Angle="{Binding Rotation, RelativeSource={RelativeSource TemplatedParent}}"/>
                </Button.RenderTransform>
                <Image x:Name="Icon" Width="48" Stretch="Uniform" RenderTransformOrigin="0.5,0.5" Visibility="Visible">
                    <Image.RenderTransform>
                        <TransformGroup>
                            <RotateTransform Angle="0"/>
                        </TransformGroup>
                    </Image.RenderTransform>
                </Image>
            </Button>
        </Canvas>
        <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <BeginStoryboard x:Name="PingRotateAnimation" Storyboard="{StaticResource PingMarkerAnimatedStoryboard}">
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                <StopStoryboard BeginStoryboardName="PingRotateAnimation"/>
            </EventTrigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <ControlTemplate x:Key="Map.Template.MarkerPing" TargetType="{x:Type ls:LSWorldMapMarker}">
        <Control x:Name="Marker" Template="{StaticResource Map.Template.MarkerPing.InsideViewport}"/>
    </ControlTemplate>

    <!-- Minimap marker style -->
    <Style x:Key="Minimap.MarkerItemStyle" TargetType="ls:LSWorldMapMarker">
        <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplate}" />
        <Setter Property="Panel.ZIndex" Value="10" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Type}" Value="Player">
                <Setter Property="Panel.ZIndex" Value="5000" />
                <Setter Property="Template" Value="{StaticResource Map.MiniMarkerDataTemplateInAndOutViewport}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Multiplayer">
                <Setter Property="Panel.ZIndex" Value="4500" />
                <Setter Property="Template" Value="{StaticResource Map.MiniMarkerDataTemplateInAndOutViewport}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterParty">
                <Setter Property="Panel.ZIndex" Value="4000" />
                <Setter Property="Template" Value="{StaticResource Map.MiniMarkerDataTemplateInAndOutViewport}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterNeutral">
                <Setter Property="Panel.ZIndex" Value="2000" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterEnemy">
                <Setter Property="Template" Value="{StaticResource Map.MiniMarkerDataTemplateInAndOutViewport}" />
                <Setter Property="Panel.ZIndex" Value="2500" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterFriendly">
                <Setter Property="Template" Value="{StaticResource Map.MiniMarkerDataTemplateInAndOutViewport}" />
                <Setter Property="Panel.ZIndex" Value="2000" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="QuestMarker">
                <Setter Property="Panel.ZIndex" Value="3000" />
                <Setter Property="Template" Value="{StaticResource Map.MiniMarkerDataTemplateInAndOutViewport}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="LocationMarker">
                <Setter Property="Template" Value="{StaticResource Map.MiniMarkerDataTemplateInAndOutViewport}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="SecretMarker">
                <Setter Property="Template" Value="{StaticResource Map.MiniMarkerDataTemplateInAndOutViewport}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Custom">
                <Setter Property="Template" Value="{StaticResource Map.MiniMarkerDataTemplateInAndOutViewport}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Trader">
                <Setter Property="Panel.ZIndex" Value="3800" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Type}" Value="PingMarker">
                <Setter Property="Template" Value="{StaticResource Map.Template.MarkerPing}"/>
                <Setter Property="Panel.ZIndex" Value="9500" />
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <Trigger Property="IsInsideViewport" Value="False">
                <Setter Property="Panel.ZIndex" Value="13800" />
            </Trigger>

            <MultiDataTrigger >
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Player"/>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Panel.ZIndex" Value="13900" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Map marker style -->
    <Style TargetType="ls:LSWorldMapMarker">
        <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplate}" />
        <Setter Property="Panel.ZIndex" Value="10" />
        <Style.Triggers>

            <Trigger Property="IsInsideViewport" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
                <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                <Setter Property="IgnoreMapRotation" Value="True" />
                <Setter Property="Panel.ZIndex" Value="2" />
            </Trigger>
            <DataTrigger Binding="{Binding Type}" Value="Player">
                <Setter Property="Panel.ZIndex" Value="5000" />
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Multiplayer">
                <Setter Property="Panel.ZIndex" Value="4500" />
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterParty">
                <Setter Property="Panel.ZIndex" Value="4000" />
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterNeutral">
                <Setter Property="Panel.ZIndex" Value="2000" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterEnemy">
                <Setter Property="Panel.ZIndex" Value="2500" />
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterFriendly">
                <Setter Property="Panel.ZIndex" Value="2000" />
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="QuestMarker">
                <Setter Property="Panel.ZIndex" Value="3000" />
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Custom">
                <Setter Property="Panel.ZIndex" Value="1000" />
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding GameObject.WantsToTalk, FallbackValue=False}" Value="True">
                <Setter Property="IgnoreMapRotation" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="PingMarker">
                <Setter Property="Template" Value="{StaticResource Map.Template.MarkerPing}"/>
                <Setter Property="Visibility" Value="Visible" />
                <Setter Property="Panel.ZIndex" Value="9500" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--DataType="ls:VMAbility"-->
    <ControlTemplate x:Key="AbilityShortDisplayName" >
        <TextBlock x:Name="ShortText" Text="" Foreground="{TemplateBinding Foreground}"/>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Ability}" Value="Strength">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h1579d774gdbcdg4a97gb3fage409138d104d, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Dexterity">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h8d7356d7g4c37g41e4gb8a2gef3459e12b97, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Intelligence">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=ha1a41e74g2804g4a70g9a85g6235163d41da, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Constitution">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h20676a9ag9216g47dbgba3ag82bd734cfd53, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Wisdom">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h2e9f1067g2dceg4640g8816gc6394e9f0303, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Charisma">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=ha2fc9b3dg3305g404eg9256gf25a06d0b2aa, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="None">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h020d9431g05f9g426dga8f9gc2834654972f, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--DataType="ls:VMAbility"-->
    <ControlTemplate x:Key="AbilityDisplayName" >
        <TextBlock x:Name="ShortText" Text="" Foreground="{TemplateBinding Foreground}" TextTrimming="CharacterEllipsis"/>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Ability}" Value="Strength">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hc8c67074g3c19g44d1g8b7bg9e5a8d06d87f, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Dexterity">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hc30ef867gedecg4c22ga387g648ea8224248, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Intelligence">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h33d41553g12cag401eg8c71g640d3d654054, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Constitution">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hcd19f46ag85bcg41f2gb8fbg1dc69843d250, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Wisdom">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hfb735304g4b35g49e2gbabeg05b183cb6de1, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Charisma">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=habf9df38g5018g44c4gbb6fga77177a64218, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="None">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h020d9431g05f9g426dga8f9gc2834654972f, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SkillDisplayName" >
        <TextBlock x:Name="ShortText" Text="" Foreground="{TemplateBinding Foreground}"/>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Skill}" Value="None">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h020d9431g05f9g426dga8f9gc2834654972f, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Deception">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='hcaeb4d5fg8b57g4520g912fg4fae8267b844', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Intimidation">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='h6efd5166g9073g439fgb814gcd9186cb8e61', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Performance">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='hc632dc67g7806g436fg9a73gb80b4d6f5e7c', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Persuasion">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='h257372d3g6f98g4450g813bg190e19aecce4', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Acrobatics">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='hf18eb9a0g33a1g481fg9646g5ddeaa7e2156', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="SleightOfHand">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='hba2e587ag00b7g4f75ga38bg8754bcaa7b6b', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Stealth">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='h49c7514bg504dg4445g915cgb9562d8585ac', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Arcana">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='h22b7e6b6g8c55g49c6gba43gd16c8e399fea', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="History">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='hab026295g69b7g4013g9b14g807992eb1a22', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Investigation">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='hfd00683fg1522g4f04g91c4g9bef52cda3d0', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Nature">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='h63548a6ag0bc9g4e87g8d62gd6e7b8771333', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Religion">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='h9eab2802gb592g4c23g87b9g165135e307a1', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Athletics">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='h06f7e4d9g1d7eg42aagb745g2e08ebeb9de2', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="AnimalHandling">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='hab871a76g3541g4045ga1c1gbb9b5d13ee36', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Insight">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='h64f8e22agf0eeg4a0bga9abgb0178dd5e670', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Medicine">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='h23dfa632g875dg4081ga2abg950b7f7adc13', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Perception">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='h153612e7g6e83g48fbg855ag7088e7eea89e', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skill}" Value="Survival">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source='ha479d52eg60c5g4f9eg88ddg43e201dae0d3', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="StatsDisplayName" >
        <TextBlock x:Name="ShortText" Text="{Binding IDString,StringFormat={}NOTFound:{0}}" Foreground="{TemplateBinding Foreground}" TextWrapping="Wrap" TextTrimming="CharacterEllipsis"/>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IDString}" Value="None">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h020d9431g05f9g426dga8f9gc2834654972f, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="Weight">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hd04c7f9bg821bg4575g935ag7f26425d7262, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="Health">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hc410bc67g130dg4ccdgbb36g42bb0a72c08e, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="TemporaryHealth">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h8aaf9bf5g6eb5g4417g9a93g89319d3c7c41, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="ArmorClass">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h6d1b6256g3ea8g4e82gaa0agc7fbeb252fdf, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="WeaponRange">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=ha811afdbg95e1g4fb3gad8dgc5c9b0ea02f9, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="Level">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hdac4a008g7019g4a50g9887gc03eb73be9b4, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="Experience">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hd7ebd9a9g2c08g4885gb271gb56db4de0696, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="AttackBonus">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h4db5409ag8fb5g4d46g88a1g465c84e20fef, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="EquippedWeaponDamage">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h53477166gd2ebg4769gad58gc949e73e89c4, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="MeleeAttackBonus">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h7735c607g5b5eg46dcgab9cgb9ed3eff6df7, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="OffHandMeleeAttackBonus">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h9ff656c8gbe25g470dgb74eg044d418d332e, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="RangedAttackBonus">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h452ae862g7d88g48a8ga16eg298bc2e31df9, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="OffHandRangedAttackBonus">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hbfb351dcg073dg4e9bg85d4gf9e3902595d0, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="SpellAttackBonus">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h78fc0f9agc230g4fb0g954egc7dc99ff702f, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="SpellDifficultyCheck">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h1eb444a8g4504g4584g8848g63dbed07edee, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="ProficiencyBonus">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h65b46ad4g2eacg47d5gb4b4g124ca3b8aaef, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="Initiative">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h8c8cc7e3gdaf7g46d2g9d3bg04a31d8f0599, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="DarkvisionRange">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h18b82151g9365g419fgbb78g4fedc6def4d1, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="StatsDisplayNameWrap" >
        <TextBlock x:Name="ShortText" Text="{Binding IDString,StringFormat={}NOTFound:{0}}" Foreground="{TemplateBinding Foreground}" TextWrapping="Wrap"/>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IDString}" Value="None">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h020d9431g05f9g426dga8f9gc2834654972f, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="Weight">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hd04c7f9bg821bg4575g935ag7f26425d7262, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="Health">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hc410bc67g130dg4ccdgbb36g42bb0a72c08e, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="TemporaryHealth">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h8aaf9bf5g6eb5g4417g9a93g89319d3c7c41, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="ArmorClass">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h6d1b6256g3ea8g4e82gaa0agc7fbeb252fdf, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="WeaponRange">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=ha811afdbg95e1g4fb3gad8dgc5c9b0ea02f9, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="Level">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hdac4a008g7019g4a50g9887gc03eb73be9b4, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="Experience">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hd7ebd9a9g2c08g4885gb271gb56db4de0696, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="AttackBonus">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h4db5409ag8fb5g4d46g88a1g465c84e20fef, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="EquippedWeaponDamage">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h53477166gd2ebg4769gad58gc949e73e89c4, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="MeleeAttackBonus">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h7735c607g5b5eg46dcgab9cgb9ed3eff6df7, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="OffHandMeleeAttackBonus">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h9ff656c8gbe25g470dgb74eg044d418d332e, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="RangedAttackBonus">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h452ae862g7d88g48a8ga16eg298bc2e31df9, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="OffHandRangedAttackBonus">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hbfb351dcg073dg4e9bg85d4gf9e3902595d0, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="SpellAttackBonus">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h78fc0f9agc230g4fb0g954egc7dc99ff702f, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="SpellDifficultyCheck">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h1eb444a8g4504g4584g8848g63dbed07edee, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="ProficiencyBonus">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h65b46ad4g2eacg47d5gb4b4g124ca3b8aaef, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="Initiative">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h8c8cc7e3gdaf7g46d2g9d3bg04a31d8f0599, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="DarkvisionRange">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=h18b82151g9365g419fgbb78g4fedc6def4d1, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IDString}" Value="Movement">
                <Setter TargetName="ShortText" Property="Text" Value="{Binding Source=hb827daf0gcc2eg4d22g99b8g23e9219cfca1, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Player Slots UI - Common -->
    <ControlTemplate x:Key="InviteButtonTemplate">
        <ControlTemplate.Resources>

            <BitmapImage x:Key="AddToParty_Default" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/frame_addToParty_d.png"/>
            <BitmapImage x:Key="AddToParty_Highlighted" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/frame_addToParty_h.png"/>
            <BitmapImage x:Key="AddToParty_Pressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/frame_addToParty_p.png"/>
            <BitmapImage x:Key="AddToParty_Disabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/frame_addToParty_disabled.png"/>

        </ControlTemplate.Resources>
        
        <ls:LSButton Command="{Binding DataContext.InvitePlayer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" SoundID="UI_HUD_Shared_Invite" Margin="-4">
            <ls:LSButton.ToolTip>
                <ls:LSTooltip Content="{Binding Source='h5bacb1e0geecag4473g9aa1g3f3ed207377e',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </ls:LSButton.ToolTip>
            <ls:LSButton.Template>
                <ControlTemplate TargetType="ls:LSButton">
                    <Image x:Name="img" Source="{StaticResource AddToParty_Default}" Stretch="None"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource AddToParty_Highlighted}" TargetName="img"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource AddToParty_Pressed}" TargetName="img"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Source" Value="{StaticResource AddToParty_Disabled}" TargetName="img"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding DataContext.Data.LobbyVisibility, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Offline">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DataContext.IsHost, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </ls:LSButton.Template>
        </ls:LSButton>
    </ControlTemplate>

    <DataTemplate x:Key="PlayerSlotItemTemplate">
        <DataTemplate.Resources>

            <BitmapImage x:Key="FramePlayer" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/frame_profile_d.png"/>
            <BitmapImage x:Key="FramePlayer_Highlighted" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/frame_profile_h.png"/>

        </DataTemplate.Resources>

        <Grid x:Name="PlayerSlot" Width="116" Height="116" Margin="-4">
            <Grid.ToolTip>
                <ls:LSTooltip Content="{Binding Path=DataContext.Name, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Grid.ToolTip>
            
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseEnter">
                    <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                </b:EventTrigger>
                
                <b:EventTrigger EventName="MouseLeave">
                    <ls:LSPlaySound Sound="UI_Shared_Out"/>
                </b:EventTrigger>
                
                <b:EventTrigger EventName="Click">
                    <ls:LSPlaySound Sound="UI_Shared_Click"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <Border x:Name="commIcon" Background="{Binding CommunityIcon}" Margin="16"/>
            <Image x:Name="framePlayer" Source="{StaticResource FramePlayer}" Stretch="UniformToFill" IsHitTestVisible="False" Margin="2"/>
        </Grid>

        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="framePlayer" Property="Source" Value="{StaticResource FramePlayer_Highlighted}"/>
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="PlayerSlotsTemplate">
        <Grid HorizontalAlignment="Center" Margin="0,-8">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                <ItemsControl ItemsSource="{Binding Data.Players}" ItemTemplate="{StaticResource PlayerSlotItemTemplate}" MinHeight="80" AlternationCount="4">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemContainerStyle>
                        <Style TargetType="ContentPresenter">
                            <Style.Triggers>
                                <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                                    <Setter Property="Tag" Value="Local"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ItemsControl.ItemContainerStyle>
                </ItemsControl>
                
                <ContentControl x:Name="slot1" Template="{DynamicResource InviteButtonTemplate}"/>
                <ContentControl x:Name="slot2" Template="{DynamicResource InviteButtonTemplate}"/>
                <ContentControl x:Name="slot3" Template="{DynamicResource InviteButtonTemplate}"/>
            </StackPanel>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Data.Players.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=3}" Value="True">
                <Setter TargetName="slot3" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="slot3" Property="IsEnabled" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Data.Players.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=2}" Value="True">
                <Setter TargetName="slot2" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="slot2" Property="IsEnabled" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Data.Players.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True">
                <Setter TargetName="slot1" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="slot1" Property="IsEnabled" Value="False"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MinimalPlayerSlotsMenuStyle" TargetType="{x:Type Control}" BasedOn="{StaticResource baseStyle}">
        <Setter Property="Margin" Value="{StaticResource ButtonHint.Margin.Left}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ItemsControl ItemsSource="{Binding Data.Players}" ItemTemplate="{StaticResource PlayerSlotItemTemplate}" MinHeight="80" AlternationCount="4" HorizontalAlignment="Center" Visibility="{Binding Data.Players.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter=1}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ContentPresenter">
                                <Style.Triggers>
                                    <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                                        <Setter Property="Tag" Value="Local"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                    </ItemsControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
