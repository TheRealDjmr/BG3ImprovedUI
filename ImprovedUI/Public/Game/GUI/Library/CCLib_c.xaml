<!--

    Resources for controller version of CC & LevelUp
    
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
                    xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
					mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Library/FocusableControls_c.xaml"/>
        <ResourceDictionary Source="../Library/CCLib.xaml"/>
        <ResourceDictionary Source="../Library/ControllerHints.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <System:Single x:Key="TabsPanelHeight">130</System:Single>
    <System:Single x:Key="TabsTextWidthAddition">44</System:Single>
    <System:Single x:Key="TabsSelectorWidthAddition">100</System:Single>
    <Thickness x:Key="CClistPadding">0,0,0,12</Thickness>

    <Duration x:Key="TabWidthAnimationDuration">0:0:0.2</Duration>
    <Duration x:Key="TabsSlideAnimationDuration">0:0:0.2</Duration>
    <!-- Has to be faster than Slide animation -->
    <Duration x:Key="TabSelectorAnimationDuration">0:0:0.15</Duration>
    <Duration x:Key="BackplateSlideAnimationDuration">0:0:0.2</Duration>

    <!-- Properties of the background shadow for CC type menus -->
    <System:Single x:Key="leftSidePanelBackgroundWidth">1840</System:Single>
    <System:Single x:Key="leftSidePanelBackgroundWidthSplitscreen">1640</System:Single>
    <System:Single x:Key="summaryPanelWidth">800</System:Single>
    <System:Single x:Key="summaryPanelBackgroundWidth">920</System:Single>
    <System:Single x:Key="appearancePanelBackgroundWidth">1300</System:Single>
    <System:Single x:Key="appearancePanelBackgroundWidthSplitScreen">1000</System:Single>
    <System:Single x:Key="bottomBackgroundHeight">200</System:Single>

    <System:Single x:Key="colourRectSize">80</System:Single>
    <System:Single x:Key="gridIconSize">234</System:Single>
    <System:Single x:Key="gridIconFrameSize">274</System:Single>
    <System:Single x:Key="gameplaySideWidth">1580</System:Single>
    <System:Single x:Key="gameplayPanelWidth">1218</System:Single>
    <System:Single x:Key="gameplayPanelHeight">1750</System:Single>
    <System:Single x:Key="appearancePanelWidth">760</System:Single>
    <System:Single x:Key="appearancePanelHeight">1700</System:Single>
    <System:Single x:Key="appearancePanelHeight_SplitScreen">1600</System:Single>

    <System:Double x:Key="IconTextWidth">250</System:Double>
    <System:Double x:Key="SelectedCarouselIconSize">300</System:Double>
    <System:Double x:Key="UnselectedCarouselIconSize">200</System:Double>

    <Thickness x:Key="selectorSlices">44,44,44,44</Thickness>
    <Thickness x:Key="RightCarouselMargin">0,0,20,0</Thickness>
    <Thickness x:Key="LeftCarouselMargin">20,0,0,0</Thickness>

    <BitmapImage x:Key="IconTick" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_ico_tick.png"/>

    <BitmapImage x:Key="Selector1" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_selector1.png"/>
    <BitmapImage x:Key="Selector2" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_selector2.png"/>
    <BitmapImage x:Key="SelectedItem1" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_selectedItem_1.png"/>
    <BitmapImage x:Key="SelectedItem2" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_selectedItem_2.png"/>
    <BitmapImage x:Key="SelectorSelected1" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_selector_selected1.png"/>
    <BitmapImage x:Key="SelectorSelected2" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_selector_selected2.png"/>

    <BitmapImage x:Key="AltButton_d" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_altButton_d.png"/>
    <BitmapImage x:Key="AltButton_selected" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_altButton_selected.png"/>

    <BitmapImage x:Key="DotOff" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_pagination_dot_off.png"/>
    <BitmapImage x:Key="DotOn" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_pagination_dot_on.png"/>
    <BitmapImage x:Key="DotBonus" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_pagination_dot_bonus.png"/>
    <BitmapImage x:Key="tabDotOff" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_pagination_tab_off.png"/>
    <BitmapImage x:Key="tabDotOn" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_pagination_tab_on.png"/>

    <BitmapImage x:Key="ListItemSelected1" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_list_buttonBG_h1.png"/>
    <BitmapImage x:Key="ListItemSelected2" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_list_buttonBG_h2.png"/>
    <BitmapImage x:Key="ListItemSelected3" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_list_buttonBG_h2.png"/>

    <BitmapImage x:Key="CameraActionIndication" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_cameraActionIndication.png"/>
    <BitmapImage x:Key="CameraActionStickIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/ControllerHints/shared/ico_rs.png"/>

    <BitmapImage x:Key="CarouselBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_carousel_BG.png"/>
    <BitmapImage x:Key="CarouselArrow_d" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_carousel_arrow_d.png"/>
    <BitmapImage x:Key="CarouselArrowDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_carousel_arrow_disabled.png"/>

    <BitmapImage x:Key="ListButtonBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_list_buttonBG_generalAlt.png"/>
    <BitmapImage x:Key="ListButtonBg_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_list_buttonBG_h.png"/>

    <BitmapImage x:Key="IconProficiency" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/ico_proficiency.png"/>

    <BitmapImage x:Key="SideArrowChunky" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_ico_arrow_chunky.png"/>
    <BitmapImage x:Key="NavTabSelector" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_nav_tab_selector.png"/>

    <BitmapImage x:Key="PrimaryButtonBG" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_primaryButtonBG.png"/>
    <BitmapImage x:Key="PrimaryButtonBG_Disabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_cc_primaryButtonBG_disabled.png"/>

    <ImageBrush x:Key="IconFeatDefaultBrush" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/Icons/PassiveFeature_Generic.png"/>

    <System:String x:Key="FallBackPassiveIconPath">Assets/Tooltips/Icons/PassiveFeature_Generic.png</System:String>

    <BitmapImage x:Key="ErrorIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation_c/ico_errorTriangle.png" />
    <BitmapImage x:Key="ErrorExclamation" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation_c/ico_errorExclamation.png" />

    <DataTemplate x:Key="MissingRequirementsErrorTemplate">
        <StackPanel Orientation="Horizontal">
            <Image x:Name="cross" Source="{StaticResource ErrorExclamation}" Stretch="None" Margin="-11,0,11,0" VerticalAlignment="Center"/>
            <TextBlock Foreground="{StaticResource CCTabToDo}" Text="{Binding Source='hb23440cag3dbdg4bb4ga508g3b052e85189f', Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Center"/>
        </StackPanel>
    </DataTemplate>

    <LinearGradientBrush x:Key="leftFadeBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Offset="0" Color="Transparent" />
        <GradientStop Offset="0.75" Color="White" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="rightFadeBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Offset="0.25" Color="White" />
        <GradientStop Offset="1" Color="Transparent" />
    </LinearGradientBrush>

    <Storyboard x:Key="selectorStoryboard" RepeatBehavior="Forever" AutoReverse="True">
        <DoubleAnimation Storyboard.TargetName="img1" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:2"/>
        <DoubleAnimation Storyboard.TargetName="img2" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:2"/>
        <DoubleAnimation Storyboard.TargetName="img3" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:2"/>
        <DoubleAnimation Storyboard.TargetName="img4" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:2"/>
    </Storyboard>

    <Storyboard x:Key="focusSummaryPanelStoryboard">
        <!-- slide summary panel to the left-->
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="summaryAnimPanel" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
            <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="-100">
                <EasingDoubleKeyFrame.EasingFunction>
                    <CubicEase EasingMode="EaseOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="summaryBackground" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
            <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1.15">
                <EasingDoubleKeyFrame.EasingFunction>
                    <CubicEase EasingMode="EaseOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="unfocusSummaryPanelStoryboard">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="summaryAnimPanel" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
            <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0">
                <EasingDoubleKeyFrame.EasingFunction>
                    <CubicEase EasingMode="EaseOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="summaryBackground" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
            <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1">
                <EasingDoubleKeyFrame.EasingFunction>
                    <CubicEase EasingMode="EaseOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Style x:Key="gameplayPanelScrollViewerStyle" TargetType="ScrollViewer" BasedOn="{StaticResource {x:Type ScrollViewer}}">
        <Setter Property="Width" Value="{StaticResource gameplayPanelWidth}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="20,0,0,0"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
    </Style>

    <ControlTemplate x:Key="paginatedListItemContainerStyle" TargetType="ListBox">
        <Grid Width="{StaticResource appearancePanelWidth}" MinHeight="176" Margin="{StaticResource CClistPadding}">
            <Control x:Name="Frame" Visibility="Collapsed" Style="{StaticResource FocusableBorderStyle}" />
            <Image x:Name="box" Source="{StaticResource ListButtonBg}" Stretch="Fill"/>
            <ContentPresenter x:Name="content" IsEnabled="False"/>

        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                <Setter TargetName="box" Property="Source" Value="{StaticResource ListButtonBg_h}"/>
                <Setter TargetName="content" Property="IsEnabled" Value="True"/>
                <Setter TargetName="Frame" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style x:Key="paginatedListBoxStyleFixed" TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">

                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <Rectangle x:Name="dashLine" Height="8" Fill="{StaticResource LS_accent100TxtColor}" Width="60" Margin="3,0,3,0" Opacity="0.6" />
                                <ControlTemplate.Triggers>

                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="dashLine" Property="Opacity" Value="1" />
                                        <Setter TargetName="dashLine" Property="Width" Value="80" />
                                    </Trigger>
                                    
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Opacity, ElementName=dashLine}" Value="1"/>
                                            <Condition Binding="{Binding Path=(ls:MoveFocus.IsFocused),RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="dashLine" Property="Height" Value="12" />
                                        <Setter TargetName="dashLine" Property="Fill" Value="White" />
                                    </MultiDataTrigger>
                                    
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>

                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="sliderListBoxStyle" TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <Rectangle VerticalAlignment="center" x:Name="dashLine" Height="8" Fill="{StaticResource LS_accent100TxtColor}"  Visibility="Hidden"  >
                                    <Rectangle.Width>
                                        <MultiBinding Converter="{StaticResource DivideMultiConverter}" ConverterParameter="Round" >
                                            <Binding Path="ActualWidth" ElementName="AppearanceCarouselSlider" Converter="{StaticResource AddConverter}" ConverterParameter="-100"/>
                                            <Binding Path="ItemsSource.Count" RelativeSource="{RelativeSource AncestorType={x:Type ListBox}}" Converter="{StaticResource AddConverter}" ConverterParameter="-1"/>
                                        </MultiBinding>
                                    </Rectangle.Width>
                                </Rectangle>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="dashLine" Property="Width" Value="100" />
                                        <Setter TargetName="dashLine" Property="Visibility" Value="Visible" />
                                    </Trigger>

                                    <DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                                        <Setter TargetName="dashLine" Property="Height" Value="12" />
                                        <Setter TargetName="dashLine" Property="Fill" Value="White" />
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"  />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="paginatedListBoxStyle" TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <Grid  VerticalAlignment="center" x:Name="dashLine" Height="8" Opacity="0.45" >
                                    <Grid.Width>
                                        <MultiBinding Converter="{StaticResource DivideMultiConverter}" ConverterParameter="Round" >
                                            <Binding Path="ActualWidth" ElementName="AppearanceCarouselSlider"/>
                                            <Binding Path="ItemsSource.Count" RelativeSource="{RelativeSource AncestorType={x:Type ListBox}}" Converter="{StaticResource AddConverter}" ConverterParameter="1"/>
                                        </MultiBinding>
                                    </Grid.Width>
                                    <Rectangle x:Name="dashLineFill" Fill="{StaticResource LS_accent100TxtColor}" Margin="3,0" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused),RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Value="True" >
                                        <Setter TargetName="dashLine" Property="Opacity" Value="0.2" />
                                    </DataTrigger>

                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="dashLine" Property="Opacity" Value="1" />
                                        <Setter TargetName="dashLine" Property="Width" >
                                            <Setter.Value>
                                                <MultiBinding Converter="{StaticResource DivideMultiConverter}" ConverterParameter="Round" >
                                                    <Binding Path="ActualWidth" ElementName="AppearanceCarouselSlider" Converter="{StaticResource MultiplierConverter}" ConverterParameter="2"/>
                                                    <Binding Path="ItemsSource.Count" RelativeSource="{RelativeSource AncestorType={x:Type ListBox}}" Converter="{StaticResource AddConverter}" ConverterParameter="1"/>
                                                </MultiBinding>
                                            </Setter.Value>
                                        </Setter>

                                    </Trigger>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Opacity, ElementName=dashLine}" Value="1"/>
                                            <Condition Binding="{Binding Path=(ls:MoveFocus.IsFocused),RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="dashLine" Property="Height" Value="12" />
                                        <Setter TargetName="dashLineFill" Property="Fill" Value="White" />
                                    </MultiDataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"  HorizontalAlignment="Stretch" Margin="0,0,0,0" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="gameplayScrolledStackPanelStyle" TargetType="StackPanel">
        <Setter Property="Margin" Value="0,0,18,0"/>
    </Style>

    <Style x:Key="CCBaseText" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_textStrokeColor}"/>
        <Setter Property="noesis:Text.StrokeThickness" Value="4"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <Style x:Key="PanelHeaderText" TargetType="TextBlock" BasedOn="{StaticResource CCBaseText}">
        <Setter Property="FontSize" Value="{StaticResource ScaledMassiveFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource LS_extraspecialTxtColor}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>

    <Style x:Key="PanelSubHeaderText" TargetType="TextBlock" BasedOn="{StaticResource CCBaseText}">
        <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>

    <Style x:Key="AppearanceSubHeaderText" TargetType="TextBlock" BasedOn="{StaticResource CCBaseText}">
        <Setter Property="FontSize" Value="{StaticResource ScaledIntermediateFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource CCTextLight}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,32,0,22"/>
    </Style>

    <Style x:Key="IconCarouselText" TargetType="TextBlock" BasedOn="{StaticResource CCBaseText}">
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledTitleFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource LS_extraspecialTxtColor}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>

    <Style x:Key="PanelDescriptionText" TargetType="TextBlock" BasedOn="{StaticResource CCBaseText}">
        <Setter Property="FontSize" Value="{StaticResource ScaledMediumFontSize}"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="MaxWidth" Value="1056"/>
        <Setter Property="Effect" Value="{StaticResource HUD.DropShadow}"/>
    </Style>

    <Style x:Key="CarouselSideDescriptionText" TargetType="TextBlock" BasedOn="{StaticResource PanelDescriptionText}">
        <Setter Property="Foreground" Value="{StaticResource CCTextLight}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="Width" Value="700"/>
        <Setter Property="Margin" Value="0,20,0,20"/>
    </Style>

    <Style x:Key="gameplayPanelContinueTextStyle" TargetType="TextBlock" BasedOn="{StaticResource CCBaseText}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource CCTextNormal}"/>
    </Style>

    <Style x:Key="FeatureListHeaderText" TargetType="TextBlock" BasedOn="{StaticResource CCBaseText}">
        <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,20,0,20"/>
    </Style>

    <Style x:Key="FeatureListItemIconHolder" TargetType="Grid">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Margin" Value="30,0,0,0"/>
    </Style>

    <Style x:Key="FeatureListItemName" TargetType="TextBlock" BasedOn="{StaticResource CCBaseText}">
        <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="160,0,0,0"/>
    </Style>

    <Style x:Key="FeatureListItemKind" TargetType="TextBlock" BasedOn="{StaticResource CCBaseText}">
        <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="Foreground" Value="{StaticResource LS_accent25TxtColor}"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Margin" Value="0,0,50,0"/>
    </Style>

    <Style x:Key="AppearanceCarouselTitleText" TargetType="TextBlock" BasedOn="{StaticResource CCBaseText}">
        <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="0,-6,0,0"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledIntermediateFontSize}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{StaticResource LS_selectedTextPad}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="AppearanceCarouselValueText" TargetType="TextBlock" BasedOn="{StaticResource CCBaseText}">
        <Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledMediumFontSize}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <ControlTemplate x:Key="featuresGainedSubHeader">
        <StackPanel Width="{StaticResource gameplayPanelWidth}">
            <TextBlock Text="{Binding Source='h230f60c6g161fg481bgbe52g42bc264618dd', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource FeatureListHeaderText}"/>
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="buttonBackplateTemplate" TargetType="ContentControl">
        <ls:LSNineSliceImage x:Name="bg" ImageSource="{StaticResource PrimaryButtonBG_Large}" Slices="{StaticResource primaryButtonSlices}" MinWidth="168" MinHeight="144" Padding="12,0,48,0">
            <ContentPresenter x:Name="contents"/>
        </ls:LSNineSliceImage>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="bg" Property="ImageSource" Value="{StaticResource PrimaryButtonBG_LargeDisabled}"/>
                <Setter TargetName="contents" Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="nextButtonTemplate" TargetType="Button">
        <ls:LSNineSliceImage x:Name="bg" ImageSource="{StaticResource PrimaryButtonBG_Large}" Slices="{StaticResource primaryButtonSlices}" MinWidth="168" MinHeight="144" Padding="12,0,48,0" Margin="0,0,0,20">
            <StackPanel x:Name="contents" Orientation="Horizontal" VerticalAlignment="Center">

                <Control x:Name="img" DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIDelete'}" Template="{StaticResource ControllerButton.ImageSwitcher}" Width="{DynamicResource ScaledControllerHintSize}" Height="{DynamicResource ScaledControllerHintSize}" Focusable="False" VerticalAlignment="Center" Margin="4,0,-10,0"/>

                <TextBlock x:Name="text" ls:TextBlockFormatter.SourceText="{Binding Source='hc1e4c45fg54e3g49c1ga0aeg88d0eed38ae6', Converter={StaticResource TranslatedStringConverter}}" FontFamily="{StaticResource SpecialFont}" FontWeight="Bold" FontSize="{StaticResource ScaledIntermediateFontSize}" VerticalAlignment="Center" Margin="0,0,8,0"/>

            </StackPanel>
        </ls:LSNineSliceImage>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="bg" Property="ImageSource" Value="{StaticResource PrimaryButtonBG_LargeDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="nextGameplayTabNavButtonStyle" TargetType="ls:LSButton">
        <Setter Property="Template" Value="{StaticResource nextButtonTemplate}"/>
        <Setter Property="BoundEvent" Value="UIDelete"/>
        <Setter Property="Command" Value="{Binding DataContext.NextGameplayTab, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
        <Setter Property="CommandParameter" Value="{Binding ElementName=gameplayTabs}"/>
    </Style>

    <ControlTemplate x:Key="SelectedOnlyIndicatorTemplate">
        <Grid>
            <Grid.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                    <BeginStoryboard Storyboard="{StaticResource selectorStoryboard}"/>
                </EventTrigger>
            </Grid.Triggers>
            <ls:LSNineSliceImage x:Name="img1" ImageSource="{StaticResource SelectedItem1}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="1"/>
            <ls:LSNineSliceImage x:Name="img2" ImageSource="{StaticResource SelectedItem2}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="1"/>
            <ls:LSNineSliceImage x:Name="img3" ImageSource="{StaticResource SelectedItem2}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="0"/>
            <ls:LSNineSliceImage x:Name="img4" ImageSource="{StaticResource SelectedItem2}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="0"/>
            <ls:LSNineSliceImage x:Name="img5" ImageSource="{StaticResource SelectedItem2}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="1"/>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="FocusedOnlyIndicatorTemplate">
        <Grid>
            <Grid.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                    <BeginStoryboard Storyboard="{StaticResource selectorStoryboard}"/>
                </EventTrigger>
            </Grid.Triggers>
            <ls:LSNineSliceImage x:Name="img1" ImageSource="{StaticResource Selector1}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="1"/>
            <ls:LSNineSliceImage x:Name="img2" ImageSource="{StaticResource Selector2}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="1"/>
            <ls:LSNineSliceImage x:Name="img3" ImageSource="{StaticResource Selector2}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="0"/>
            <ls:LSNineSliceImage x:Name="img4" ImageSource="{StaticResource Selector2}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="0"/>
            <ls:LSNineSliceImage x:Name="img5" ImageSource="{StaticResource Selector2}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="1"/>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="FocusedAndSelectedIndicatorTemplate">
        <Grid>
            <Grid.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                    <BeginStoryboard Storyboard="{StaticResource selectorStoryboard}"/>
                </EventTrigger>
            </Grid.Triggers>
            <ls:LSNineSliceImage x:Name="img1" ImageSource="{StaticResource SelectorSelected1}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="1"/>
            <ls:LSNineSliceImage x:Name="img2" ImageSource="{StaticResource SelectorSelected1}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="1"/>
            <ls:LSNineSliceImage x:Name="img3" ImageSource="{StaticResource SelectorSelected2}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="0"/>
            <ls:LSNineSliceImage x:Name="img4" ImageSource="{StaticResource SelectorSelected2}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="0"/>
            <ls:LSNineSliceImage x:Name="img5" ImageSource="{StaticResource SelectorSelected2}" Slices="{StaticResource selectorSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="1"/>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="FocusedListItemIndicatorTemplate">
        <Grid>
            <Grid.Resources>
                <Thickness x:Key="listItemSlices">60,60,60,60</Thickness>
            </Grid.Resources>
            <Grid.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                    <BeginStoryboard Storyboard="{StaticResource selectorStoryboard}"/>
                </EventTrigger>
            </Grid.Triggers>

            <ls:LSNineSliceImage x:Name="img1" ImageSource="{StaticResource ListItemSelected1}" Slices="{StaticResource listItemSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="1"/>
            <ls:LSNineSliceImage x:Name="img2" ImageSource="{StaticResource ListItemSelected1}" Slices="{StaticResource listItemSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="1"/>
            <ls:LSNineSliceImage x:Name="img3" ImageSource="{StaticResource ListItemSelected2}" Slices="{StaticResource listItemSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="0"/>
            <ls:LSNineSliceImage x:Name="img4" ImageSource="{StaticResource ListItemSelected2}" Slices="{StaticResource listItemSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="0"/>
            <ls:LSNineSliceImage x:Name="img5" ImageSource="{StaticResource ListItemSelected3}" Slices="{StaticResource listItemSlices}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Opacity="1"/>

        </Grid>
    </ControlTemplate>


    <ControlTemplate x:Key="ListButtonTemplate" TargetType="ContentControl">
        <Grid Margin="0,-6,0,-18">
            <Image x:Name="box" Source="{StaticResource ListButtonBg}" Stretch="None" Opacity="0.8"/>

            <ContentPresenter x:Name="content" IsEnabled="False" Margin="10,0,0,0"/>

            <Control x:Name="frame" Width="1180" Height="152"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                <Setter TargetName="box" Property="Source" Value="{StaticResource ListButtonBg_h}"/>
                <Setter TargetName="content" Property="IsEnabled" Value="True"/>
                <Setter TargetName="frame" Property="Template" Value="{StaticResource FocusedListItemIndicatorTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DataContext.LevelUpStep, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Started">
                <Setter TargetName="box" Property="Source" Value="{StaticResource ListButtonBg}"/>
                <Setter TargetName="frame" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AppearanceListButtonTemplate" TargetType="ContentControl">
        <Grid Width="{StaticResource appearancePanelWidth}" MinHeight="176" Margin="{StaticResource CClistPadding}">
            <Control x:Name="Frame" Visibility="Collapsed" Style="{StaticResource FocusableBorderStyle}" />
            <Image x:Name="box" Source="{StaticResource ListButtonBg}" Stretch="Fill"/>
            <ContentPresenter x:Name="content" IsEnabled="False"/>

        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                <Setter TargetName="box" Property="Source" Value="{StaticResource ListButtonBg_h}"/>
                <Setter TargetName="content" Property="IsEnabled" Value="True"/>
                <Setter TargetName="Frame" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AppearanceListButtonTemplateShort" TargetType="ContentControl">
        <Grid Width="{StaticResource appearancePanelWidth}" MinHeight="84" Margin="{StaticResource CClistPadding}">
            <Control x:Name="Frame" Visibility="Collapsed" Style="{StaticResource FocusableBorderStyle}" />
            <Image x:Name="box" Stretch="Fill"/>
            <ContentPresenter x:Name="content" IsEnabled="False"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                <Setter TargetName="box" Property="Source" Value="{StaticResource ListButtonBg_h}"/>
                <Setter TargetName="content" Property="IsEnabled" Value="True"/>
                <Setter TargetName="Frame" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="FeatureIcon">
        <Grid x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTip="{StaticResource CCSpellTooltip}" Margin="-20">

            <Ellipse x:Name="icon" Fill="{Binding Icon}" Width="94" Height="94"/>

            <Control x:Name="frame" Width="134" Height="134"/>

        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                <Setter TargetName="frame" Property="Template" Value="{StaticResource FocusedOnlyIndicatorTemplate}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Icon}" Value="{x:Null}">
                <Setter TargetName="icon" Property="Fill" Value="{StaticResource missingIconBrush}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="SpellIconTemplate">

        <Grid Margin="-20">

            <Border x:Name="border" BorderBrush="Transparent" BorderThickness="4" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Grid x:Name="base" Width="94" Height="94" ToolTip="{StaticResource CCSpellTooltip}" ls:MoveFocus.Focusable="True" Focusable="True">
                    <Rectangle Fill="{Binding Icon}" />
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Level, Converter={StaticResource DecimalToRomanConverter}}" FontSize="{StaticResource ScaledMediumFontSize}" Foreground="{StaticResource LS_specialTxtColor}" noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" noesis:Text.StrokeThickness="6" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,0,10,-4"/>
                </Grid>
            </Border>

            <Control x:Name="frame" Width="134" Height="134"/>

        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Override}" Value="Worse">
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource LS_SpellOverrideWorse}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Override}" Value="Equal">
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource LS_SpellOverrideEqual}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Override}" Value="Better">
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource LS_SpellOverrideBetter}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Override}" Value="Different">
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource LS_SpellOverrideDifferent}"/>
            </DataTrigger>

            <Trigger Property="ls:AttachedProperties.InheritedTag" Value="{StaticResource FalseValue}">
                <Setter TargetName="base" Property="ls:MoveFocus.Focusable" Value="False"/>
                <Setter TargetName="base" Property="Focusable" Value="False"/>
            </Trigger>

            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                <Setter TargetName="frame" Property="Template" Value="{StaticResource FocusedOnlyIndicatorTemplate}"/>
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="SpellRefIcon">
        <Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding Spell}"/>
    </DataTemplate>

    <Style x:Key="spellSelectorSpellListStyle" TargetType="ItemsControl">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel MaxWidth="804" HorizontalAlignment="Center"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding NotAvailable}" Value="True">
                            <Setter Property="Control.Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="progressionFeaturesSpellList">
        <ItemsControl ItemsSource="{Binding .}">
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="ls:VMCharacterCreationSpell">
                    <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTip="{StaticResource CCSpellTooltip}" ToolTipService.Placement="Right">
                        <Grid>
                            <Grid Style="{StaticResource FeatureListItemIconHolder}">
                                <Image x:Name="SlotHolder" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/features_slot_d.png" Stretch="None"/>
                                <Rectangle x:Name="icon" Fill="{Binding Icon}" Width="96" Height="96"/>
                            </Grid>

                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Name}" Style="{StaticResource FeatureListItemName}" TextWrapping="NoWrap" MaxWidth="780" TextTrimming="CharacterEllipsis"/>

                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}, AncestorLevel=2}}" Style="{StaticResource FeatureListItemKind}"/>
                        </Grid>
                    </ContentControl>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </ControlTemplate>

    <DataTemplate x:Key="progressionSpellsTemplate">
        <StackPanel>
            <ContentControl Template="{StaticResource progressionFeaturesSpellList}" DataContext="{Binding Features.Actions}" Content="{Binding Source='h420f4742g1f0dg4d44gb326g4a8f7547b7a3', Converter={StaticResource TranslatedStringConverter}}"/>
            <ContentControl Template="{StaticResource progressionFeaturesSpellList}" DataContext="{Binding Features.Cantrips}" Content="{Binding Source='h5d603bcfg4028g4476g92b3gbca357af6bee', Converter={StaticResource TranslatedStringConverter}}"/>
            <ContentControl Template="{DynamicResource progressionFeaturesSpellList}" DataContext="{Binding Features.Spells}" Content="{Binding Source='h1912b50dgcd8ag4f74g9d0bg1666165c3451', Converter={StaticResource TranslatedStringConverter}}"/>
        </StackPanel>
    </DataTemplate>

    <ControlTemplate x:Key="selectedSpellTemplate" TargetType="{x:Type ls:LSButton}">
        <Grid Width="134" Height="134">
            <Image x:Name="slot" Source="{StaticResource SpellSlot}" Stretch="None"/>
            <Rectangle Fill="{Binding Spell.Icon}" Width="100" Height="100"/>
            <Control x:Name="frame" Width="150" Height="150" Template="{StaticResource FocusedOnlyIndicatorTemplate}" Visibility="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource AncestorType={x:Type ls:LSButton}}, Converter={StaticResource BoolToVisibleConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
            <Border x:Name="empty" Visibility="Collapsed" Background="{StaticResource CCTabToDo}" Opacity="0.5" Width="100" Height="100" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Spell}" Value="{x:Null}"/>
                    <Condition Binding="{Binding Path=DataContext.IsComplete, FallbackValue=False, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="empty" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource AncestorType={x:Type ls:LSButton}}}" Value="True">
                <Setter TargetName="frame" Property="Template" Value="{StaticResource FocusedOnlyIndicatorTemplate}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <ControlTemplate x:Key="availableSpellTemplate" TargetType="{x:Type ls:LSButton}">
        <Grid Width="134" Height="134">
            <Rectangle x:Name="icon" Fill="{Binding Spell.Icon}" Width="100" Height="100"/>
            <Image x:Name="selected" Visibility="Hidden" Source="{StaticResource SelectorSpellSlot}" Stretch="Fill"  Width="100" Height="100"/>
            <Control x:Name="frame" Width="150" Height="150" Template="{StaticResource FocusedOnlyIndicatorTemplate}" Visibility="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource AncestorType={x:Type ls:LSButton}}, Converter={StaticResource BoolToVisibleConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Selected}" Value="True">
                <Setter TargetName="selected" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource AncestorType={x:Type ls:LSButton}}}" Value="True">
                <Setter TargetName="frame" Property="Template" Value="{StaticResource FocusedOnlyIndicatorTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding NotAvailable}" Value="True">
                <Setter Property="IsEnabled" Value="False"/>
                <Setter TargetName="icon" Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                <Setter TargetName="selected" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="removeableSpell" DataType="{x:Type ls:VMSpellReference}">

        <ls:LSButton x:Name="spellButton" Template="{StaticResource selectedSpellTemplate}" DataContext="{Binding}" Command="{Binding DataContext.DeselectSpell, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" ToolTip="{StaticResource CCSpellRefTooltip}" ToolTipService.PlacementTarget="{Binding ElementName=chosenSpells}" ls:MoveFocus.Focusable="True" Focusable="True">
            <ls:LSButton.CommandParameter>
                <MultiBinding Converter="{StaticResource PassThroughConverter}">
                    <Binding Path="DataContext" ElementName="base"/>
                    <Binding Path="."/>
                </MultiBinding>
            </ls:LSButton.CommandParameter>
        </ls:LSButton>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ElementName=spellButton, Path=(ls:MoveFocus.IsFocused)}" Value="True">
                <Setter TargetName="spellButton" Property="BoundEvent" Value="UIAccept"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="selectableSpell" DataType="{x:Type ls:VMSpellReference}">

        <ls:LSButton x:Name="spellButton" Template="{StaticResource availableSpellTemplate}" DataContext="{Binding}" Command="{Binding DataContext.SelectSpell, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" ToolTip="{StaticResource CCSpellRefTooltip}" ToolTipService.PlacementTarget="{Binding ElementName=availableSpells}" ls:MoveFocus.Focusable="True" Focusable="True">
            <ls:LSButton.CommandParameter>
                <MultiBinding Converter="{StaticResource PassThroughConverter}">
                    <Binding Path="DataContext" ElementName="base"/>
                    <Binding Path="."/>
                </MultiBinding>
            </ls:LSButton.CommandParameter>
        </ls:LSButton>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ElementName=spellButton, Path=(ls:MoveFocus.IsFocused)}" Value="True">
                <Setter TargetName="spellButton" Property="BoundEvent" Value="UIAccept"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ls:VMSpellSelector}">
        <DockPanel x:Name="base" Width="1180" Height="{StaticResource gameplayPanelHeight}">
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <StackPanel DockPanel.Dock="Top" Margin="0,0,0,50">

                <TextBlock x:Name="PanelHeader" ls:TextBlockFormatter.SourceText="{Binding Title}" Style="{StaticResource PanelHeaderText}"/>
                <TextBlock x:Name="SpellSelectorDescription" ls:TextBlockFormatter.SourceText="{Binding Description}" Style="{StaticResource PanelDescriptionText}" Margin="0,50,0,0"/>

                <TextBlock x:Name="SelectedTitle" ls:TextBlockFormatter.SourceText="{Binding Source='h46206b54gae33g4546ga5dfg13de4a4c66aa', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}" Margin="0,50,0,0"/>
                <ItemsControl x:Name="chosenSpells" ItemsSource="{Binding Additions}" ItemTemplate="{StaticResource removeableSpell}" Style="{StaticResource spellSelectorSpellListStyle}" Margin="0,50,0,0" Width="{Binding Width, ElementName=base}"/>

                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h76bfc212gcdd9g4c2ag899eg6bbeaf84f1e5', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}" Margin="0,50,0,0"/>

            </StackPanel>

            <ScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}">
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                    <ItemsControl x:Name="availableSpells" ItemsSource="{Binding Available}" ItemTemplate="{StaticResource selectableSpell}" Style="{StaticResource spellSelectorSpellListStyle}" Margin="-60,50,0,0" Width="{Binding Width, ElementName=base}"/>

                </StackPanel>
            </ScrollViewer>

        </DockPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsComplete}" Value="False">
                <Setter TargetName="SelectedTitle" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ls:VMCharacterCreationPassives}">
        <StackPanel>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <ContentControl ContentTemplate="{DynamicResource PassiveSelectorItemTemplate}" Content="{Binding .}"/>

        </StackPanel>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ls:VMCharacterCreationEquipments}">
        <StackPanel>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <ContentControl ContentTemplate="{DynamicResource EquipmentSelectorItemTemplate}" Content="{Binding .}"/>

        </StackPanel>
    </DataTemplate>

    <Style x:Key="gameplayTabTextStyle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource SpecialFont}"/>
        <Setter Property="FontSize" Value="{StaticResource MediumFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource CCTextLight}"/>
        <Setter Property="Margin" Value="20,0,20,0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="tabDotStyle" TargetType="Image">
        <Setter Property="Source" Value="{StaticResource tabDotOff}"/>
        <Setter Property="Stretch" Value="None"/>
        <Setter Property="Width" Value="48"/>
        <Setter Property="Height" Value="48"/>
        <Setter Property="Margin" Value="-4,0,-4,0"/>
    </Style>

    <Style x:Key="tabSelectorStyle" TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
        <Setter Property="Slices" Value="50,10,50,0"/>
        <Setter Property="IconWidth" Value="50"/>
        <Setter Property="Height" Value="80"/>
        <Setter Property="ImageSource" Value="{StaticResource NavTabSelector}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
    </Style>

    <!-- "breadcrumbs" tabs -->
    <DataTemplate x:Key="gameplayTabSpellSelectorTemplate" DataType="{x:Type ls:VMSpellSelector}">
        <Image x:Name="dot" Style="{StaticResource tabDotStyle}">
            <b:Interaction.Triggers>
                <!-- Set the DataContext for the sub panel -->
                <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                    <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="DataContext" Value="{Binding .}" />
                    <!-- deselect any non-subtabs-->
                    <b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsPassivesList" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsEquipmentList" PropertyName="SelectedIndex" Value="-1" />
                </b:DataTrigger>
            </b:Interaction.Triggers>
        </Image>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="dot" Property="Source" Value="{StaticResource tabDotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedItem.Tag, ElementName=gameplayTabs}" Value="naming">
                <Setter TargetName="dot" Property="Source" Value="{StaticResource tabDotOn}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Animated labeled subtabs -->
    <DataTemplate x:Key="gameplayTabSpellSelectorTemplate2" DataType="{x:Type ls:VMSpellSelector}">
        <Grid>
            <StackPanel x:Name="subTabItem" Width="0" HorizontalAlignment="Center" VerticalAlignment="Center">

                <!-- Note: does not work without HorizontalAlignment="Right" ? -->
                <TextBlock x:Name="label" Text="{Binding Source='h2975f9c0gc2aag47d9ga3b3g3dd5171b9bf4', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource gameplayTabTextStyle}" HorizontalAlignment="Right">
                    <b:Interaction.Triggers>
           
                        <!-- Set the DataContext for the sub panel -->
                        <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                            <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="DataContext" Value="{Binding .}" />
                            <!-- deselect any non-subtabs-->
                            <b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedIndex" Value="-1" />
                            <b:ChangePropertyAction TargetName="subTabsPassivesList" PropertyName="SelectedIndex" Value="-1" />
                            <b:ChangePropertyAction TargetName="subTabsEquipmentList" PropertyName="SelectedIndex" Value="-1" />
                        </b:DataTrigger>
                        
                        <!-- Set the tab underline asset width -->
                        <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                            <b:ControlStoryboardAction ControlStoryboardOption="Play">
                                <b:ControlStoryboardAction.Storyboard>
                                    <Storyboard x:Name="setSelectorWidth">
                                        <DoubleAnimation Storyboard.TargetName="tabSelector" Storyboard.TargetProperty="Width" To="{Binding ActualWidth, ElementName=label, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource TabsSelectorWidthAddition}}" Duration="{StaticResource TabSelectorAnimationDuration}"/>
                                    </Storyboard>
                                </b:ControlStoryboardAction.Storyboard>
                            </b:ControlStoryboardAction>                          
                        </b:DataTrigger>                    
          
                        <b:DataTrigger Binding="{Binding UpdateState}" Value="New">
                            <b:ControlStoryboardAction ControlStoryboardOption="Play">
                                <b:ControlStoryboardAction.Storyboard>
                                    <Storyboard x:Name="subTabAppear">
                                        <DoubleAnimation Storyboard.TargetName="subTabItem" Storyboard.TargetProperty="Width" To="{Binding ActualWidth, ElementName=label, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource TabsTextWidthAddition}}" Duration="{StaticResource TabWidthAnimationDuration}"/>
                                    </Storyboard>
                                </b:ControlStoryboardAction.Storyboard>
                            </b:ControlStoryboardAction>
                        </b:DataTrigger>
                                                                            
                        <b:DataTrigger Binding="{Binding UpdateState}" Value="Replaced">
                            <b:ChangePropertyAction TargetName="subTabItem" PropertyName="Width" Value="{Binding ActualWidth, ElementName=label, Converter={StaticResource AddConverter}, ConverterParameter=40}" />        
                        </b:DataTrigger>
                        
                        <b:DataTrigger Binding="{Binding UpdateState}" Value="Old">
                            <!-- From needs to be set as subtabs are re-created every time there is a change -->
                            <b:ControlStoryboardAction ControlStoryboardOption="Play">
                                <b:ControlStoryboardAction.Storyboard>
                                    <Storyboard x:Name="subTabDisappear">
                                        <DoubleAnimation Storyboard.TargetName="subTabItem" Storyboard.TargetProperty="Width" 
                                                         From="{Binding ActualWidth, ElementName=label, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource TabsTextWidthAddition}}"
                                                         To="0" Duration="{StaticResource TabWidthAnimationDuration}"/>
                                    </Storyboard>
                                </b:ControlStoryboardAction.Storyboard>
                            </b:ControlStoryboardAction>   
                        </b:DataTrigger>                  
                        
                    </b:Interaction.Triggers>
                </TextBlock>

            </StackPanel>

            <Image x:Name="ErrorIcon" Stretch="None" Source="{StaticResource ErrorIcon}" Margin="0,112,0,-12" Visibility="Hidden" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsCantrips}" Value="True">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h7d02199dg44ecg4a1egbcacg9cc1cec197b3', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsComplete}" Value="False">
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
                <Setter TargetName="ErrorIcon" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
                <Setter TargetName="ErrorIcon" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="False">
                <Setter TargetName="ErrorIcon" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>


    <DataTemplate x:Key="gameplayTabPassiveSelectorTemplate" DataType="{x:Type ls:VMCharacterCreationPassives}">
        <Image x:Name="dot" Style="{StaticResource tabDotStyle}">
            <b:Interaction.Triggers>
                <!-- Set the DataContext for the sub panel -->
                <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                    <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="DataContext" Value="{Binding .}" />
                    <!-- deselect any non-subtabs-->
                    <b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsSpellsList" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsEquipmentList" PropertyName="SelectedIndex" Value="-1" />
                </b:DataTrigger>
            </b:Interaction.Triggers>
        </Image>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="dot" Property="Source" Value="{StaticResource tabDotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedItem.Tag, ElementName=gameplayTabs}" Value="naming">
                <Setter TargetName="dot" Property="Source" Value="{StaticResource tabDotOn}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="gameplayTabPassiveSelectorTemplate2" DataType="{x:Type ls:VMCharacterCreationPassives}">
        <StackPanel x:Name="subTabItem" Width="0">

            <!-- Note: does not work without HorizontalAlignment="Right" -->
            <TextBlock x:Name="label" Text="{Binding Source='hccb74959ga789g46f6g8cc2g73edf1536b6a', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource gameplayTabTextStyle}" HorizontalAlignment="Right">
            <b:Interaction.Triggers>
                
                <!-- Set the tab underline asset width -->
                <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                    <b:ControlStoryboardAction ControlStoryboardOption="Play">
                        <b:ControlStoryboardAction.Storyboard>
                            <Storyboard x:Name="setSelectorWidth">
                                <DoubleAnimation Storyboard.TargetName="tabSelector" Storyboard.TargetProperty="Width" To="{Binding ActualWidth, ElementName=label, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource TabsSelectorWidthAddition}}" Duration="{StaticResource TabSelectorAnimationDuration}"/>
                            </Storyboard>
                        </b:ControlStoryboardAction.Storyboard>
                    </b:ControlStoryboardAction>                          
                </b:DataTrigger>     

                <b:DataTrigger Binding="{Binding UpdateState}" Value="New">
                    <b:ControlStoryboardAction ControlStoryboardOption="Play">
                        <b:ControlStoryboardAction.Storyboard>
                            <Storyboard x:Name="subTabAppear">
                                <DoubleAnimation Storyboard.TargetName="subTabItem" Storyboard.TargetProperty="Width" To="{Binding ActualWidth, ElementName=label, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource TabsTextWidthAddition}}" Duration="{StaticResource TabWidthAnimationDuration}"/>
                            </Storyboard>
                        </b:ControlStoryboardAction.Storyboard>
                    </b:ControlStoryboardAction>
                </b:DataTrigger>
                                                                    
                <b:DataTrigger Binding="{Binding UpdateState}" Value="Replaced">
                    <b:ChangePropertyAction TargetName="subTabItem" PropertyName="Width" Value="{Binding ActualWidth, ElementName=label, Converter={StaticResource AddConverter}, ConverterParameter=40}" />        
                </b:DataTrigger>
                
                <b:DataTrigger Binding="{Binding UpdateState}" Value="Old">
                    <b:ControlStoryboardAction ControlStoryboardOption="Play">
                        <b:ControlStoryboardAction.Storyboard>
                            <Storyboard x:Name="subTabDisappear">
                                <!-- From needs to be set as subtabs are re-created every time there is a change -->
                                <DoubleAnimation Storyboard.TargetName="subTabItem" Storyboard.TargetProperty="Width" 
                                                 From="{Binding ActualWidth, ElementName=label, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource TabsTextWidthAddition}}"
                                                 To="0" Duration="{StaticResource TabWidthAnimationDuration}"/>
                            </Storyboard>
                        </b:ControlStoryboardAction.Storyboard>
                    </b:ControlStoryboardAction>               
                </b:DataTrigger>                  
                
                <!-- Set the DataContext for the sub panel -->
                <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                    <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="DataContext" Value="{Binding .}" />
                    <!-- deselect any non-subtabs-->
                    <b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsSpellsList" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsEquipmentList" PropertyName="SelectedIndex" Value="-1" />
                </b:DataTrigger>
            </b:Interaction.Triggers>
            </TextBlock>
        </StackPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsComplete}" Value="False">
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>


    <DataTemplate x:Key="gameplayTabEquipmentSelectorTemplate" DataType="{x:Type ls:VMCharacterCreationEquipments}">
        <Image x:Name="dot" Style="{StaticResource tabDotStyle}">
            <b:Interaction.Triggers>
                <!-- Set the DataContext for the sub panel -->
                <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                    <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="DataContext" Value="{Binding .}" />
                    <!-- deselect any non-subtabs-->
                    <b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsSpellsList" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsPassivesList" PropertyName="SelectedIndex" Value="-1" />
                </b:DataTrigger>
            </b:Interaction.Triggers>
        </Image>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="dot" Property="Source" Value="{StaticResource tabDotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedItem.Tag, ElementName=gameplayTabs}" Value="naming">
                <Setter TargetName="dot" Property="Source" Value="{StaticResource tabDotOn}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="gameplayTabEquipmentSelectorTemplate2" DataType="{x:Type ls:VMCharacterCreationEquipments}">
        <StackPanel x:Name="subTabItem" Width="0">

            <TextBlock x:Name="label" Text="{Binding Source='h02a6c879g1b7fg443ag9a1fg45e9ee7bb75e', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource gameplayTabTextStyle}" HorizontalAlignment="Right" Margin="20,52,20,0">
            <b:Interaction.Triggers>
                
                <!-- Set the tab underline asset width -->
                <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                    <b:ControlStoryboardAction ControlStoryboardOption="Play">
                        <b:ControlStoryboardAction.Storyboard>
                            <Storyboard x:Name="setSelectorWidth">
                                <DoubleAnimation Storyboard.TargetName="tabSelector" Storyboard.TargetProperty="Width" To="{Binding ActualWidth, ElementName=label, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource TabsSelectorWidthAddition}}" Duration="{StaticResource TabSelectorAnimationDuration}"/>
                            </Storyboard>
                        </b:ControlStoryboardAction.Storyboard>
                    </b:ControlStoryboardAction>                          
                </b:DataTrigger>     

                <b:DataTrigger Binding="{Binding UpdateState}" Value="New">
                    <b:ControlStoryboardAction ControlStoryboardOption="Play">
                        <b:ControlStoryboardAction.Storyboard>
                            <Storyboard x:Name="subTabAppear">
                                <DoubleAnimation Storyboard.TargetName="subTabItem" Storyboard.TargetProperty="Width" To="{Binding ActualWidth, ElementName=label, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource TabsTextWidthAddition}}" Duration="{StaticResource TabWidthAnimationDuration}"/>
                            </Storyboard>
                        </b:ControlStoryboardAction.Storyboard>
                    </b:ControlStoryboardAction>
                </b:DataTrigger>
                                                                    
                <b:DataTrigger Binding="{Binding UpdateState}" Value="Replaced">
                    <b:ChangePropertyAction TargetName="subTabItem" PropertyName="Width" Value="{Binding ActualWidth, ElementName=label, Converter={StaticResource AddConverter}, ConverterParameter=40}" />        
                </b:DataTrigger>
                
                <b:DataTrigger Binding="{Binding UpdateState}" Value="Old">
                    <b:ControlStoryboardAction ControlStoryboardOption="Play">
                        <b:ControlStoryboardAction.Storyboard>
                            <Storyboard x:Name="subTabDisappear">
                                <DoubleAnimation Storyboard.TargetName="subTabItem" Storyboard.TargetProperty="Width" 
                                                 From="{Binding ActualWidth, ElementName=label, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource TabsTextWidthAddition}}"
                                                 To="0" Duration="{StaticResource TabWidthAnimationDuration}"/>
                            </Storyboard>
                        </b:ControlStoryboardAction.Storyboard>
                    </b:ControlStoryboardAction>               
                </b:DataTrigger>                  
                
                <!-- Set the DataContext for the sub panel -->
                <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                    <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="DataContext" Value="{Binding .}" />
                    <!-- deselect any non-subtabs-->
                    <b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsSpellsList" PropertyName="SelectedIndex" Value="-1" />
                    <b:ChangePropertyAction TargetName="subTabsPassivesList" PropertyName="SelectedIndex" Value="-1" />
                </b:DataTrigger>
            </b:Interaction.Triggers>
            </TextBlock>
        </StackPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsComplete}" Value="False">
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>


    <ControlTemplate x:Key="chooseReplacedOutSpellPanelTemplate">
        <StackPanel x:Name="base">
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:SetMoveFocusAction TargetName="CharacterLevelUp_c"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hba1cb211gedb1g47d3g9bc8g275f30e0dc6d', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}" Margin="0,50,0,0"/>

            <ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}">
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                    <ItemsControl x:Name="availableSpells" ItemsSource="{Binding ClassProgressionDetails.OutSpellsAvailable}" Style="{StaticResource spellSelectorSpellListStyle}" Width="{Binding ActualWidth, ElementName=base}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMSpellReference}">
                                <ls:LSButton x:Name="spell" Template="{StaticResource availableSpellTemplate}" DataContext="{Binding}" Command="{Binding DataContext.SelectSpell,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" ToolTip="{StaticResource CCSpellRefTooltip}" ToolTipService.PlacementTarget="{Binding ElementName=availableSpells}" ls:MoveFocus.Focusable="True" Focusable="True">
                                    <ls:LSButton.CommandParameter>
                                        <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                            <Binding Source="OutReplacement"/>
                                            <Binding Path="."/>
                                        </MultiBinding>
                                    </ls:LSButton.CommandParameter>
                                    <b:Interaction.Triggers>
                                        <b:EventTrigger EventName="LSButtonReleased" >
                                            <b:ChangePropertyAction TargetName="replaceSummary" PropertyName="Visibility" Value="Visible" />
                                            <b:ChangePropertyAction TargetName="replaceChooseOutSpell" PropertyName="Visibility" Value="Collapsed" />
                                            <ls:SetMoveFocusAction TargetName="CharacterLevelUp_c" FocusElement="{Binding ElementName=replaceSummary}"/>
                                            <b:InvokeCommandAction Command="{Binding DataContext.ApplySpellReplacement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                        </b:EventTrigger>
                                    </b:Interaction.Triggers>
                                </ls:LSButton>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=spell, Path=(ls:MoveFocus.IsFocused)}" Value="True">
                                        <Setter TargetName="spell" Property="BoundEvent" Value="UIAccept"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                </StackPanel>
            </ls:LSScrollViewer>

        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="chooseReplacedInSpellPanelTemplate">
        <StackPanel x:Name="base">
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:SetMoveFocusAction TargetName="CharacterLevelUp_c"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h693e8082g6817g4136gb51cg131b3310f24a', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}" Margin="0,50,0,0"/>

            <ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}">
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                    <ItemsControl x:Name="availableSpells" ItemsSource="{Binding ClassProgressionDetails.InSpellsAvailable}" Style="{StaticResource spellSelectorSpellListStyle}" Width="{Binding ActualWidth, ElementName=base}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMSpellReference}">
                                <ls:LSButton x:Name="spell" Template="{StaticResource availableSpellTemplate}" DataContext="{Binding}" Command="{Binding DataContext.SelectSpell,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" ToolTip="{StaticResource CCSpellRefTooltip}" ToolTipService.PlacementTarget="{Binding ElementName=availableSpells}" ls:MoveFocus.Focusable="True" Focusable="True">
                                    <ls:LSButton.CommandParameter>
                                        <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                            <Binding Source="InReplacement"/>
                                            <Binding Path="."/>
                                        </MultiBinding>
                                    </ls:LSButton.CommandParameter>
                                    <b:Interaction.Triggers>
                                        <b:EventTrigger EventName="LSButtonReleased" >
                                            <b:ChangePropertyAction TargetName="replaceSummary" PropertyName="Visibility" Value="Visible" />
                                            <b:ChangePropertyAction TargetName="replaceChooseInSpell" PropertyName="Visibility" Value="Collapsed" />
                                            <ls:SetMoveFocusAction TargetName="CharacterLevelUp_c" FocusElement="{Binding ElementName=replaceSummary}"/>
                                            <b:InvokeCommandAction Command="{Binding DataContext.ApplySpellReplacement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                        </b:EventTrigger>
                                    </b:Interaction.Triggers>
                                </ls:LSButton>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=spell, Path=(ls:MoveFocus.IsFocused)}" Value="True">
                                        <Setter TargetName="spell" Property="BoundEvent" Value="UIAccept"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                </StackPanel>
            </ls:LSScrollViewer>
        </StackPanel>
    </ControlTemplate>

    <ItemsPanelTemplate x:Key="gameplayTabListPanel">
        <StackPanel Orientation="Horizontal"/>
    </ItemsPanelTemplate>

    <!-- Non animated tabs version -->
    <ControlTemplate x:Key="gameplayTabTemplate" TargetType="ListBoxItem">
        <StackPanel Orientation="Horizontal">

            <Image x:Name="tabDot" Style="{StaticResource tabDotStyle}"/>

            <StackPanel x:Name="subTabs" Visibility="Collapsed" Orientation="Horizontal">

                <ListBox x:Name="subTabsSpellsList" ItemTemplate="{StaticResource gameplayTabSpellSelectorTemplate}" ItemsPanel="{StaticResource gameplayTabListPanel}">
                    <b:Interaction.Triggers>
                        <b:PropertyChangedTrigger Binding="{Binding Path=ItemsSource, ElementName=subTabsSpellsList}">
                            <b:InvokeCommandAction Command="{Binding SetupGameplayTabNavigation}" CommandParameter="{Binding ElementName=gameplayTabs}"/>
                        </b:PropertyChangedTrigger>

                        <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=subTabsSpellsList}">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding Path=SelectedIndex, ElementName=subTabsSpellsList}" Operator="NotEqual" RightOperand="-1"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="Tag" Value="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
                        </b:PropertyChangedTrigger>

                        <!-- deselect this ListBox if selection is made elsewhere -->
                        <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=gameplayTabs}">
                            <b:ChangePropertyAction TargetName="subTabsSpellsList" PropertyName="SelectedIndex" Value="-1" />
                        </b:PropertyChangedTrigger>
                        <b:PropertyChangedTrigger Binding="{Binding Path=Tag, ElementName=gameplaySubPanel}">
                            <b:ChangePropertyAction TargetName="subTabsSpellsList" PropertyName="SelectedIndex" Value="-1" />
                        </b:PropertyChangedTrigger>
                    </b:Interaction.Triggers>
                </ListBox>

                <ListBox x:Name="subTabsPassivesList" ItemTemplate="{StaticResource gameplayTabPassiveSelectorTemplate}" ItemsPanel="{StaticResource gameplayTabListPanel}">
                    <b:Interaction.Triggers>
                        <b:PropertyChangedTrigger Binding="{Binding Path=ItemsSource, ElementName=subTabsPassivesList}">
                            <b:InvokeCommandAction Command="{Binding SetupGameplayTabNavigation}" CommandParameter="{Binding ElementName=gameplayTabs}"/>
                        </b:PropertyChangedTrigger>

                        <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=subTabsPassivesList}">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding Path=SelectedIndex, ElementName=subTabsPassivesList}" Operator="NotEqual" RightOperand="-1"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="Tag" Value="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
                        </b:PropertyChangedTrigger>

                        <!-- deselect this ListBox if selection is made elsewhere -->
                        <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=gameplayTabs}">
                            <b:ChangePropertyAction TargetName="subTabsPassivesList" PropertyName="SelectedIndex" Value="-1" />
                        </b:PropertyChangedTrigger>
                        <b:PropertyChangedTrigger Binding="{Binding Path=Tag, ElementName=gameplaySubPanel}">
                            <b:ChangePropertyAction TargetName="subTabsPassivesList" PropertyName="SelectedIndex" Value="-1" />
                        </b:PropertyChangedTrigger>
                    </b:Interaction.Triggers>
                </ListBox>

                <ListBox x:Name="subTabsEquipmentList" ItemTemplate="{StaticResource gameplayTabEquipmentSelectorTemplate}" ItemsPanel="{StaticResource gameplayTabListPanel}">
                    <b:Interaction.Triggers>
                        <b:PropertyChangedTrigger Binding="{Binding Path=ItemsSource, ElementName=subTabsEquipmentList}">
                            <b:InvokeCommandAction Command="{Binding SetupGameplayTabNavigation}" CommandParameter="{Binding ElementName=gameplayTabs}"/>
                        </b:PropertyChangedTrigger>

                        <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=subTabsEquipmentList}">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding Path=SelectedIndex, ElementName=subTabsEquipmentList}" Operator="NotEqual" RightOperand="-1"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="Tag" Value="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
                        </b:PropertyChangedTrigger>

                        <!-- deselect this ListBox if selection is made elsewhere -->
                        <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=gameplayTabs}">
                            <b:ChangePropertyAction TargetName="subTabsEquipmentList" PropertyName="SelectedIndex" Value="-1" />
                        </b:PropertyChangedTrigger>
                        <b:PropertyChangedTrigger Binding="{Binding Path=Tag, ElementName=gameplaySubPanel}">
                            <b:ChangePropertyAction TargetName="subTabsEquipmentList" PropertyName="SelectedIndex" Value="-1" />
                        </b:PropertyChangedTrigger>
                    </b:Interaction.Triggers>
                </ListBox>
            </StackPanel>
        </StackPanel>

        <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter TargetName="tabDot" Property="Source" Value="{StaticResource tabDotOn}"/>
            </Trigger>

            <!-- Show any subtabs -->
            <!-- Spell subtabs -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="race"/>
                    <Condition Binding="{Binding Path=FilteredItems.Count, ElementName=RaceSpellSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding FilteredItems, ElementName=RaceSpellSelectors}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="subrace"/>
                    <Condition Binding="{Binding Path=FilteredItems.Count, ElementName=SubRaceSpellSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding FilteredItems, ElementName=SubRaceSpellSelectors}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="class"/>
                    <Condition Binding="{Binding Path=FilteredItems.Count, ElementName=ClassSpellSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding FilteredItems, ElementName=ClassSpellSelectors}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="subclass"/>
                    <Condition Binding="{Binding Path=FilteredItems.Count, ElementName=SubClassSpellSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding FilteredItems, ElementName=SubClassSpellSelectors}"/>
            </MultiDataTrigger>

            <!-- Spell subtabs for LevelUp (if there is not a new subclass)-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="levelup"/>
                    <Condition Binding="{Binding Path=SelectableSubClasses.Count}" Value="0"/>
                    <Condition Binding="{Binding ClassProgressionDetails.SpellSelectors.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding ClassProgressionDetails.SpellSelectors}"/>
            </MultiDataTrigger>
            <!-- Spell subtabs for LevelUp (if there is a new subclass tab)-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="levelup"/>
                    <Condition Binding="{Binding Path=SelectableSubClasses.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                    <Condition Binding="{Binding Path=FilteredItems.Count, ElementName=ClassSpellSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding FilteredItems, ElementName=ClassSpellSelectors}"/>
            </MultiDataTrigger>


            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="featdetails"/>
                    <Condition Binding="{Binding Path=SelectedFeatDetails.FeatDetails.SpellSelectors.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding SelectedFeatDetails.FeatDetails.SpellSelectors}"/>
            </MultiDataTrigger>

            <!-- Passive subtabs -->
			<!-- MOD START - Racial passive selection -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="race"/>
					<Condition Binding="{Binding Path=DataContext.RacePassives.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
				<Setter TargetName="subTabsPassivesList" Property="ItemsSource" Value="{Binding DataContext.RacePassives, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="subrace"/>
					<Condition Binding="{Binding Path=DataContext.SubRacePassives.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
				<Setter TargetName="subTabsPassivesList" Property="ItemsSource" Value="{Binding DataContext.SubRacePassives, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
			</MultiDataTrigger>
			<!-- MOD END -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="class"/>
                    <Condition Binding="{Binding Path=DataContext.ClassPassives.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsPassivesList" Property="ItemsSource" Value="{Binding DataContext.ClassPassives, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="subclass"/>
                    <Condition Binding="{Binding Path=DataContext.SubClassPassives.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsPassivesList" Property="ItemsSource" Value="{Binding DataContext.SubClassPassives, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
            </MultiDataTrigger>

            <!-- Passive subtabs for Level Up (if there is not a new subclass tab) -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="levelup"/>
                    <Condition Binding="{Binding Path=SelectableSubClasses.Count}" Value="0"/>
                    <Condition Binding="{Binding ClassAndSubClassPassives.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsPassivesList" Property="ItemsSource" Value="{Binding ClassAndSubClassPassives}"/>
            </MultiDataTrigger>
            <!-- Passive subtabs for Level Up (when there is a new subclass tab) -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="levelup"/>
                    <Condition Binding="{Binding Path=SelectableSubClasses.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                    <Condition Binding="{Binding Path=DataContext.ClassPassives.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsPassivesList" Property="ItemsSource" Value="{Binding ClassProgressionDetails.NotSubPassiveSelectors}"/>
            </MultiDataTrigger>

            <!-- Equipment subtabs -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="class"/>
                    <Condition Binding="{Binding Path=DataContext.ClassEquipments.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsEquipmentList" Property="ItemsSource" Value="{Binding DataContext.ClassEquipments, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="subclass"/>
                    <Condition Binding="{Binding Path=DataContext.SubClassEquipments.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsEquipmentList" Property="ItemsSource" Value="{Binding DataContext.SubClassEquipments, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding SelectedItem.Tag, ElementName=gameplayTabs}" Value="naming">
                <Setter TargetName="tabDot" Property="Source" Value="{StaticResource tabDotOn}"/>
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Prevent selecting animating/old/finished subtabs -->
    <Style x:Key="gameplaySubTabItemStyle" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="IsEnabled" Value="False"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding UpdateState}" Value="New">
                <Setter Property="IsEnabled" Value="True"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding UpdateState}" Value="Replaced">
                <Setter Property="IsEnabled" Value="True"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Animated tabs version -->
    <ControlTemplate x:Key="gameplayTabTemplate2" TargetType="ListBoxItem">
        <Grid>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,-4,0,4">

                <Grid x:Name="tabItem" Width="0">

                    <TextBlock x:Name="label" Style="{StaticResource gameplayTabTextStyle}" HorizontalAlignment="Right">
                    
                        <b:Interaction.Triggers>
                            
                            <!-- Set the tab underline asset width -->
                            <b:DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                                <b:ControlStoryboardAction ControlStoryboardOption="Play"> 
                                    <b:ControlStoryboardAction.Storyboard>
                                        <Storyboard x:Name="setSelectorWidth">
                                            <DoubleAnimation Storyboard.TargetName="tabSelector" Storyboard.TargetProperty="Width" To="{Binding ActualWidth, ElementName=label, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource TabsSelectorWidthAddition}}" Duration="{StaticResource TabSelectorAnimationDuration}"/>
                                        </Storyboard>
                                    </b:ControlStoryboardAction.Storyboard>
                                </b:ControlStoryboardAction>                            
                            </b:DataTrigger>

                            <b:DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                                <b:ControlStoryboardAction ControlStoryboardOption="Play">
                                    <b:ControlStoryboardAction.Storyboard>
                                        <Storyboard x:Name="tabAppear">
                                            <DoubleAnimation Storyboard.TargetName="tabItem" Storyboard.TargetProperty="Width" To="{Binding ActualWidth, ElementName=label, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource TabsTextWidthAddition}}" Duration="{StaticResource TabWidthAnimationDuration}"/>
                                        </Storyboard>
                                    </b:ControlStoryboardAction.Storyboard>
                                </b:ControlStoryboardAction>
                            </b:DataTrigger>
                                                                        
                            <b:DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="False">
                                <b:ControlStoryboardAction ControlStoryboardOption="Play">
                                    <b:ControlStoryboardAction.Storyboard>
                                        <Storyboard x:Name="tabDisappear">
                                            <DoubleAnimation Storyboard.TargetName="tabItem" Storyboard.TargetProperty="Width" To="0" Duration="{StaticResource TabWidthAnimationDuration}"/>
                                        </Storyboard>
                                    </b:ControlStoryboardAction.Storyboard>
                                </b:ControlStoryboardAction>                                                                         
                            </b:DataTrigger>                        
                            
                        </b:Interaction.Triggers>

                    </TextBlock>

                </Grid>

                <StackPanel x:Name="subTabs" Visibility="Collapsed" Orientation="Horizontal">

                    <ListBox x:Name="subTabsSpellsList" ItemTemplate="{StaticResource gameplayTabSpellSelectorTemplate2}" ItemsPanel="{StaticResource gameplayTabListPanel}" ItemContainerStyle="{StaticResource gameplaySubTabItemStyle}">

                        <b:Interaction.Triggers>

                            <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=subTabsSpellsList}">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding Path=SelectedIndex, ElementName=subTabsSpellsList}" Operator="NotEqual" RightOperand="-1"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="Tag" Value="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
                            </b:PropertyChangedTrigger>

                            <!-- deselect this ListBox if selection is made elsewhere -->
                            <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=gameplayTabs}">
                                <b:ChangePropertyAction TargetName="subTabsSpellsList" PropertyName="SelectedIndex" Value="-1" />
                            </b:PropertyChangedTrigger>
                            <b:PropertyChangedTrigger Binding="{Binding Path=Tag, ElementName=gameplaySubPanel}">
                                <b:ChangePropertyAction TargetName="subTabsSpellsList" PropertyName="SelectedIndex" Value="-1" />
                            </b:PropertyChangedTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>

                    <ListBox x:Name="subTabsPassivesList" ItemTemplate="{StaticResource gameplayTabPassiveSelectorTemplate2}" ItemsPanel="{StaticResource gameplayTabListPanel}" ItemContainerStyle="{StaticResource gameplaySubTabItemStyle}">

                        <b:Interaction.Triggers>

                            <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=subTabsPassivesList}">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding Path=SelectedIndex, ElementName=subTabsPassivesList}" Operator="NotEqual" RightOperand="-1"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="Tag" Value="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
                            </b:PropertyChangedTrigger>

                            <!-- deselect this ListBox if selection is made elsewhere -->
                            <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=gameplayTabs}">
                                <b:ChangePropertyAction TargetName="subTabsPassivesList" PropertyName="SelectedIndex" Value="-1" />
                            </b:PropertyChangedTrigger>
                            <b:PropertyChangedTrigger Binding="{Binding Path=Tag, ElementName=gameplaySubPanel}">
                                <b:ChangePropertyAction TargetName="subTabsPassivesList" PropertyName="SelectedIndex" Value="-1" />
                            </b:PropertyChangedTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>

                    <ListBox x:Name="subTabsEquipmentList" ItemTemplate="{StaticResource gameplayTabEquipmentSelectorTemplate2}" ItemsPanel="{StaticResource gameplayTabListPanel}" ItemContainerStyle="{StaticResource gameplaySubTabItemStyle}">
                        <b:Interaction.Triggers>

                            <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=subTabsEquipmentList}">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding Path=SelectedIndex, ElementName=subTabsEquipmentList}" Operator="NotEqual" RightOperand="-1"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="Tag" Value="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
                            </b:PropertyChangedTrigger>

                            <!-- deselect this ListBox if selection is made elsewhere -->
                            <b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=gameplayTabs}">
                                <b:ChangePropertyAction TargetName="subTabsEquipmentList" PropertyName="SelectedIndex" Value="-1" />
                            </b:PropertyChangedTrigger>
                            <b:PropertyChangedTrigger Binding="{Binding Path=Tag, ElementName=gameplaySubPanel}">
                                <b:ChangePropertyAction TargetName="subTabsEquipmentList" PropertyName="SelectedIndex" Value="-1" />
                            </b:PropertyChangedTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
            </StackPanel>

            <Image x:Name="ErrorIcon" Stretch="None" Source="{StaticResource ErrorIcon}" Margin="0,100,0,0" Visibility="Hidden" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>

        <ControlTemplate.Triggers>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="origin"/>
                    <Condition Binding="{Binding SelectedOrigin.IsSelectable}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
                <Setter TargetName="ErrorIcon" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="origin"/>
                    <Condition Binding="{Binding Validity.SameOriginSelectedByMultiplePlayers}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
                <Setter TargetName="ErrorIcon" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Mode=Self}}" Value="spellprep"/>
                    <Condition Binding="{Binding SpellPrepare.IsComplete}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
                <Setter TargetName="ErrorIcon" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="ability"/>
                    <Condition Binding="{Binding UnusedAbilityPoints, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
                <Setter TargetName="ErrorIcon" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="raceskills"/>
                    <Condition Binding="{Binding Validity.RacialSelectors.SkillProficiencySelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
                <Setter TargetName="ErrorIcon" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="skills"/>
                    <Condition Binding="{Binding Validity.ClassSelectors.SkillProficiencySelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
                <Setter TargetName="ErrorIcon" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="expertise"/>
                    <Condition Binding="{Binding Validity.ClassSelectors.SkillExpertiseSelectors}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
                <Setter TargetName="ErrorIcon" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <Trigger Property="IsSelected" Value="True">
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTabSelected}"/>
                <Setter TargetName="ErrorIcon" Property="Visibility" Value="Hidden"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="ErrorIcon" Property="Visibility" Value="Collapsed"/>
            </Trigger>

            <Trigger Property="Tag" Value="origin">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='hd0d4922ag7581g43eag9142g44e22c131fa8', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>

            <Trigger Property="Tag" Value="race">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='hadf27237ge191g4922ga84cg055b984c9b1f', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="Tag" Value="subrace">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='hf4977710g272bg4334g84aegf749a3b18205', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>

            <Trigger Property="Tag" Value="class">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h4d0d00cfg4edeg42c3gaa4agcc3908351b8d', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="Tag" Value="subclass">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h1e67bc9cg0f53g4218g8ce8geb6a6636f141', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>

            <Trigger Property="Tag" Value="deity">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h5238a9c6gb90fg40bbg9335gfb37d6e91b94', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="Tag" Value="spellprep">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h15329947gc691g4323gac0fge3fbcecb92d9', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>

            <Trigger Property="Tag" Value="background">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='hebf1e383g9a70g42d6gb3e2g3906281a90b8', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="Tag" Value="ability">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h6406727cg0668g4fdag9ca1g72c679c0aeab', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>

            <Trigger Property="Tag" Value="raceskills">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h5cba8e35g057eg4e08g84f2g186b89ba12cc', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="Tag" Value="skills">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h12abe296ga0fbg44feg9451gb10a0bf92acb', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="Tag" Value="expertise">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='hb05a8953g3596g4e62g91c4gb1a8f8babd71', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="Tag" Value="appearance">
                <Setter TargetName="label" Property="Text" Value="{Binding Source='h261cce55g1d1eg4c09g9675ge5c1be13e820', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>

            <!-- For LevelUp only - new multiclass -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="class"/>
                    <Condition Binding="{Binding SelectedMultiClass.Level, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="label" Property="Text" Value="{Binding Source='hcbc3c9a8g9e80g4139g952bga971015c1f41', Converter={StaticResource TranslatedStringConverter}}"/>
            </MultiDataTrigger>
            <!-- For LevelUp only (in CC this tab is part of appearance) -->
            <Trigger Property="Tag" Value="draconic">
                <Setter TargetName="label" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h0e1fded7g681ag4e5fgb0a2gc5928ab399a1', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>

            <!-- Show any subtabs -->
            <DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="race">
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding RaceProgressionDetails.NotSubSpellSelectors}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="subrace">
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding RaceProgressionDetails.SubSpellSelectors}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="class">
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding ClassProgressionDetails.NotSubSpellSelectors}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="subclass">
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding ClassProgressionDetails.SubSpellSelectors}"/>
            </DataTrigger>

            <!-- Feats are only on LevelUp which doesn't have new animated tabs yet (so not yet used) -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="featdetails"/>
                    <Condition Binding="{Binding Path=SelectedFeatDetails.FeatDetails.SpellSelectors.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsSpellsList" Property="ItemsSource" Value="{Binding SelectedFeatDetails.FeatDetails.SpellSelectors}"/>
            </MultiDataTrigger>

            <!-- Passive subtabs -->
            <DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="class">
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsPassivesList" Property="ItemsSource" Value="{Binding ClassProgressionDetails.NotSubPassiveSelectors}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="subclass">
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsPassivesList" Property="ItemsSource" Value="{Binding ClassProgressionDetails.SubPassiveSelectors}"/>
            </DataTrigger>

            <!-- Equipment subtabs -->
            <DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="class">
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsEquipmentList" Property="ItemsSource" Value="{Binding ClassProgressionDetails.NotSubEquipmentSelectors}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}" Value="subclass">
                <Setter TargetName="subTabs" Property="Visibility" Value="Visible"/>
                <Setter TargetName="subTabsEquipmentList" Property="ItemsSource" Value="{Binding ClassProgressionDetails.SubEquipmentSelectors}"/>
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ChoiceButtonTemplate" TargetType="RadioButton">
        <Grid>
            <Image x:Name="bg" Source="{StaticResource AltButton_d}" Stretch="None"/>
            <TextBlock x:Name="text" ls:TextBlockFormatter.SourceText="{TemplateBinding Tag}" FontSize="{StaticResource ScaledHugeFontSize}" Foreground="{StaticResource CCTextNormal}" HorizontalAlignment="Center" VerticalAlignment="Center"/>

            <Control x:Name="frame" Width="148" Height="148"/>

            <Image x:Name="tick" Visibility="Hidden" Source="{StaticResource IconTick}" Stretch="None" VerticalAlignment="Bottom" Margin="0,0,0,-40"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="bg" Property="Source" Value="{StaticResource AltButton_selected}"/>
                <Setter TargetName="tick" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                <Setter TargetName="text" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
                <Setter TargetName="frame" Property="Template" Value="{StaticResource FocusedOnlyIndicatorTemplate}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="bg" Property="Source" Value="{StaticResource AltButton_d}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="CarouselButtonTemplate" TargetType="ls:LSButton">
        <Grid Width="160" Height="80" Background="Transparent">
            <Image x:Name="arrow" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/input_arrow_d.png" Stretch="None"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="CarouselTextStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource ScaledIntermediateFontSize}"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource CCTextPrimary}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource LS_alertTxtColor}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CCCarouselStyle" TargetType="ListBox">
        <Setter Property="ItemsSource" Value="{Binding ComboItems}"/>
        <Setter Property="SelectedItem" Value="{Binding SelectedItem, Mode=OneWay}"/>
        <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid HorizontalAlignment="Center">
                        <Image x:Name="box" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/dropdownBox_d.png" Stretch="None"/>
                        <ls:LSButton x:Name="leftBtn" Template="{StaticResource CarouselButtonTemplate}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="-40,0,0,0"
                                        Command="{Binding DataContext.PrevComboItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        CommandParameter="{Binding}" SoundID="{DynamicResource CarouselButtonSoundEvent}"/>
                        <ls:LSButton x:Name="rightBtn" Template="{StaticResource CarouselButtonTemplate}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,-40,0"
                                        Command="{Binding DataContext.NextComboItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        CommandParameter="{Binding}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                            <ls:LSButton.RenderTransform>
                                <ScaleTransform ScaleX="-1" CenterX="80"/>
                            </ls:LSButton.RenderTransform>
                        </ls:LSButton>

                        <TextBlock x:Name="cTxt" Text="{Binding Source='h033a526fg0fe7g4164g8431g177be16d148a', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource CarouselTextStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/dropdownBox_h.png" TargetName="box"/>
                            <Setter TargetName="leftBtn" Property="BoundEvent" Value="UILeft"/>
                            <Setter TargetName="rightBtn" Property="BoundEvent" Value="UIRight"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding HasSelectedItem}" Value="True">
                            <Setter TargetName="cTxt" Property="Text" Value="{Binding SelectedItem.Name}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ComboItems.Count}" Value="0">
                            <Setter TargetName="cTxt" Property="Text" Value="{Binding Source='h3c369cdfgc705g45d0gba16g3dc054b28fcb', Converter={StaticResource TranslatedStringConverter}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ComboItems.Count}" Value="0">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ComboItems.Count}" Value="1">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ComboItems.Count}" Value="1"/>
                                <Condition Binding="{Binding HasSelectedItem}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconCarouselButtonStyle" TargetType="ls:LSButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Image x:Name="arrow" Source="{StaticResource CarouselArrow_d}" Stretch="None"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="arrow" Property="Source" Value="{StaticResource CarouselArrowDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconCarouselRepeatButtonStyle" TargetType="ls:LSRepeatButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Image x:Name="arrow" Source="{StaticResource CarouselArrow_d}" Stretch="None"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="arrow" Property="Source" Value="{StaticResource CarouselArrowDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="IconCarouselTextTemplate">
        <TextBlock x:Name="cTxt" Text="{Binding SelectedItem.Name, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Style="{StaticResource IconCarouselText}" TextWrapping="NoWrap" MaxWidth="960" TextTrimming="CharacterEllipsis"/>
    </ControlTemplate>

    <ControlTemplate x:Key="IconCarouselTemplate" TargetType="ListBox">
        <Grid>
            <Image Source="{StaticResource CarouselBg}" Opacity="0.8" Stretch="None" Margin="0,-180,-10,0"/>

            <Grid Height="300" HorizontalAlignment="Center" VerticalAlignment="Top">
                <Control Template="{DynamicResource IconsTemplate}" VerticalAlignment="Center"/>
            </Grid>

            <ListBox x:Name="dots" ItemsSource="{Binding ItemsSource, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" SelectedItem="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,300,0,0">
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal" IsItemsHost="True"/>
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <Image x:Name="dot" Source="{StaticResource DotOff}" Stretch="None" Width="44" Height="44" Margin="-7,0,-7,0"/>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                                <Setter TargetName="dot" Property="Source" Value="{StaticResource DotOn}"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>

            <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource ListButtonTemplate}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,350,0,0">
                <Grid>

                    <ls:LSButton x:Name="leftBtn" BoundEvent="UILeft" Style="{StaticResource IconCarouselButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="40,0,0,0" Command="{Binding DataContext.PrevItemLooped, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                        <ls:LSButton.RenderTransform>
                            <ScaleTransform ScaleX="-1" CenterX="32"/>
                        </ls:LSButton.RenderTransform>
                    </ls:LSButton>
                    <ls:LSButton x:Name="rightBtn" BoundEvent="UIRight" Style="{StaticResource IconCarouselButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,40,0" Command="{Binding DataContext.NextItemLooped, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" SoundID="{DynamicResource CarouselButtonSoundEvent}"/>

                    <Control Template="{DynamicResource IconCarouselTextTemplate}"/>

                </Grid>
            </ContentControl>

        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ItemsSource.Count, ElementName=dots}" Value="1">
                <Setter TargetName="leftBtn" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="rightBtn" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="PanelSideDescription">

        <Grid x:Name="carouselSidePanel" Visibility="Collapsed" Width="900">
            <Rectangle>
                <Rectangle.Fill>
                    <LinearGradientBrush Opacity="1.0" StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Offset="0" Color="{StaticResource transparentBlack}"/>
                        <GradientStop Offset="0.1" Color="#c0000000"/>
                        <GradientStop Offset="0.7" Color="#c0000000"/>
                        <GradientStop Offset="1" Color="{StaticResource transparentBlack}"/>
                    </LinearGradientBrush>
                </Rectangle.Fill>
                <Rectangle.Effect>
                    <BlurEffect Radius="20" />
                </Rectangle.Effect>
            </Rectangle>

            <ContentPresenter/>

        </Grid>

        <ControlTemplate.Triggers>
            <!-- Split Screen variation -->
            <DataTrigger Binding="{Binding Layout}" Value="Common">
                <Setter TargetName="carouselSidePanel" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <ControlTemplate x:Key="CarouselClassIconsFewTemplate">
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
            <Grid x:Name="leftIcon" DataContext="{Binding SelectedItem.Prev, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
				<!-- MOD START - Use main class instead of subclass icon -->
				<Image Style="{StaticResource MainClassIconStyle}" OpacityMask="{StaticResource leftFadeBrush}" Stretch="UniformToFill" Width="200" Height="200"/>
				<Control Template="{DynamicResource IconsSubtitleTemplate}"/>
			</Grid>

			<Image Style="{StaticResource MainClassIconStyle}" Stretch="None" DataContext="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

			<Grid x:Name="rightIcon" DataContext="{Binding SelectedItem.Next, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
				<Image Style="{StaticResource MainClassIconStyle}" OpacityMask="{StaticResource rightFadeBrush}" Stretch="UniformToFill" Width="200" Height="200"/>
				<Control Template="{DynamicResource IconsSubtitleTemplate}"/>
			</Grid>
		</StackPanel>
		<ControlTemplate.Triggers>
			<DataTrigger Binding="{Binding ItemsSource.Count, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Value="1">
				<Setter TargetName="leftIcon" Property="Visibility" Value="Collapsed"/>
				<Setter TargetName="rightIcon" Property="Visibility" Value="Collapsed"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding ItemsSource.Count, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Value="2">
				<Setter TargetName="leftIcon" Property="Visibility" Value="Hidden"/>
			</DataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="CarouselClassIconsTemplate">
		<StackPanel Orientation="Horizontal" HorizontalAlignment="Center">

			<Image Style="{StaticResource MainClassIconStyle}" OpacityMask="{StaticResource leftFadeBrush}" Stretch="UniformToFill" Width="200" Height="200" DataContext="{Binding SelectedItem.Prev.Prev, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

			<Image Style="{StaticResource MainClassIconStyle}" Stretch="UniformToFill" Width="200" Height="200" DataContext="{Binding SelectedItem.Prev, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

			<Image Style="{StaticResource MainClassIconStyle}" Stretch="None" DataContext="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

			<Image Style="{StaticResource MainClassIconStyle}" Stretch="UniformToFill" Width="200" Height="200" DataContext="{Binding SelectedItem.Next, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

			<Image Style="{StaticResource MainClassIconStyle}" OpacityMask="{StaticResource rightFadeBrush}" Stretch="UniformToFill" Width="200" Height="200" DataContext="{Binding SelectedItem.Next.Next, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
			<!-- MOD END -->
        </StackPanel>
    </ControlTemplate>

	<!-- MOD START - Duplicate for subclass icons -->
	<ControlTemplate x:Key="CarouselSubclassIconsFewTemplate">
		<StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
			<Grid x:Name="leftIcon" DataContext="{Binding SelectedItem.Prev, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
				<Image Style="{StaticResource ClassIconStyle}" OpacityMask="{StaticResource leftFadeBrush}" Stretch="UniformToFill" Width="200" Height="200"/>
				<Control Template="{DynamicResource IconsSubtitleTemplate}"/>
			</Grid>

			<Image Style="{StaticResource ClassIconStyle}" Stretch="None" DataContext="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

			<Grid x:Name="rightIcon" DataContext="{Binding SelectedItem.Next, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
				<Image Style="{StaticResource ClassIconStyle}" OpacityMask="{StaticResource rightFadeBrush}" Stretch="UniformToFill" Width="200" Height="200"/>
				<Control Template="{DynamicResource IconsSubtitleTemplate}"/>
			</Grid>
		</StackPanel>
		<ControlTemplate.Triggers>
			<DataTrigger Binding="{Binding ItemsSource.Count, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Value="1">
				<Setter TargetName="leftIcon" Property="Visibility" Value="Collapsed"/>
				<Setter TargetName="rightIcon" Property="Visibility" Value="Collapsed"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding ItemsSource.Count, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Value="2">
				<Setter TargetName="leftIcon" Property="Visibility" Value="Hidden"/>
			</DataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="CarouselSubclassIconsTemplate">
		<StackPanel Orientation="Horizontal" HorizontalAlignment="Center">

			<Image Style="{StaticResource ClassIconStyle}" OpacityMask="{StaticResource leftFadeBrush}" Stretch="UniformToFill" Width="200" Height="200" DataContext="{Binding SelectedItem.Prev.Prev, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

			<Image Style="{StaticResource ClassIconStyle}" Stretch="UniformToFill" Width="200" Height="200" DataContext="{Binding SelectedItem.Prev, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

			<Image Style="{StaticResource ClassIconStyle}" Stretch="None" DataContext="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

			<Image Style="{StaticResource ClassIconStyle}" Stretch="UniformToFill" Width="200" Height="200" DataContext="{Binding SelectedItem.Next, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

			<Image Style="{StaticResource ClassIconStyle}" OpacityMask="{StaticResource rightFadeBrush}" Stretch="UniformToFill" Width="200" Height="200" DataContext="{Binding SelectedItem.Next.Next, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

		</StackPanel>
	</ControlTemplate>
	<!-- MOD END -->

    <ControlTemplate x:Key="CarouselCustomIconsFewTemplate">
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
            <Rectangle Style="{DynamicResource CustomIconStyle}" Width="200" Height="200" DataContext="{Binding SelectedItem.Prev, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
                <Rectangle.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Offset="0" Color="Transparent" />
                        <GradientStop Offset="1" Color="{StaticResource baseColor}" />
                    </LinearGradientBrush>
                </Rectangle.Fill>
            </Rectangle>

            <Rectangle Fill="{StaticResource CCIconSelected}" Style="{DynamicResource CustomIconStyle}" Width="300" Height="300" DataContext="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

            <Rectangle Style="{DynamicResource CustomIconStyle}" Width="200" Height="200" DataContext="{Binding SelectedItem.Next, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
                <Rectangle.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Offset="0" Color="{StaticResource baseColor}" />
                        <GradientStop Offset="1" Color="Transparent" />
                    </LinearGradientBrush>
                </Rectangle.Fill>
            </Rectangle>
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="CarouselCustomIconsTemplate">
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
            <Rectangle Style="{DynamicResource CustomIconStyle}" Width="200" Height="200" DataContext="{Binding SelectedItem.Prev.Prev, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
                <Rectangle.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Offset="0" Color="Transparent" />
                        <GradientStop Offset="1" Color="{StaticResource baseColor}" />
                    </LinearGradientBrush>
                </Rectangle.Fill>
            </Rectangle>

            <Rectangle Fill="{StaticResource CCIconDefault}" Style="{DynamicResource CustomIconStyle}" Width="200" Height="200" DataContext="{Binding SelectedItem.Prev, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
            <Rectangle Fill="{StaticResource CCIconSelected}" Style="{DynamicResource CustomIconStyle}" Width="300" Height="300" DataContext="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
            <Rectangle Fill="{StaticResource CCIconDefault}" Style="{DynamicResource CustomIconStyle}" Width="200" Height="200" DataContext="{Binding SelectedItem.Next, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

            <Rectangle Style="{DynamicResource CustomIconStyle}" Width="200" Height="200" DataContext="{Binding SelectedItem.Next.Next, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
                <Rectangle.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Offset="0" Color="{StaticResource baseColor}" />
                        <GradientStop Offset="1" Color="Transparent" />
                    </LinearGradientBrush>
                </Rectangle.Fill>
            </Rectangle>
        </StackPanel>
    </ControlTemplate>

    <!-- Animated Carousel -->

    <LinearGradientBrush x:Key="carouselItemsOpacityMask" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Offset="0" Color="Transparent" />
        <GradientStop Offset="0.4" Color="White" />
        <GradientStop Offset="0.6" Color="White" />
        <GradientStop Offset="1" Color="Transparent" />
    </LinearGradientBrush>

    <Style x:Key="carouselClipperStyle" TargetType="Grid">
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="OpacityMask" Value="{StaticResource carouselItemsOpacityMask}"/>
        <Setter Property="MaxWidth" Value="{StaticResource gameplayPanelWidth}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <ControlTemplate x:Key="noScrollViewerListBoxTemplate" TargetType="ListBox">
        <!-- No ScrollViewer -->
        <ItemsPresenter/>
    </ControlTemplate>

    <ItemsPanelTemplate x:Key="animatedCarouselItemPanelTemplate">
        <StackPanel x:Name="itemsPanel" IsItemsHost="True" Orientation="Horizontal" Background="Transparent" >
            <StackPanel.RenderTransform>
                <TranslateTransform x:Name="itemsPanelTransform" X="0"  Y="0"/>
            </StackPanel.RenderTransform>

            <b:Interaction.Triggers>

                <!-- Set initial sideways offset to animate from -->
                <b:EventTrigger EventName="Loaded">
                    <b:ChangePropertyAction TargetName="itemsPanelTransform" PropertyName="X">
                        <b:ChangePropertyAction.Value>
                            <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                                <Binding ElementName="AnimatedCarousel" Path="SelectedIndex" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-200"/>
                                <Binding Source="440"/>
                            </MultiBinding>
                        </b:ChangePropertyAction.Value>
                    </b:ChangePropertyAction>

                    <b:ControlStoryboardAction ControlStoryboardOption="Play">
                        <b:ControlStoryboardAction.Storyboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="itemsPanel" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Duration="0:0:0">
                                    <DoubleAnimation.To>
                                        <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                                            <Binding ElementName="AnimatedCarousel" Path="SelectedIndex" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-200"/>
                                            <Binding Source="440"/>
                                        </MultiBinding>
                                    </DoubleAnimation.To>
                                </DoubleAnimation>
                            </Storyboard>
                        </b:ControlStoryboardAction.Storyboard>
                    </b:ControlStoryboardAction>
                </b:EventTrigger>

                <!-- Animate sideways to selected item -->
                <b:PropertyChangedTrigger Binding="{Binding Path=SelectedItem, ElementName=AnimatedCarousel}">
                    <b:ControlStoryboardAction ControlStoryboardOption="Play">
                        <b:ControlStoryboardAction.Storyboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="itemsPanel" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Duration="0:0:0.2" AccelerationRatio="0.25" DecelerationRatio="0.25">
                                    <DoubleAnimation.To>
                                        <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                                            <Binding ElementName="AnimatedCarousel" Path="SelectedIndex" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-200"/>
                                            <Binding Source="440"/>
                                        </MultiBinding>
                                    </DoubleAnimation.To>
                                </DoubleAnimation>
                            </Storyboard>
                        </b:ControlStoryboardAction.Storyboard>
                    </b:ControlStoryboardAction>
                </b:PropertyChangedTrigger>

            </b:Interaction.Triggers>

        </StackPanel>
    </ItemsPanelTemplate>


    <ControlTemplate x:Key="AnimatedIconCarouselTemplate" TargetType="ListBox">
        <StackPanel>

            <ListBox x:Name="dots" ItemsSource="{Binding ItemsSource, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" SelectedItem="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" HorizontalAlignment="Center">
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal" IsItemsHost="True"/>
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <Image x:Name="dot" Source="{StaticResource DotOff}" Stretch="None" Width="44" Height="44" Margin="-7,0,-7,0"/>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                                <Setter TargetName="dot" Property="Source" Value="{StaticResource DotOn}"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>

            <Grid Margin="0,-50,0,0">
                <Image Source="{StaticResource CarouselBg}" Opacity="0.8" Stretch="None" Margin="-30,0,0,0"/>
                <Grid x:Name="carouselClipper" Style="{StaticResource carouselClipperStyle}">
                    <ListBox x:Name="AnimatedCarousel" Template="{StaticResource noScrollViewerListBoxTemplate}" ItemsPanel="{StaticResource animatedCarouselItemPanelTemplate}" ItemsSource="{Binding ItemsSource, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" SelectedItem="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" ItemTemplate="{TemplateBinding ItemTemplate}" Width="5000"/>
                </Grid>
            </Grid>

            <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource ListButtonTemplate}" HorizontalAlignment="Center">
                <Grid>

                    <ls:LSButton x:Name="leftBtn" BoundEvent="UILeft" Style="{StaticResource IconCarouselButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="40,0,0,0" Command="{Binding DataContext.PrevItemLooped, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                        <ls:LSButton.RenderTransform>
                            <ScaleTransform ScaleX="-1" CenterX="32"/>
                        </ls:LSButton.RenderTransform>
                    </ls:LSButton>

                    <ls:LSButton x:Name="rightBtn" BoundEvent="UIRight" Style="{StaticResource IconCarouselButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,40,0" Command="{Binding DataContext.NextItemLooped, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" SoundID="{DynamicResource CarouselButtonSoundEvent}"/>

                    <Control Template="{DynamicResource IconCarouselTextTemplate}"/>

                </Grid>
            </ContentControl>

        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ItemsSource.Count, ElementName=dots}" Value="1">
                <Setter TargetName="leftBtn" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="rightBtn" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="SelectableCarouselTemplate" TargetType="ListBox">
        <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource ListButtonTemplate}">
            <Grid>

                <ls:LSRepeatButton x:Name="leftBtn" BoundEvent="UILeft" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="40,0,0,0" Command="{Binding DataContext.PrevItemLooped, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                    <ls:LSRepeatButton.RenderTransform>
                        <ScaleTransform ScaleX="-1" CenterX="32"/>
                    </ls:LSRepeatButton.RenderTransform>
                </ls:LSRepeatButton>
                <ls:LSRepeatButton x:Name="rightBtn" BoundEvent="UIRight" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,40,0" Command="{Binding DataContext.NextItemLooped, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" SoundID="{DynamicResource CarouselButtonSoundEvent}"/>

                <Control Template="{DynamicResource IconCarouselTextTemplate}"/>

            </Grid>
        </ContentControl>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ItemsSource.Count, ElementName=dots}" Value="1">
                <Setter TargetName="leftBtn" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="rightBtn" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="BodyTypeChoice">
        <StackPanel d:DataContext="{d:DesignInstance {x:Type ls:DCCharacterCreation}, IsDesignTimeCreatable=True}">
            <b:Interaction.Triggers>
                <b:DataTrigger Binding="{Binding BodyTypeAndShape}" Value="Female">
                    <b:ChangePropertyAction TargetName="bodyTypeCarousel" PropertyName="SelectedIndex" Value="0"/>
                </b:DataTrigger>
                <b:DataTrigger Binding="{Binding BodyTypeAndShape}" Value="Male">
                    <b:ChangePropertyAction TargetName="bodyTypeCarousel" PropertyName="SelectedIndex" Value="1"/>
                </b:DataTrigger>
                <b:DataTrigger Binding="{Binding BodyTypeAndShape}" Value="FemaleStrong">
                    <b:ChangePropertyAction TargetName="bodyTypeCarousel" PropertyName="SelectedIndex" Value="2"/>
                </b:DataTrigger>
                <b:DataTrigger Binding="{Binding BodyTypeAndShape}" Value="MaleStrong">
                    <b:ChangePropertyAction TargetName="bodyTypeCarousel" PropertyName="SelectedIndex" Value="3"/>
                </b:DataTrigger>
            </b:Interaction.Triggers>

            <TextBlock Text="{Binding Source='hc4f5c05bgc2feg4333ga08fg229b33c42437', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}"/>

            <ListBox x:Name="bodyTypeCarousel" Margin="0,30,0,0">
                <ListBox.Template>
                    <ControlTemplate>
                        <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource ListButtonTemplate}" HorizontalAlignment="Center">
                            <Grid>
                                <ls:LSRepeatButton x:Name="leftBtn" BoundEvent="UILeft" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="40,0,0,0"
                                        Command="{Binding DataContext.SelectPreviousBodyType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                                    <ls:LSRepeatButton.RenderTransform>
                                        <ScaleTransform ScaleX="-1" CenterX="32"/>
                                    </ls:LSRepeatButton.RenderTransform>
                                </ls:LSRepeatButton>
                                <ls:LSRepeatButton x:Name="rightBtn" BoundEvent="UIRight" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,40,0"
                                        Command="{Binding DataContext.SelectNextBodyType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" SoundID="{DynamicResource CarouselButtonSoundEvent}"/>

                                <TextBlock x:Name="cTxt" Text="{Binding SelectedItem.Content, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Style="{StaticResource IconCarouselText}"/>

                            </Grid>
                        </ContentControl>
                    </ControlTemplate>
                </ListBox.Template>

                <ListBoxItem x:Name="female" Content="1"/>
                <ListBoxItem x:Name="male" Content="2"/>
                <ListBoxItem x:Name="femaleStrong" Content="3"/>
                <ListBoxItem x:Name="maleStrong" Content="4"/>
            </ListBox>
        </StackPanel>
    </ControlTemplate>


    <ControlTemplate x:Key="IdentityChoice">

        <StackPanel x:Name="IdentityContainer" Visibility="{Binding CanShowIdentity, Converter={StaticResource BoolToVisibleConverter}}">
            <b:Interaction.Triggers>
                <b:DataTrigger Binding="{Binding SelectedIdentity}" Value="Male">
                    <b:ChangePropertyAction TargetName="identityCarousel" PropertyName="SelectedIndex" Value="0"/>
                </b:DataTrigger>
                <b:DataTrigger Binding="{Binding SelectedIdentity}" Value="Female">
                    <b:ChangePropertyAction TargetName="identityCarousel" PropertyName="SelectedIndex" Value="1"/>
                </b:DataTrigger>
                <b:DataTrigger Binding="{Binding SelectedIdentity}" Value="Neutral">
                    <b:ChangePropertyAction TargetName="identityCarousel" PropertyName="SelectedIndex" Value="2"/>
                </b:DataTrigger>
            </b:Interaction.Triggers>

            <TextBlock Text="{Binding Source='hcc23cfaagbc1eg4bb0gafb9g9f720497b786', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}" />

            <ListBox x:Name="identityCarousel" IsEnabled="{Binding IsIdentityEnabled}" Margin="0,30,0,0">
                <ListBox.Template>
                    <ControlTemplate>
                        <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource ListButtonTemplate}" HorizontalAlignment="Center">
                            <Grid>
                                <ls:LSRepeatButton x:Name="leftBtn" BoundEvent="UILeft" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="40,0,0,0" Command="{Binding DataContext.SelectPreviousIdentity, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" SoundID="UI_HUD_CC_Gender">
                                    <ls:LSRepeatButton.RenderTransform>
                                        <ScaleTransform ScaleX="-1" CenterX="32"/>
                                    </ls:LSRepeatButton.RenderTransform>
                                </ls:LSRepeatButton>
                                <ls:LSRepeatButton x:Name="rightBtn" BoundEvent="UIRight" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,40,0" Command="{Binding DataContext.SelectNextIdentity, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" SoundID="UI_HUD_CC_Gender"/>

                                <TextBlock x:Name="cTxt" Text="{Binding SelectedItem.Content, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Style="{StaticResource IconCarouselText}"/>

                            </Grid>
                        </ContentControl>
                    </ControlTemplate>
                </ListBox.Template>

                <ListBoxItem x:Name="male" Content="{Binding Source='hf12d3837gd6fbg448ag813dg9cf6d9a4d412', Converter={StaticResource TranslatedStringConverter}}"/>
                <ListBoxItem x:Name="female" Content="{Binding Source='h5d60ad1cg41dcg4d9fgaba8gda842c090327', Converter={StaticResource TranslatedStringConverter}}"/>
                <ListBoxItem x:Name="neutral" Content="{Binding Source='hea2ce077g2b7ag42dfgb194g928c3dd108a7', Converter={StaticResource TranslatedStringConverter}}"/>
            </ListBox>

        </StackPanel>

    </ControlTemplate>

    <ControlTemplate x:Key="ToggleConfirmButtonTemplate" TargetType="{x:Type ls:LSToggleButton}">

        <ls:LSNineSliceImage x:Name="bg" ImageSource="{StaticResource PrimaryButtonBG_Large}" Slices="{StaticResource primaryButtonSlices}" MinWidth="268" MinHeight="144" HorizontalAlignment="Center">
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">

                <Control x:Name="img" DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICreate'}" Template="{StaticResource ControllerButton.ImageSwitcher}" Width="{DynamicResource ScaledControllerHintSize}" Height="{DynamicResource ScaledControllerHintSize}" Focusable="False" VerticalAlignment="Center" Margin="26,0,-10,0"/>

                <TextBlock x:Name="text" ls:TextBlockFormatter.SourceText="{Binding Source='h5ec59419gbcbag4572gbf24g259ad7f261f2', Converter={StaticResource TranslatedStringConverter}}" FontSize="{StaticResource ScaledMediumFontSize}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,60,0"/>

            </StackPanel>
        </ls:LSNineSliceImage>
    </ControlTemplate>

    <DataTemplate x:Key="ClassIconTemplate" DataType="ls:VMSelectableClass">
        <StackPanel x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True">
            <Grid HorizontalAlignment="Center">
                <Image Style="{StaticResource ClassIconHotbarStyle}" Stretch="None"/>
                <Control x:Name="frame" Width="148" Height="148"/>
                <Image x:Name="tick" Visibility="Hidden" Source="{StaticResource IconTick}" Stretch="None" VerticalAlignment="Bottom" Margin="0,0,0,-10"/>
            </Grid>
            <TextBlock x:Name="label" ls:TextBlockFormatter.SourceText="{Binding ShortName}" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource LS_baseTxtColor}" Width="230" TextWrapping="Wrap" TextAlignment="Center" HorizontalAlignment="Center"/>
            <TextBlock x:Name="level" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource LS_baseTxtColor}" HorizontalAlignment="Center">
                <TextBlock.Text>
                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                        <Binding Source="hd678d4eeg181fg499dg9e81g2146ab24e03a"/>
                        <Binding Path="DataContext.Level" RelativeSource="{RelativeSource Mode=Self}"/>
                        <Binding Source=""/>
                    </MultiBinding>
                </TextBlock.Text>
            </TextBlock>

            <ls:LSInputBinding IsEnabled="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" BoundEvent="UIAccept">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="LSInputBindingReleased">
                        <b:ChangePropertyAction TargetObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" PropertyName="SelectedItem" Value="{Binding .}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ls:LSInputBinding>

        </StackPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ShortName}" Value="">
                <Setter TargetName="label" Property="Text" Value="{Binding Name}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="frame" Property="Template" Value="{StaticResource SelectedOnlyIndicatorTemplate}"/>
                <Setter TargetName="tick" Property="Visibility" Value="Visible"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
                <Setter TargetName="level" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                <Setter TargetName="frame" Property="Template" Value="{StaticResource FocusedOnlyIndicatorTemplate}"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
                <Setter TargetName="level" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True"/>
                    <Condition Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="frame" Property="Template" Value="{StaticResource FocusedAndSelectedIndicatorTemplate}"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
                <Setter TargetName="level" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Level}" Value="0">
                <Setter TargetName="level" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="CustomIconTemplate" DataType="{x:Type ls:VMSelectable}">
        <StackPanel x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True">
            <Grid HorizontalAlignment="Center">
                <Rectangle x:Name="icon" Width="196" Height="196" Fill="{StaticResource CCIconDefault}" Style="{DynamicResource CustomIconStyle}"/>
                <Control x:Name="frame" Width="196" Height="196"/>
                <Image x:Name="tick" Visibility="Hidden" Source="{StaticResource IconTick}" Stretch="None" VerticalAlignment="Bottom" Margin="0,0,0,-10"/>
            </Grid>
            <TextBlock x:Name="label" ls:TextBlockFormatter.SourceText="{Binding Name}" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource LS_baseTxtColor}" Width="{DynamicResource IconTextWidth}" TextWrapping="Wrap" TextAlignment="Center" HorizontalAlignment="Center"/>

            <ls:LSInputBinding IsEnabled="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" BoundEvent="UIAccept">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="LSInputBindingReleased">
                        <b:ChangePropertyAction TargetObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" PropertyName="SelectedItem" Value="{Binding .}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ls:LSInputBinding>

        </StackPanel>

        <DataTemplate.Triggers>

            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="icon" Property="Fill" Value="{StaticResource CCIconSelected}"/>
                <Setter TargetName="frame" Property="Template" Value="{StaticResource SelectedOnlyIndicatorTemplate}"/>
                <Setter TargetName="tick" Property="Visibility" Value="Visible"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                <Setter TargetName="icon" Property="Fill" Value="{StaticResource CCIconHovered}"/>
                <Setter TargetName="frame" Property="Template" Value="{StaticResource FocusedOnlyIndicatorTemplate}"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True"/>
                    <Condition Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="icon" Property="Fill" Value="{StaticResource CCIconSelected}"/>
                <Setter TargetName="frame" Property="Template" Value="{StaticResource FocusedAndSelectedIndicatorTemplate}"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
            </MultiDataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="CustomBrushIconTemplate" DataType="{x:Type ls:VMSelectable}">
        <StackPanel x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Margin="8" ToolTipService.Placement="Bottom">
            <StackPanel.ToolTip>
                <ls:LSTooltip Content="{Binding DataContext.Name, ElementName=base}"/>
            </StackPanel.ToolTip>
            <Grid HorizontalAlignment="Center">
                <Rectangle x:Name="icon" Fill="{Binding Icon}" Width="{StaticResource gridIconSize}" Height="{StaticResource gridIconSize}" RadiusX="6" RadiusY="6"/>
                <Control x:Name="frame" Width="{StaticResource gridIconFrameSize}" Height="{StaticResource gridIconFrameSize}" Margin="-20"/>
                <Image x:Name="tick" Visibility="Hidden" Source="{StaticResource IconTick}" Stretch="None" VerticalAlignment="Bottom" Margin="0,0,0,-10"/>
            </Grid>
            <ls:LSInputBinding IsEnabled="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" BoundEvent="UIAccept">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="LSInputBindingReleased">
                        <b:ChangePropertyAction TargetObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" PropertyName="SelectedItem" Value="{Binding .}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ls:LSInputBinding>

        </StackPanel>

        <DataTemplate.Triggers>

            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="frame" Property="Template" Value="{StaticResource SelectedOnlyIndicatorTemplate}"/>
                <Setter TargetName="tick" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                <Setter TargetName="frame" Property="Template" Value="{StaticResource FocusedOnlyIndicatorTemplate}"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True"/>
                    <Condition Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="frame" Property="Template" Value="{StaticResource FocusedAndSelectedIndicatorTemplate}"/>
            </MultiDataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>


    <DataTemplate x:Key="changeAbilityTemplate" DataType="ls:VMAbility">
        <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTip="{StaticResource ManagedTooltip}">
            <Grid HorizontalAlignment="Left" VerticalAlignment="Center" Margin="50,0,0,0">
                <StackPanel Orientation="Horizontal">
                    <Control Template="{StaticResource AbilityDisplayName}" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource CCTextNormal}" VerticalAlignment="Center"/>

                    <Image Source="{StaticResource IconProficiency}" Stretch="None" Visibility="{Binding IsPrimary, Converter={StaticResource BoolToVisibleConverter}, ConverterParameter=True}" Margin="20,0,0,0"/>
                </StackPanel>

                <Control Template="{DynamicResource buttonsAndValue}"/>

                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="650,0,0,0">
                    <StackPanel.Resources>
                        <Style TargetType="Image">
                            <Setter Property="Source" Value="{StaticResource DotOff}"/>
                            <Setter Property="Stretch" Value="None"/>
                            <Setter Property="Width" Value="44"/>
                            <Setter Property="Height" Value="44"/>
                            <Setter Property="Margin" Value="-7,0,-7,0"/>
                        </Style>
                    </StackPanel.Resources>
                    <Image x:Name="dot8"/>
                    <Image x:Name="dot9"/>
                    <Image x:Name="dot10"/>
                    <Image x:Name="dot11"/>
                    <Image x:Name="dot12"/>
                    <Image x:Name="dot13"/>
                    <Image x:Name="dot14"/>
                    <Image x:Name="dot15"/>
                    <Image x:Name="dot16"/>
                    <Image x:Name="dot17"/>
                    <Image x:Name="dot18"/>
                    <Image x:Name="dot19"/>
                    <Image x:Name="dot20"/>
                </StackPanel>

            </Grid>
        </ContentControl>
        <DataTemplate.Triggers>

            <!-- With Bonuses Value -->

            <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=7}" Value="True">
                <Setter TargetName="dot8" Property="Source" Value="{StaticResource DotBonus}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=8}" Value="True">
                <Setter TargetName="dot9" Property="Source" Value="{StaticResource DotBonus}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=9}" Value="True">
                <Setter TargetName="dot10" Property="Source" Value="{StaticResource DotBonus}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=10}" Value="True">
                <Setter TargetName="dot11" Property="Source" Value="{StaticResource DotBonus}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=11}" Value="True">
                <Setter TargetName="dot12" Property="Source" Value="{StaticResource DotBonus}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=12}" Value="True">
                <Setter TargetName="dot13" Property="Source" Value="{StaticResource DotBonus}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=13}" Value="True">
                <Setter TargetName="dot14" Property="Source" Value="{StaticResource DotBonus}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=14}" Value="True">
                <Setter TargetName="dot15" Property="Source" Value="{StaticResource DotBonus}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=15}" Value="True">
                <Setter TargetName="dot16" Property="Source" Value="{StaticResource DotBonus}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=16}" Value="True">
                <Setter TargetName="dot17" Property="Source" Value="{StaticResource DotBonus}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=17}" Value="True">
                <Setter TargetName="dot18" Property="Source" Value="{StaticResource DotBonus}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=18}" Value="True">
                <Setter TargetName="dot19" Property="Source" Value="{StaticResource DotBonus}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=19}" Value="True">
                <Setter TargetName="dot20" Property="Source" Value="{StaticResource DotBonus}"/>
            </DataTrigger>

            <!-- Base Value -->
            <DataTrigger Binding="{Binding BaseValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter=7}" Value="True">
                <Setter TargetName="dot8" Property="Source" Value="{StaticResource DotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BaseValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter=8}" Value="True">
                <Setter TargetName="dot9" Property="Source" Value="{StaticResource DotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BaseValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter=9}" Value="True">
                <Setter TargetName="dot10" Property="Source" Value="{StaticResource DotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BaseValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter=10}" Value="True">
                <Setter TargetName="dot11" Property="Source" Value="{StaticResource DotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BaseValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter=11}" Value="True">
                <Setter TargetName="dot12" Property="Source" Value="{StaticResource DotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BaseValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter=12}" Value="True">
                <Setter TargetName="dot13" Property="Source" Value="{StaticResource DotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BaseValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter=13}" Value="True">
                <Setter TargetName="dot14" Property="Source" Value="{StaticResource DotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BaseValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter=14}" Value="True">
                <Setter TargetName="dot15" Property="Source" Value="{StaticResource DotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BaseValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter=15}" Value="True">
                <Setter TargetName="dot16" Property="Source" Value="{StaticResource DotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BaseValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter=16}" Value="True">
                <Setter TargetName="dot17" Property="Source" Value="{StaticResource DotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BaseValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter=17}" Value="True">
                <Setter TargetName="dot18" Property="Source" Value="{StaticResource DotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BaseValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter=18}" Value="True">
                <Setter TargetName="dot19" Property="Source" Value="{StaticResource DotOn}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding BaseValue, Converter={StaticResource GreaterThanConverter}, ConverterParameter=19}" Value="True">
                <Setter TargetName="dot20" Property="Source" Value="{StaticResource DotOn}"/>
            </DataTrigger>


        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="appearanceIconGridStyle" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate" Value="{StaticResource CustomBrushIconTemplate}"/>
        <Setter Property="FlowDirection" Value="RightToLeft"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel MaxWidth="{StaticResource appearancePanelWidth}" HorizontalAlignment="Center" FlowDirection="LeftToRight"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="selectableColourTemplate" DataType="{x:Type ls:VMSelectableColour}">
        <Border x:Name="colorCell" Background="{Binding Colour}" ls:MoveFocus.Focusable="True" Focusable="True" Width="{StaticResource colourRectSize}" Height="{StaticResource colourRectSize}" BorderBrush="Transparent" BorderThickness="4" ToolTipService.Placement="Left">
            <Border.ToolTip>
                <ls:LSTooltip>
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Path=DataContext.Name, ElementName=colorCell}" FontSize="{StaticResource ScaledDefaultFontSize}" TextWrapping="Wrap"/>
                </ls:LSTooltip>
            </Border.ToolTip>
            <ls:LSInputBinding IsEnabled="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=colorCell}" BoundEvent="UIAccept">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="LSInputBindingPressed">
                        <ls:LSPlaySound Sound="UI_Shared_Secondary_Press"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="LSInputBindingReleased">
                        <b:ChangePropertyAction TargetObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" PropertyName="SelectedItem" Value="{Binding .}"/>
                        <ls:LSPlaySound Sound="UI_HUD_CC_ColorCellButton_Press"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ls:LSInputBinding>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                <Setter TargetName="colorCell" Property="BorderBrush" Value="{StaticResource CCTextLight}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=colorCell}" Value="True">
                <Setter TargetName="colorCell" Property="BorderBrush" Value="{StaticResource CCTextPrimary}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="ColorSwatchStyle" TargetType="ItemsControl">
        <Setter Property="ItemsSource" Value="{Binding ColorSwatch}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel MaxWidth="900" HorizontalAlignment="Center"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type ls:VMColorSwatch}">

                    <Border x:Name="colorCell" Background="{Binding Color}" ls:MoveFocus.Focusable="True" Focusable="True" Width="{StaticResource colourRectSize}" Height="{StaticResource colourRectSize}" BorderBrush="Transparent" BorderThickness="4">
                        <Border.ToolTip>
                            <ls:LSTooltip Content="{Binding DataContext.ColorName, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource TranslatedStringConverter}, ConverterParameter='LocaKey'}"/>
                        </Border.ToolTip>
                        <ls:LSButton x:Name="btn" Command="{Binding DataContext.SetColor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type StackPanel}}}" CommandParameter="{Binding}" IsEnabled="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=colorCell}" BoundEvent="UIAccept"/>
                    </Border>

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Selected}" Value="True">
                            <Setter TargetName="colorCell" Property="BorderBrush" Value="{StaticResource CCTextLight}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=colorCell}" Value="True">
                            <Setter TargetName="colorCell" Property="BorderBrush" Value="{StaticResource CCTextPrimary}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="appearanceOverpanelListBoxStyle" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel MaxWidth="{StaticResource appearancePanelWidth}" HorizontalAlignment="Center"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="ColorOptionTickBoxTemplate">
        <ls:LSToggleButton x:Name="tickButton" IsChecked="{Binding Value}">
            <ls:LSToggleButton.Template>
                <ControlTemplate TargetType="ToggleButton">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        <Grid>
                            <Image x:Name="img" Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/checkBox_d.png"/>
                            <Image x:Name="check" Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_check_d.png" Visibility="Hidden"/>
                        </Grid>
                        <TextBlock VerticalAlignment="Center" Margin="20,0,0,0" TextWrapping="Wrap" ls:TextBlockFormatter.SourceText="{Binding Text}" Foreground="{DynamicResource LS_accent75TxtColor}" FontSize="{StaticResource ScaledDefaultFontSize}"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="check" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/checkBox_disabled.png"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/checkBox_h.png"/>
                            <Setter TargetName="check" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_check_h.png"/>
                        </DataTrigger>
                        <Trigger Property="IsPressed"  Value="True">
                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/checkBox_p.png"/>
                            <Setter TargetName="check" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_check_h.png"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </ls:LSToggleButton.Template>
        </ls:LSToggleButton>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                <Setter TargetName="tickButton" Property="BoundEvent" Value="UIAccept"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Draconinc dragonborn lines checkbox -->
    <ControlTemplate x:Key="DraconicDragonbornTickBoxTemplate" TargetType="ToggleButton">
        <Border x:Name="focusBorder" BorderThickness="4" BorderBrush="Transparent" HorizontalAlignment="Center">
            <StackPanel Orientation="Horizontal">
                <Grid>
                    <Image x:Name="img" Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/checkBox_d.png"/>
                    <Image x:Name="check" Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_check_d.png" Visibility="Hidden"/>
                </Grid>
                <TextBlock
                    VerticalAlignment="Center"
                    Margin="20,0,0,0"
                    TextWrapping="Wrap"
                    ls:TextBlockFormatter.SourceText="{Binding Source='h6ea184f4g802bg4712gac5cgdeaee9390e44', Converter={StaticResource TranslatedStringConverter}}"
                    Foreground="{DynamicResource LS_accent75TxtColor}"
                    FontSize="{StaticResource ScaledDefaultFontSize}"/>
            </StackPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="check" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/checkBox_disabled.png"/>
            </Trigger>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="focusBorder" Property="BorderBrush" Value="{DynamicResource LS_PrimaryColor}"/>
                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/checkBox_h.png"/>
                <Setter TargetName="check" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_check_h.png"/>
            </DataTrigger>
            <Trigger Property="IsPressed"  Value="True">
                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/checkBox_p.png"/>
                <Setter TargetName="check" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_check_h.png"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- For differences between KBM and controller Summary Panels -->
    <Style x:Key="SummarySpellsDecorationStyle" TargetType="Image">
        <Setter Property="Height" Value="100"/>
    </Style>


    <ControlTemplate x:Key="SummaryListItemTemplate" TargetType="ContentControl">
        <Grid x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTip="{TemplateBinding ToolTip}">
            <Image x:Name="box" Source="{StaticResource ListButtonBg}" Stretch="Fill" Width="600" Visibility="Hidden"/>

            <ContentPresenter x:Name="content" IsEnabled="False" VerticalAlignment="Center"/>

            <Grid x:Name="frame" Visibility="Hidden" Width="620" Margin="0,-14,0,-18">
                <Grid.Triggers>
                    <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                        <BeginStoryboard Storyboard="{StaticResource selectorStoryboard}"/>
                    </EventTrigger>
                </Grid.Triggers>
                <Image x:Name="img1" Source="{StaticResource ListItemSelected1}" Stretch="Fill" Opacity="1"/>
                <Image x:Name="img2" Source="{StaticResource ListItemSelected2}" Stretch="Fill" Opacity="1"/>
                <Image x:Name="img3" Source="{StaticResource ListItemSelected2}" Stretch="Fill" Opacity="0"/>
                <Image x:Name="img4" Source="{StaticResource ListItemSelected2}" Stretch="Fill" Opacity="0"/>
                <Image x:Name="img5" Source="{StaticResource ListItemSelected2}" Stretch="Fill" Opacity="1"/>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                <Setter TargetName="box" Property="Source" Value="{StaticResource ListButtonBg_h}"/>
                <Setter TargetName="content" Property="IsEnabled" Value="True"/>
                <Setter TargetName="box" Property="Visibility" Value="Visible"/>
                <Setter TargetName="frame" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style x:Key="summaryPanelScrollViewerStyle" TargetType="ScrollViewer" BasedOn="{StaticResource {x:Type ScrollViewer}}">
        <Setter Property="Height" Value="1650"/>
        <Setter Property="Margin" Value="20,0,0,0"/>
    </Style>

    <Style x:Key="summaryScrolledStackPanelStyle" TargetType="StackPanel">
        <Setter Property="Margin" Value="0,0,18,20"/>
    </Style>

    <Style x:Key="summaryRowStyle" TargetType="Grid">
        <Setter Property="Width" Value="640"/>
    </Style>
    <Style x:Key="summaryHeaderTextStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="40,21,0,11"/>
        <Setter Property="Foreground" Value="{StaticResource CCTextLightest}"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
    </Style>
    <Style x:Key="summaryRowRightTextStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Margin" Value="0,0,40,0"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledIntermediateFontSize}"/>
    </Style>

    <Style x:Key="iconSpellTextStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="144,0,0,0"/>
        <Setter Property="Width" Value="480"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
        <Setter Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
    </Style>
    <Style x:Key="proficiencyTextStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="30,0,0,0"/>
        <Setter Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledMediumFontSize}"/>
    </Style>
    <Style x:Key="StatsText_c" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource CCTextLightest}"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
    </Style>
    <ControlTemplate x:Key="summaryPanelTemplate">

        <ScrollViewer Style="{StaticResource summaryPanelScrollViewerStyle}" ls:ScrollViewerHelper.VerticalScrollOffsetMargin="200">

            <StackPanel x:Name="panel" Style="{StaticResource summaryScrolledStackPanelStyle}">

                <ContentControl x:Name="race" Template="{StaticResource SummaryListItemTemplate}" ToolTipService.Placement="Left">
                    <ContentControl.ToolTip>
                        <ls:LSTooltip>
                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Path=DataContext.DummyCharacter.Stats.Race.Description, ElementName=panel}" FontSize="{StaticResource ScaledDefaultFontSize}" TextWrapping="Wrap"/>
                        </ls:LSTooltip>
                    </ContentControl.ToolTip>
                    <TextBlock Text="{Binding DummyCharacter.Stats.Race.DisplayName}" Style="{StaticResource StatsText_c}" TextWrapping="NoWrap" MaxWidth="580" TextTrimming="CharacterEllipsis"/>
                </ContentControl>

                <!-- Class/Classes -->
                <ItemsControl ItemsSource="{Binding DummyCharacter.Stats.ClassList}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="ls:VMClass">
                            <ContentControl x:Name="class" Template="{StaticResource SummaryListItemTemplate}" ToolTipService.Placement="Left">
                                <ContentControl.ToolTip>
                                    <ls:LSTooltip>
                                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Path=DataContext.ClassDescription, ElementName=class}" FontSize="{StaticResource ScaledDefaultFontSize}" TextWrapping="Wrap"/>
                                    </ls:LSTooltip>
                                </ContentControl.ToolTip>
                                <TextBlock x:Name="classInfo" Style="{StaticResource StatsText_c}">
                                    <TextBlock.Text>
                                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                            <Binding Source="hd678d4eeg181fg499dg9e81g2146ab24e03a"/>
                                            <Binding Path="DataContext.Level.Value" RelativeSource="{RelativeSource Mode=Self}"/>
                                            <Binding Path="DataContext.ClassDisplayName" RelativeSource="{RelativeSource Mode=Self}"/>
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>
                            </ContentControl>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>

                <ContentControl x:Name="deity" Template="{StaticResource SummaryListItemTemplate}" Visibility="{Binding DummyCharacter.Stats.God, Converter={StaticResource StringToVisibilityConverter}}" ToolTipService.Placement="Left">
                    <ContentControl.ToolTip>
                        <ls:LSTooltip>
                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Path=DataContext.DummyCharacter.Stats.GodDescription, ElementName=deity}" FontSize="{StaticResource ScaledDefaultFontSize}" TextWrapping="Wrap"/>
                        </ls:LSTooltip>
                    </ContentControl.ToolTip>
                    <TextBlock Text="{Binding DummyCharacter.Stats.God}" Style="{StaticResource StatsText_c}"/>
                </ContentControl>

                <ItemsControl x:Name="abilities" ItemsSource="{Binding DummyCharacter.Stats.Abilities}" HorizontalAlignment="Center" Margin="0,42,0,42">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="ls:VMAbility">
                            <ContentControl x:Name="ability" Template="{StaticResource SummaryListItemTemplate}" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Left">
                                <Grid Style="{StaticResource summaryRowStyle}">
                                    <StackPanel Orientation="Horizontal">

                                        <Control x:Name="attrName" Template="{StaticResource AbilityDisplayName}" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource LS_baseTxtColor}" HorizontalAlignment="Left" Margin="40,0,0,0"/>

                                        <Image x:Name="primary" Visibility="Hidden" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/proficient_ability.png" Stretch="None" VerticalAlignment="Top" Margin="-4,2,0,0"/>
                                    </StackPanel>
                                    <TextBlock x:Name="value" ls:TextBlockFormatter.SourceText="{Binding Value}" Style="{StaticResource summaryRowRightTextStyle}"/>
                                </Grid>
                            </ContentControl>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding IsPrimary}" Value="True">
                                    <Setter TargetName="primary" Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>


                <ContentControl x:Name="initiative" Template="{StaticResource SummaryListItemTemplate}" DataContext="{Binding DummyCharacter.Stats.Initiative}" ToolTip="{StaticResource PlacementParentDCTooltip}" ToolTipService.Placement="Left">
                    <Grid Style="{StaticResource summaryRowStyle}">
                        <Control Template="{StaticResource StatsDisplayName}" Foreground="{StaticResource LS_baseTxtColor}"  FontSize="{StaticResource ScaledDefaultFontSize}" HorizontalAlignment="Left" Margin="40,0,0,0"/>
                        <TextBlock Text="{Binding Value, StringFormat={}{0:+#;-#;0}}" Style="{StaticResource summaryRowRightTextStyle}"/>
                    </Grid>
                </ContentControl>
                <ContentControl x:Name="health" Template="{StaticResource SummaryListItemTemplate}" DataContext="{Binding DummyCharacter.Stats.Health}" ToolTip="{StaticResource PlacementParentDCTooltip}" ToolTipService.Placement="Left">
                    <Grid Style="{StaticResource summaryRowStyle}">
                        <Control Template="{StaticResource StatsDisplayName}" Foreground="{StaticResource LS_baseTxtColor}"  FontSize="{StaticResource ScaledDefaultFontSize}" HorizontalAlignment="Left" Margin="40,0,0,0"/>
                        <TextBlock Text="{Binding Max}" Style="{StaticResource summaryRowRightTextStyle}"/>
                    </Grid>
                </ContentControl>

                <StackPanel Visibility="{Binding ProgressionActions.Count, Converter={StaticResource CountToVisibilityConverter}}">
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h7ba895aaga020g4cf0g9ec0g6a98f5eaaa3c', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource summaryHeaderTextStyle}"/>
                    <ItemsControl x:Name="actions" ItemsSource="{Binding ProgressionActions}" HorizontalAlignment="Center" Margin="0,0,0,10">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="ls:VMSpellReference">
                                <ContentControl x:Name="action" Template="{StaticResource SummaryListItemTemplate}" ToolTip="{StaticResource CCSpellRefTooltip}" ToolTipService.Placement="Left">
                                    <Grid Style="{StaticResource summaryRowStyle}">
                                        <ContentControl ContentTemplate="{StaticResource SpellRefIcon}" Content="{Binding}" HorizontalAlignment="Left" Margin="40,0,0,0" Width="84" Height="105" ls:AttachedProperties.InheritedTag="{StaticResource FalseValue}"/>
                                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Spell.Name}" HorizontalAlignment="Left" Style="{StaticResource iconSpellTextStyle}" VerticalAlignment="Center"/>
                                    </Grid>
                                </ContentControl>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>

                <StackPanel Visibility="{Binding ProgressionCantrips.Count, Converter={StaticResource CountToVisibilityConverter}}">
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h7d02199dg44ecg4a1egbcacg9cc1cec197b3', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource summaryHeaderTextStyle}"/>
                    <ItemsControl x:Name="cantrips" ItemsSource="{Binding ProgressionCantrips}" HorizontalAlignment="Center" Margin="0,0,0,10">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="ls:VMSpellReference">
                                <ContentControl x:Name="action" Template="{StaticResource SummaryListItemTemplate}" ToolTip="{StaticResource CCSpellRefTooltip}" ToolTipService.Placement="Left">
                                    <Grid Style="{StaticResource summaryRowStyle}">
                                        <ContentControl ContentTemplate="{StaticResource SpellRefIcon}" Content="{Binding}" HorizontalAlignment="Left" Margin="40,0,0,0" Width="84" Height="105" ls:AttachedProperties.InheritedTag="{StaticResource FalseValue}"/>
                                        <TextBlock x:Name="text" ls:TextBlockFormatter.SourceText="{Binding Spell.Name}" Style="{StaticResource iconSpellTextStyle}"/>
                                    </Grid>
                                </ContentControl>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding Spell, Converter={StaticResource NullToBoolTrueConverter}}" Value="True">
                                        <Setter TargetName="text" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h6ed9f1a3gd823g4f69g85a1gb236bebb938b', Converter={StaticResource TranslatedStringConverter}}"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>

                <StackPanel Visibility="{Binding ProgressionSpells.Count, Converter={StaticResource CountToVisibilityConverter}}">
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h2975f9c0gc2aag47d9ga3b3g3dd5171b9bf4', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource summaryHeaderTextStyle}"/>
                    <ItemsControl x:Name="spells" ItemsSource="{Binding ProgressionSpells}" HorizontalAlignment="Center" Margin="0,0,0,10">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="ls:VMSpellReference">
                                <ContentControl x:Name="action" Template="{StaticResource SummaryListItemTemplate}" ToolTip="{StaticResource CCSpellRefTooltip}" ToolTipService.Placement="Left">
                                    <Grid Style="{StaticResource summaryRowStyle}">
                                        <ContentControl ContentTemplate="{StaticResource SpellRefIcon}" Content="{Binding}" HorizontalAlignment="Left" Margin="40,0,0,0" Width="84" Height="105" ls:AttachedProperties.InheritedTag="{StaticResource FalseValue}"/>
                                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Spell.Name}" Style="{StaticResource iconSpellTextStyle}"/>
                                    </Grid>
                                </ContentControl>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>

                <TextBlock x:Name="proficiencyHeader" Visibility="Hidden" ls:TextBlockFormatter.SourceText="{Binding Source='hbdc95889g6f3fg46efg9993g036cf077a0e7', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource summaryHeaderTextStyle}"/>

                <ItemsControl x:Name="weaponProficiencies" ItemsSource="{Binding ProgressionData.AllProgressions.WeaponProficiencies}" HorizontalAlignment="Center" Margin="0,0,0,10">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="ls:VMFeatureBoost">
                            <ContentControl x:Name="proficiency" Template="{StaticResource SummaryListItemTemplate}" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Left">
                                <TextBlock x:Name="text" ls:TextBlockFormatter.SourceText="{Binding ShortName}" FontSize="{StaticResource ScaledDefaultFontSize}" Style="{StaticResource proficiencyTextStyle}"/>
                            </ContentControl>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>

                <ItemsControl x:Name="armourProficiencies" ItemsSource="{Binding ProgressionData.AllProgressions.ArmourProficiencies}" HorizontalAlignment="Center" Margin="0,0,0,10">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="ls:VMFeatureBoost">
                            <ContentControl x:Name="proficiency" Template="{StaticResource SummaryListItemTemplate}" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Left">
                                <TextBlock x:Name="text" ls:TextBlockFormatter.SourceText="{Binding ShortName}" FontSize="{StaticResource ScaledDefaultFontSize}" Style="{StaticResource proficiencyTextStyle}"/>
                            </ContentControl>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>

                <TextBlock x:Name="skillsLabel" Visibility="{Binding SortedItems.Count, ElementName=SortedSummarySkills, Converter={StaticResource CountToVisibilityConverter}}" ls:TextBlockFormatter.SourceText="{Binding Source=h12abe296ga0fbg44feg9451gb10a0bf92acb, Converter={StaticResource TranslatedStringConverter}}"  Style="{StaticResource summaryHeaderTextStyle}"/>
                <ItemsControl x:Name="skills" ItemsSource="{Binding SortedItems, ElementName=SortedSummarySkills}" HorizontalAlignment="Center" Margin="0,0,0,10">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="ls:VMSkill">
                            <ContentControl x:Name="skill" Template="{StaticResource SummaryListItemTemplate}" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Left">
                                <StackPanel Orientation="Horizontal">
                                    <Control Template="{StaticResource SkillDisplayName}" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource LS_baseTxtColor}" HorizontalAlignment="Left" Margin="30,0,0,0"/>
                                    <TextBlock Text="(&#x00D7;2)" Visibility="{Binding IsExpert, Converter={StaticResource BoolToVisibleConverter}}" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource LS_baseTxtColor}" Margin="10,0,0,0"/>
                                </StackPanel>
                            </ContentControl>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>

            </StackPanel>

        </ScrollViewer>
        <ControlTemplate.Triggers>

            <DataTrigger Binding="{Binding ProgressionData.AllProgressions.WeaponProficiencies.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="proficiencyHeader" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProgressionData.AllProgressions.ArmourProficiencies.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="proficiencyHeader" Property="Visibility" Value="Visible"/>
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="progressionSpellSelectors" DataType="ls:VMSpellSelector">
        <ItemsControl x:Name="items" ItemsSource="{Binding Additions}">
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="ls:VMSpellReference">
                    <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTip="{StaticResource CCSpellRefTooltip}" ToolTipService.Placement="Right">
                        <Grid>
                            <Grid Style="{StaticResource FeatureListItemIconHolder}">
                                <ContentControl ContentTemplate="{StaticResource SpellRefIcon}" Content="{Binding}" ls:AttachedProperties.InheritedTag="{StaticResource FalseValue}"/>
                            </Grid>

                            <TextBlock x:Name="text" Text="{Binding Spell.Name}" Style="{StaticResource FeatureListItemName}"/>

                            <TextBlock x:Name="featureType" Text="{Binding Source='h1912b50dgcd8ag4f74g9d0bg1666165c3451', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource FeatureListItemKind}"/>

                        </Grid>
                    </ContentControl>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Spell.Level}" Value="0">
                            <Setter TargetName="featureType" Property="Text" Value="{Binding Source='h5d603bcfg4028g4476g92b3gbca357af6bee', Converter={StaticResource TranslatedStringConverter}}"/>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Spell, Converter={StaticResource NullToBoolTrueConverter}}" Value="True"/>
                                <Condition Binding="{Binding DataContext.IsCantrips, ElementName=items}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="text" Property="Text" Value="{Binding Source='hbbbb4437g5f6bg480ag8339ge21760a1e1e6', Converter={StaticResource TranslatedStringConverter}}"/>
                            <Setter TargetName="featureType" Property="Text" Value=""/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Spell, Converter={StaticResource NullToBoolTrueConverter}}" Value="True"/>
                                <Condition Binding="{Binding DataContext.IsCantrips, ElementName=items}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="text" Property="Text" Value="{Binding Source='hbfacdf2agab0dg4172gbc5fga04eae7035be', Converter={StaticResource TranslatedStringConverter}}"/>
                            <Setter TargetName="featureType" Property="Text" Value=""/>
                        </MultiDataTrigger>

                    </DataTemplate.Triggers>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <DataTemplate x:Key="progressionPassiveSelectors" DataType="ls:VMCharacterCreationPassives">
        <StackPanel>

            <ItemsControl x:Name="items" ItemsSource="{Binding Passives}" Visibility="{Binding SelectedPassiveCount, Converter={StaticResource CountToVisibilityConverter}}">
                <ItemsControl.ItemContainerStyle>
                    <Style TargetType="FrameworkElement">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Value}" Value="0">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Enabled}" Value="False">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ItemsControl.ItemContainerStyle>
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="ls:VMCharacterCreationPassive">
                        <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Right">
                            <Grid>
                                <Grid Style="{StaticResource FeatureListItemIconHolder}">
                                    <Image x:Name="iconImage" Width="96" Height="96">
                                        <Image.Source>
                                            <MultiBinding Converter="{StaticResource IconIdToSourceConverter}" ConverterParameter="{StaticResource FallBackPassiveIconPath}">
                                                <Binding Source="Assets/Tooltips/Icons/"/>
                                                <Binding Path="IconName"/>
                                            </MultiBinding>
                                        </Image.Source>
                                    </Image>
                                </Grid>

                                <TextBlock x:Name="text" Text="{Binding Name}" Style="{StaticResource FeatureListItemName}"/>

                                <TextBlock x:Name="featureType" Text="{Binding Source='h68b5a020ga692g416eg8606gef8a995b12ba', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource FeatureListItemKind}"/>
                            </Grid>
                        </ContentControl>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <ContentControl Visibility="{Binding Visibility, ElementName=items, Converter={StaticResource InvertVisibilityConverter}}" Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTipService.Placement="Right">
                <ContentControl.ToolTip>
                    <ls:LSTooltip>
                        <TextBlock Text="{Binding Path=DataContext.Name, ElementName=base}" FontSize="{StaticResource ScaledDefaultFontSize}" TextWrapping="Wrap"/>
                    </ls:LSTooltip>
                </ContentControl.ToolTip>

                <TextBlock x:Name="previewTitle" Text="{Binding Source='hc2370fb0gadbcg4794g9607gbf3552a7ba15', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource FeatureListItemName}"/>

            </ContentControl>

        </StackPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding MaxSelectedPassiveCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True">
                <Setter TargetName="previewTitle" Property="Text">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h2e7cf7cag5ca9g48ecgb8d0g9359dd139a5a"/>
                            <Binding Path="MaxSelectedPassiveCount"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>

    </DataTemplate>

    <DataTemplate x:Key="progressionFeatureBoost" DataType="ls:VMFeatureBoost">
        <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Right">
            <Grid>
                <Grid Style="{StaticResource FeatureListItemIconHolder}">
                    <Rectangle x:Name="icon" Width="96" Height="96" Fill="{Binding Icon}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Image x:Name="actionResource" Style="{StaticResource ActionResourceTypeIdToSource}" Width="96" Height="96" Stretch="Uniform"/>
                </Grid>

                <TextBlock Style="{StaticResource FeatureListItemName}">
                                    <b:Interaction.Behaviors>
                                        <ls:CtxTransStringRunGeneratorBehavior Source="{Binding NameCTS}"/>
                                    </b:Interaction.Behaviors>
                </TextBlock>
            </Grid>
        </ContentControl>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Icon}" Value="{x:Null}">
                <Setter TargetName="icon" Property="Fill" Value="{StaticResource missingIconBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActualWidth, ElementName=actionResource, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="icon" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="progressionFeatureAbility" DataType="ls:VMAbility">
        <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Right">
            <Grid>
                <Grid Style="{StaticResource FeatureListItemIconHolder}">
                    <Image Style="{StaticResource abilityIconStyle}" Stretch="UniformToFill" Width="96" Height="96"/>
                </Grid>

                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="160,0,0,0">
                    <Control Template="{StaticResource AbilityDisplayName}" FontWeight="SemiBold" Foreground="{StaticResource LS_accent100TxtColor}"/>
                    <TextBlock x:Name="AbilitySuffix" Text="{Binding Improvement, StringFormat={}{0: +#; -#; +0}}" FontWeight="SemiBold" Foreground="{StaticResource LS_accent100TxtColor}"/>
                </StackPanel>

            </Grid>
        </ContentControl>
    </DataTemplate>

    <ControlTemplate x:Key="progressionFeaturesList">
        <StackPanel>

            <ItemsControl ItemsSource="{Binding Skills}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="ls:VMSkill">
                        <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Right">
                            <Grid>
                                <Grid Style="{StaticResource FeatureListItemIconHolder}">
                                    <Image x:Name="skillIcon" Style="{StaticResource SkillsIcon}" Stretch="Uniform" />
                                </Grid>

                                <Control Template="{StaticResource SkillDisplayName}" FontSize="{StaticResource ScaledDefaultFontSize}" FontWeight="SemiBold" Foreground="{StaticResource LS_accent100TxtColor}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="160,0,0,0"/>

                                <TextBlock x:Name="featureType" Text="{Binding Source='h6df70972gfd55g4f29g9431g0a1530858ccf', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource FeatureListItemKind}"/>

                            </Grid>
                        </ContentControl>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <ItemsControl ItemsSource="{Binding Other}" ItemTemplate="{StaticResource progressionFeatureBoost}"/>

            <ItemsControl ItemsSource="{Binding AbilityBonuses}" Visibility="{Binding AbilityBonuses.Count, Converter={StaticResource CountToVisibilityConverter}}" Margin="0,20,0,0">
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="ls:VMAbility">
                        <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Right">
                            <Grid>
                                <Grid Style="{StaticResource FeatureListItemIconHolder}"/>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Name}" Style="{StaticResource FeatureListItemName}">
                                    <b:Interaction.Behaviors>
                                        <ls:CtxTransStringRunGeneratorBehavior Source="{Binding NameCTS}"/>
                                    </b:Interaction.Behaviors>
                                </TextBlock>
                            </Grid>
                        </ContentControl>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <ItemsControl ItemsSource="{Binding SaveProficiencies}" Visibility="{Binding SaveProficiencies.Count, Converter={StaticResource CountToVisibilityConverter}}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="ls:VMFeatureBoost">
                        <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Right">
                            <Grid>
                                <Grid Style="{StaticResource FeatureListItemIconHolder}"/>

                                <TextBlock Style="{StaticResource FeatureListItemName}">
                                    <b:Interaction.Behaviors>
                                        <ls:CtxTransStringRunGeneratorBehavior Source="{Binding NameCTS}"/>
                                    </b:Interaction.Behaviors>
                                </TextBlock>
                            </Grid>
                        </ContentControl>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <ItemsControl ItemsSource="{Binding WeaponProficiencies}" ItemTemplate="{StaticResource progressionFeatureBoost}" Visibility="{Binding WeaponProficiencies.Count, Converter={StaticResource CountToVisibilityConverter}}"/>

            <ItemsControl ItemsSource="{Binding ArmourProficiencies}" ItemTemplate="{StaticResource progressionFeatureBoost}" Visibility="{Binding ArmourProficiencies.Count, Converter={StaticResource CountToVisibilityConverter}}"/>

        </StackPanel>
    </ControlTemplate>

    <DataTemplate x:Key="SubclassesTemplate">
        <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True">
            <Grid>
                <Grid Style="{StaticResource FeatureListItemIconHolder}">
                    <Image x:Name="SelectedSubclassIcon" Style="{StaticResource ClassIconHotbarStyle}" Stretch="Uniform" DataContext="{Binding SelectedSubclass}"/>
                </Grid>
                <TextBlock x:Name="SpecializationText" Style="{StaticResource FeatureListItemName}" ls:TextBlockFormatter.SourceText="{Binding Source='h990f5b12g47e8g409fg8ebeg1b658317dc01', Converter={StaticResource TranslatedStringConverter}}"/>
            </Grid>
        </ContentControl>
    </DataTemplate>

    <ControlTemplate x:Key="FeatAvailableTemplate">
        <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True">
            <Grid>
                <Grid Style="{StaticResource FeatureListItemIconHolder}">
                    <Rectangle x:Name="featicon" Fill="{Binding SelectedFeat.Icon}" Width="96" Height="96" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </Grid>
                <TextBlock Style="{StaticResource FeatureListItemName}" ls:TextBlockFormatter.SourceText="{Binding Source='h12ed73a6g2dc4g49ebg9c0ag304ca2b76196', Converter={StaticResource TranslatedStringConverter}}"/>
            </Grid>
        </ContentControl>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding SelectedFeat.Icon}" Value="{x:Null}">
                <Setter TargetName="featicon" Property="Fill" Value="{StaticResource IconFeatDefaultBrush}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="classPanelTemplate">
        <DockPanel Margin="0,0,0,50">
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <b:InvokeCommandAction Command="{Binding DataContext.SetupClassesLoopingCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="Available"/>
                    <!-- Tutorial UI Event - Multiclass-->
                    <b:InvokeCommandAction Command="{Binding DataContext.TutorialEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="903e0cfe-5bf3-42c3-95ad-869318c638b5"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <Control Template="{StaticResource setGameplayCameraOffsets}"/>

            <StackPanel DockPanel.Dock="Top">
                <TextBlock x:Name="panelTitle" ls:TextBlockFormatter.SourceText="{Binding Source=h4d0d00cfg4edeg42c3gaa4agcc3908351b8d, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>

                <TextBlock x:Name="addClassDescription" Visibility="Collapsed" ls:TextBlockFormatter.SourceText="{Binding Source=h5207e327g4302g4910gaf8cgc2e27cc1b248, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}" Margin="0,20,0,20"/>

                <StackPanel x:Name="classList" Visibility="{Binding SelectableClasses.Count, Converter={StaticResource CountToVisibilityConverter}, FallbackValue=Collapsed}">

                    <ListBox x:Name="classCarousel" Template="{StaticResource IconCarouselTemplate}" ItemsSource="{Binding SelectableClasses}" SelectedItem="{Binding SelectedClass}">
                        <ListBox.Resources>
                            <ControlTemplate x:Key="IconsTemplate">
                                <Control x:Name="icons" Template="{StaticResource CarouselClassIconsFewTemplate}"/>
                                <ControlTemplate.Triggers>
                                    <DataTrigger Binding="{Binding FilteredItems.Count, ElementName=CurrentMultiClasses, Converter={StaticResource GreaterThanConverter}, ConverterParameter=3}">
                                        <Setter TargetName="icons" Property="Template" Value="{StaticResource CarouselClassIconsTemplate}"/>
                                    </DataTrigger>
                                </ControlTemplate.Triggers>

                            </ControlTemplate>
                        </ListBox.Resources>
                    </ListBox>

                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding SelectedClass.Description}" Style="{StaticResource PanelDescriptionText}" Margin="0,30,0,0"/>
                </StackPanel>

                <StackPanel x:Name="multiclassList" Visibility="{Binding SelectableAdditionalClasses.Count, Converter={StaticResource CountToVisibilityConverter}, FallbackValue=Collapsed}">

                    <ListBox x:Name="multiclassCarousel" Template="{StaticResource IconCarouselTemplate}" ItemsSource="{Binding SelectableAdditionalClasses}" SelectedItem="{Binding SelectedMultiClass}">
                        <ListBox.Resources>
                            <ControlTemplate x:Key="IconsTemplate">
                                <Control Template="{StaticResource CarouselClassIconsTemplate}"/>
                            </ControlTemplate>
                        </ListBox.Resources>
                    </ListBox>

                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding SelectedMultiClass.Description}" Style="{StaticResource PanelDescriptionText}" Margin="0,10,0,50"/>
                </StackPanel>

                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h230f60c6g161fg481bgbe52g42bc264618dd', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource FeatureListHeaderText}"/>

            </StackPanel>

            <ScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}">
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                    <ItemsControl ItemsSource="{Binding FilteredItems, ElementName=ClassSpellSelectors}" ItemTemplate="{StaticResource progressionSpellSelectors}" Visibility="{Binding FilteredItems.Count, ElementName=ClassSpellSelectors, Converter={StaticResource CountToVisibilityConverter}}"/>

                    <ItemsControl ItemsSource="{Binding FilteredItems, ElementName=ClassProgressions}" ItemTemplate="{StaticResource progressionSpellsTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=ClassProgressions, Converter={StaticResource CountToVisibilityConverter}}"/>

                    <ItemsControl ItemsSource="{Binding FilteredItems, ElementName=ClassPassiveFeatures}" ItemTemplate="{StaticResource progressionSpellsTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=ClassPassiveFeatures, Converter={StaticResource CountToVisibilityConverter}}"/>

                    <Control Template="{StaticResource progressionFeaturesList}" DataContext="{Binding ProgressionData.ClassProgression}" HorizontalAlignment="Center"/>

                </StackPanel>
            </ScrollViewer>
        </DockPanel>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding SelectedMultiClass.Level}" Value="0">
                <Setter TargetName="panelTitle" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hcbc3c9a8g9e80g4139g952bga971015c1f41', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="addClassDescription" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="subClassPanelTemplate">
        <DockPanel Margin="0,0,0,50">

            <Control Template="{StaticResource setGameplayCameraOffsets}"/>

            <StackPanel DockPanel.Dock="Top">
                <TextBlock x:Name="subclassTitle" Text="{Binding Source=h1e67bc9cg0f53g4218g8ce8geb6a6636f141, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>

                <ListBox x:Name="subclassCarousel" Template="{StaticResource IconCarouselTemplate}" ItemsSource="{Binding SelectableSubClasses}" SelectedItem="{Binding SelectedSubClass}">
                    <ListBox.Resources>
                        <ControlTemplate x:Key="IconsTemplate">
						<!-- MOD START - Use duplicate subclass template -->
							<Control x:Name="icons" Template="{StaticResource CarouselSubclassIconsFewTemplate}"/>
							<ControlTemplate.Triggers>
								<DataTrigger Binding="{Binding SelectableSubClasses.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=3}">
									<Setter TargetName="icons" Property="Template" Value="{StaticResource CarouselSubclassIconsTemplate}"/>
									<!-- MOD END -->
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </ListBox.Resources>
                </ListBox>

                <TextBlock x:Name="subClassName" Visibility="Collapsed" ls:TextBlockFormatter.SourceText="{Binding SelectedSubClass.Name}" Style="{StaticResource PanelHeaderText}" TextAlignment="Center" Margin="0,60,0,0"/>

                <TextBlock ls:TextBlockFormatter.SourceText="{Binding SelectedSubClass.Description}" Style="{StaticResource PanelDescriptionText}" Margin="0,30,0,0"/>

                <TextBlock x:Name="featuresHeader" Visibility="Collapsed" ls:TextBlockFormatter.SourceText="{Binding Source='h230f60c6g161fg481bgbe52g42bc264618dd', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource FeatureListHeaderText}"/>

            </StackPanel>

            <ScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}">
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                    <ItemsControl ItemsSource="{Binding FilteredItems, ElementName=SubClassProgressions}" ItemTemplate="{StaticResource progressionSpellsTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=SubClassProgressions, Converter={StaticResource CountToVisibilityConverter}}"/>

                    <ItemsControl ItemsSource="{Binding FilteredItems, ElementName=SubClassPassiveFeatures}" ItemTemplate="{StaticResource progressionSpellsTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=SubClassPassiveFeatures, Converter={StaticResource CountToVisibilityConverter}}"/>

                    <ItemsControl ItemsSource="{Binding FilteredItems, ElementName=SubClassSpellSelectors}" ItemTemplate="{StaticResource progressionSpellSelectors}" Visibility="{Binding FilteredItems.Count, ElementName=SubClassSpellSelectors, Converter={StaticResource CountToVisibilityConverter}}"/>

                    <ItemsControl ItemsSource="{Binding ClassProgressionDetails.SubPassiveSelectors}" ItemTemplate="{StaticResource progressionPassiveSelectors}" ItemContainerStyle="{StaticResource UpdateStateItemStyle}"/>

                    <Control Template="{StaticResource progressionFeaturesList}" DataContext="{Binding ProgressionData.SubClassProgression}" HorizontalAlignment="Center"/>

                </StackPanel>
            </ScrollViewer>
        </DockPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding SelectableSubClasses.Count}" Value="0">
                <Setter TargetName="subclassCarousel" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="subClassName" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedClass.SubclassTitle, FallbackValue='',Converter={StaticResource CompareStringConverter}, ConverterParameter=''}" Value="False">
                <Setter TargetName="subclassTitle" Property="Text" Value="{Binding SelectedClass.SubclassTitle}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedMultiClass.SubclassTitle, FallbackValue='',Converter={StaticResource CompareStringConverter}, ConverterParameter=''}" Value="False">
                <Setter TargetName="subclassTitle" Property="Text" Value="{Binding SelectedMultiClass.SubclassTitle}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="CharacterLevelUp">
                <Setter TargetName="subclassTitle" Property="Text" Value="{Binding Source=h1e67bc9cg0f53g4218g8ce8geb6a6636f141, Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding FilteredItems.Count, ElementName=SubClassProgressions, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="featuresHeader" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding FilteredItems.Count, ElementName=SubClassPassiveFeatures, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="featuresHeader" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding FilteredItems.Count, ElementName=SubClassSpellSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="featuresHeader" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProgressionData.SubClassProgression.SaveProficiencies.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="featuresHeader" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProgressionData.SubClassProgressionWeaponProficiencies, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="featuresHeader" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProgressionData.SubClassProgressionArmourProficiencies, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="featuresHeader" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProgressionData.SubClassProgressionOther, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="featuresHeader" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProgressionData.SubClassProgressionAbilityBonuses, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="featuresHeader" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProgressionData.SubClassProgressionSkills, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="featuresHeader" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProgressionData.SubClassProgressionCantrips, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="featuresHeader" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ProgressionData.SubClassProgressionSpells, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="featuresHeader" Property="Visibility" Value="Visible"/>
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="spellPrepTemplate">
        <DockPanel x:Name="base" DataContext="{Binding SpellPrepare}">

            <Control Template="{StaticResource setGameplayCameraOffsets}"/>

            <StackPanel Orientation="Vertical" DockPanel.Dock="Top">
                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h15329947gc691g4323gac0fge3fbcecb92d9', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>

                <StackPanel x:Name="PreparationHelp" Visibility="Collapsed">
                    <TextBlock x:Name="SelectorStripTitle" ls:TextBlockFormatter.SourceText="{Binding Source='hdbaa56a0gc5e6g4968gb3eag9d5fbcef225e', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}" Margin="0,50,0,0"/>
                    <TextBlock x:Name="PreparedSpellsDescription" ls:TextBlockFormatter.SourceText="{Binding Source='he47d6cc7g50c3g4ab6g9027g2c54a173db29', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}"/>
                </StackPanel>
                <TextBlock x:Name="PreparedSpellsTitle" ls:TextBlockFormatter.SourceText="{Binding Source='hcfab5df8g7913g4193gae43g805a927077a5', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}" Margin="0,50,0,0"/>
                <ItemsControl x:Name="chosenSpells" ItemsSource="{Binding Prepared}" ItemTemplate="{StaticResource removeableSpell}" Style="{StaticResource spellSelectorSpellListStyle}" Width="{Binding ActualWidth, ElementName=base}"/>
            </StackPanel>

            <ls:LSScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}" ls:ScrollViewerHelper.VerticalScrollOffsetMargin="300">
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h60d9fcd7g33e4g4606g8fe9g8f5f25e03847', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}" Margin="0,50,0,0"/>
                    <ItemsControl x:Name="availableSpellsByLevel" ItemsSource="{Binding SortedItems, ElementName=SortedPreparableSpellGroupsByLevel}" Style="{StaticResource spellSelectorSpellListStyle}" Width="{Binding ActualWidth, ElementName=base}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel IsItemsHost="True" HorizontalAlignment="Center"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMSpellReferenceByLevel}">
                                <StackPanel>
                                    <b:Interaction.Behaviors>
                                        <ls:CollectionSortBehavior x:Name="SortedSpellsBySchool" ItemsSource="{Binding Spells}" 
                                                                    Comparer="{Binding DataContext.SpellBySchoolSortComparer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" />
                                    </b:Interaction.Behaviors>
                                    <TextBlock Style="{StaticResource PanelSubHeaderText}" Margin="0,50,0,0">
                                        <TextBlock.Text>
                                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                <Binding Source="hd678d4eeg181fg499dg9e81g2146ab24e03a"/>
                                                <Binding Path="Level" Converter="{StaticResource DecimalToRomanConverter}"/>
                                                <Binding Source=""/>
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                    <ItemsControl x:Name="availableSpells" ItemsSource="{Binding SortedItems, ElementName=SortedSpellsBySchool}" 
                                                                          ItemTemplate="{StaticResource selectableSpell}" 
                                                                          Style="{StaticResource spellSelectorSpellListStyle}"
                                                                          Width="{Binding ActualWidth, ElementName=base}"
                                                                          Margin="-60,0,0,0"/>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>
            </ls:LSScrollViewer>
        </DockPanel>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.CurrentCharacterLevel, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource LessThanConverter}, ConverterParameter=5}" Value="True">
                <Setter TargetName="PreparationHelp" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SpellPrepare.IsComplete}" Value="False">
                <Setter TargetName="PreparedSpellsTitle" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="SelectablePassiveTemplate" DataType="ls:VMCharacterCreationPassive">
        <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTip="{StaticResource ManagedTooltip}">
            <Grid>
                <Grid Style="{StaticResource FeatureListItemIconHolder}">
                    <Image x:Name="iconImage" Width="96" Height="96">
                        <Image.Source>
                            <MultiBinding Converter="{StaticResource IconIdToSourceConverter}" ConverterParameter="{StaticResource FallBackPassiveIconPath}">
                                <Binding Source="Assets/Tooltips/Icons/"/>
                                <Binding Path="IconName"/>
                            </MultiBinding>
                        </Image.Source>
                    </Image>
                </Grid>

                <TextBlock x:Name="text" Text="{Binding Name}" Style="{StaticResource FeatureListItemName}"/>

                <Image x:Name="tick" Visibility="Collapsed" Source="{StaticResource IconTick}" Stretch="None" HorizontalAlignment="Right" Margin="0,0,30,0"/>

                <ls:LSInputBinding x:Name="toggleValue" BoundEvent="UIAccept" TriggerOnRelease="True" IsEnabled="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Command="{Binding DataContext.TogglePassive, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="LSInputBindingPressed">
                            <ls:LSPlaySound Sound="UI_DefaultButton_Click" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSInputBinding>

            </Grid>
        </ContentControl>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Value}" Value="1.0">
                <Setter TargetName="tick" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Enabled}" Value="False">
                <Setter TargetName="tick" Property="Visibility" Value="Visible"/>
                <Setter TargetName="tick" Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                <Setter TargetName="text" Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="PassiveSelectorItemTemplate">
        <DockPanel Height="{StaticResource gameplayPanelHeight}">
            <StackPanel DockPanel.Dock="Top">
                <TextBlock x:Name="title" ls:TextBlockFormatter.SourceText="{Binding Name}" Style="{StaticResource PanelHeaderText}"/>

                <TextBlock x:Name="description" ls:TextBlockFormatter.SourceText="{Binding Description.Text}" Style="{StaticResource PanelDescriptionText}" Margin="0,20,0,0"/>

                <TextBlock x:Name="SelectedTitle" Style="{StaticResource PanelSubHeaderText}" Margin="0,50,0,0">
                    <Run Text="{Binding Source='h390a9286g28cag49ceg93c5gd5b7c1e962da', Converter={StaticResource TranslatedStringConverter}}"/>
                    <Run Text="{Binding SelectedPassiveCount, StringFormat=' {0}'}"/>
                    <Run x:Name="PassiveSelectorMaxText" Text="{Binding MaxSelectedPassiveCount, StringFormat='/{0}'}"/>
                </TextBlock>
            </StackPanel>

            <ScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}">
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                    <ItemsControl ItemsSource="{Binding Passives}" ItemTemplate="{StaticResource SelectablePassiveTemplate}" Margin="0,40,0,0"/>

                    <Control x:Name="PiercingSelector" Visibility="Collapsed" Margin="0,50,0,0"/>

                </StackPanel>
            </ScrollViewer>

        </DockPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Description.Text, Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="True">
                <Setter TargetName="description" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DataContext.IsLevelUp, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, FallbackValue=False}" Value="True">
                <Setter TargetName="PiercingSelector" Property="Visibility" Value="{Binding DataContext.SelectablePiercings.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource CountToVisibilityConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsVisible, ElementName=PiercingSelector}" Value="True">
                <Setter TargetName="PiercingSelector" Property="Template">
                    <!-- Set it only when it is needed or it will trigger a SelectedItem change on finishing CC, leading to a crash (more details in GUS-305574) -->
                    <Setter.Value>
                        <ControlTemplate TargetType="Control">
                            <StackPanel>
                                <TextBlock Text="{Binding Source='h261cce55g1d1eg4c09g9675ge5c1be13e820', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}"/>
                                <ListBox Template="{DynamicResource SelectableCarouselTemplate}" ItemsSource="{Binding DataContext.SelectablePiercings, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" SelectedItem="{Binding DataContext.SelectedPiercing, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsComplete}" Value="False">
                <Setter TargetName="SelectedTitle" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="EquipmentSelectorItemTemplate">
        <StackPanel>
            <TextBlock x:Name="title" ls:TextBlockFormatter.SourceText="{Binding Name}" Style="{StaticResource PanelHeaderText}"/>

            <TextBlock x:Name="description" ls:TextBlockFormatter.SourceText="{Binding Description.Text}" Style="{StaticResource PanelDescriptionText}" Margin="0,20,0,0"/>

            <TextBlock Style="{StaticResource PanelSubHeaderText}" Margin="0,50,0,0">
                <Run Text="{Binding Source='ha831257cg1d13g4c00g8a55g00847dd17c51', Converter={StaticResource TranslatedStringConverter}}"/><Run Text="{Binding SelectedEquipmentCount, StringFormat=' {0}'}"/><Run Text="{Binding MaxSelectedEquipmentCount, StringFormat='/{0}'}"/>
            </TextBlock>

            <ItemsControl ItemsSource="{Binding Equipments}" Margin="0,40,0,0">
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="ls:VMCharacterCreationEquipment">
                        <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTip="{StaticResource ManagedTooltip}">
                            <Grid>
                                <Grid Style="{StaticResource FeatureListItemIconHolder}">
                                    <Image x:Name="iconImage" Width="96" Height="96">
                                        <Image.Source>
                                            <MultiBinding Converter="{StaticResource IconIdToSourceConverter}" ConverterParameter="{StaticResource FallBackPassiveIconPath}">
                                                <Binding Source="Assets/Tooltips/ItemIcons/"/>
                                                <Binding Path="IconName"/>
                                            </MultiBinding>
                                        </Image.Source>
                                    </Image>
                                </Grid>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Name}" Style="{StaticResource FeatureListItemName}"/>

                                <Image x:Name="tick" Visibility="Collapsed" Source="{StaticResource IconTick}" Stretch="None" HorizontalAlignment="Right" Margin="0,0,30,0"/>

                                <ls:LSInputBinding x:Name="toggleValue" BoundEvent="UIAccept" TriggerOnRelease="True" IsEnabled="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Command="{Binding DataContext.ToggleEquipment, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}">
                                    <b:Interaction.Triggers>
                                        <b:EventTrigger EventName="LSInputBindingPressed">
                                            <ls:LSPlaySound Sound="UI_DefaultButton_Click" />
                                        </b:EventTrigger>
                                    </b:Interaction.Triggers>
                                </ls:LSInputBinding>

                            </Grid>
                        </ContentControl>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding Value}" Value="1.0">
                                <Setter TargetName="tick" Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Description.Text, Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="True">
                <Setter TargetName="description" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="selectableSkillTemplate" DataType="ls:VMCharacterCreationSkill">
        <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" ToolTip="{StaticResource ManagedTooltip}">
            <Grid VerticalAlignment="Center" Margin="50,0,50,0">

                <Control x:Name="skillName" Template="{StaticResource SkillDisplayName}" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource CCTextSpecial}" HorizontalAlignment="Left"/>

                <TextBlock x:Name="skillRollBonus" Text="{Binding Value, StringFormat={}{0:+#;-#;+0}}" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource CCTextSpecial}" HorizontalAlignment="Right" Margin="0,0,200,0"/>

                <Grid HorizontalAlignment="Right" Margin="0,0,100,0">
                    <Image x:Name="pointIcon" Stretch="None" Width="48" Height="48" />
                </Grid>

                <ls:LSInputBinding x:Name="toggleSkill" BoundEvent="UIAccept" TriggerOnRelease="True" IsEnabled="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Command="{Binding DataContext.ToggleSkill,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="LSInputBindingPressed">
                            <ls:LSPlaySound Sound="UI_DefaultButton_Click" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSInputBinding>
            </Grid>
        </ContentControl>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Enabled}" Value="True">
                <Setter TargetName="skillName" Property="Foreground" Value="{StaticResource CCTextLight}"/>
                <Setter TargetName="skillRollBonus" Property="Foreground" Value="{StaticResource CCTextLight}"/>
                <Setter TargetName="pointIcon" Property="Source" Value="{StaticResource tabDotOff}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Enabled}" Value="True"/>
                    <Condition Binding="{Binding Selected}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="skillName" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
                <Setter TargetName="skillRollBonus" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
                <Setter TargetName="pointIcon" Property="Source" Value="{StaticResource tabDotOn}"/>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="deityTabPanelTemplate">
        <StackPanel>

            <Control Template="{StaticResource setGameplayCameraOffsets}"/>

            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h5238a9c6gb90fg40bbg9335gfb37d6e91b94, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>

            <ScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}">
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                    <ListBox x:Name="deityCarousel" Template="{StaticResource IconCarouselTemplate}" ItemsSource="{Binding SelectableDeities}" SelectedItem="{Binding SelectedDeity}">
                        <ListBox.Resources>
                            <Style x:Key="CustomIconStyle" BasedOn="{StaticResource DeityIconStyle}" TargetType="Rectangle"/>
                            <ControlTemplate x:Key="IconsTemplate">
                                <Control x:Name="icons" Template="{StaticResource CarouselCustomIconsFewTemplate}"/>
                                <ControlTemplate.Triggers>
                                    <DataTrigger Binding="{Binding SelectableDeities.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=3}" Value="True">
                                        <Setter TargetName="icons" Property="Template" Value="{StaticResource CarouselCustomIconsTemplate}"/>
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ListBox.Resources>
                    </ListBox>

                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding SelectedDeity.Description}" Style="{StaticResource PanelDescriptionText}" Margin="0,30,0,0"/>

                </StackPanel>
            </ScrollViewer>
        </StackPanel>

    </ControlTemplate>


    <Style x:Key="ColorOptionsStyle" TargetType="ItemsControl">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel>
                        <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource AppearanceListButtonTemplateShort}" HorizontalAlignment="Center">
                            <Control  Template="{StaticResource ColorOptionTickBoxTemplate}" />
                        </ContentControl>
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="skillsSelectionTemplate">
        <DockPanel x:Name="skillsPanel" Height="{StaticResource gameplayPanelHeight}">
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <StackPanel DockPanel.Dock="Top">

                <Control Template="{DynamicResource skillsSelectionHeader}"/>
                <Control Template="{DynamicResource skillsSelectionDescription}"/>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,30,0,0">
                    <Control Template="{DynamicResource skillsSelectedLabel}"/>
                    <TextBlock x:Name="AssignedValue" FontSize="{StaticResource ScaledDefaultFontSize}" HorizontalAlignment="Center" Margin="20,0,0,0">
                        <TextBlock.Text>
                            <MultiBinding StringFormat="{}{0}/{1}">
                                <Binding Path="SelectedSkillCount"/>
                                <Binding Path="MaxSelectedSkillCount"/>
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </StackPanel>

                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,0,0,20">
                    <StackPanel.Resources>
                        <Style TargetType="Image">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Setter Property="Stretch" Value="None"/>
                            <Setter Property="Width" Value="48"/>
                            <Setter Property="Height" Value="48"/>
                        </Style>
                    </StackPanel.Resources>
                    <Image x:Name="point0" Source="{StaticResource tabDotOff}"/>
                    <Image x:Name="point1" Source="{StaticResource tabDotOff}"/>
                    <Image x:Name="point2" Source="{StaticResource tabDotOff}"/>
                    <Image x:Name="point3" Source="{StaticResource tabDotOff}"/>
                </StackPanel>

            </StackPanel>

            <ScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}">
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                    <Control Template="{DynamicResource selectableSkills}"/>

                </StackPanel>
            </ScrollViewer>

        </DockPanel>

        <ControlTemplate.Triggers>

            <DataTrigger Binding="{Binding MaxSelectedSkillCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="point0" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding MaxSelectedSkillCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True">
                <Setter TargetName="point1" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding MaxSelectedSkillCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=2}" Value="True">
                <Setter TargetName="point2" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding MaxSelectedSkillCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=3}" Value="True">
                <Setter TargetName="point3" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding SelectedSkillCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="point0" Property="Source" Value="{StaticResource tabDotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSkillCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True">
                <Setter TargetName="point1" Property="Source" Value="{StaticResource tabDotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSkillCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=2}" Value="True">
                <Setter TargetName="point2" Property="Source" Value="{StaticResource tabDotOn}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSkillCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=3}" Value="True">
                <Setter TargetName="point3" Property="Source" Value="{StaticResource tabDotOn}"/>
            </DataTrigger>

            <DataTrigger Value="False">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="SelectedSkillCount"/>
                        <Binding Path="MaxSelectedSkillCount"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="AssignedValue" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="SkillsTitleStyle" TargetType="TextBlock">
        <Setter  Property="Foreground" Value="{StaticResource CCTextNormal}"/>
        <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
        <Style.Triggers>
            <DataTrigger Value="False">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="SelectedSkillCount"/>
                        <Binding Path="MaxSelectedSkillCount"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter  Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="raceSkillProficiencyPanelTemplate">
        <Control Template="{StaticResource skillsSelectionTemplate}" DataContext="{Binding AllSkills.RaceProficientSkills}">
            <Control.Resources>
                <ControlTemplate x:Key="skillsSelectionHeader">
                    <TextBlock Text="{Binding Source='h6df70972gfd55g4f29g9431g0a1530858ccf', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>
                </ControlTemplate>
                <ControlTemplate x:Key="skillsSelectionDescription">
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h50102d2egd75ag447dgba88gf64cd903a457', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}" MaxWidth="1100" TextWrapping="Wrap"/>
                </ControlTemplate>
                <ControlTemplate x:Key="skillsSelectedLabel">
                    <TextBlock Text="{Binding Source='h8931179bg03ebg45bdg8dbbg824c1178ccbd', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource SkillsTitleStyle}"/>
                </ControlTemplate>
                <ControlTemplate x:Key="selectableSkills">
                    <ItemsControl ItemsSource="{Binding SortedItems, ElementName=SortedRaceSkills}" ItemTemplate="{StaticResource selectableSkillTemplate}" Tag="Race"/>
                </ControlTemplate>
            </Control.Resources>
        </Control>
    </ControlTemplate>

    <ControlTemplate x:Key="skillProficiencyPanelTemplate">
        <Control Template="{StaticResource skillsSelectionTemplate}" DataContext="{Binding AllSkills.ClassProficientSkills}">
            <Control.Resources>
                <ControlTemplate x:Key="skillsSelectionHeader">
                    <TextBlock Text="{Binding Source='h6df70972gfd55g4f29g9431g0a1530858ccf', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>
                </ControlTemplate>
                <ControlTemplate x:Key="skillsSelectionDescription">
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h50102d2egd75ag447dgba88gf64cd903a457', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}" MaxWidth="1100" TextWrapping="Wrap"/>
                </ControlTemplate>
                <ControlTemplate x:Key="skillsSelectedLabel">
                    <TextBlock Text="{Binding Source='h8931179bg03ebg45bdg8dbbg824c1178ccbd', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource SkillsTitleStyle}"/>
                </ControlTemplate>
                <ControlTemplate x:Key="selectableSkills">
                    <ItemsControl ItemsSource="{Binding SortedItems, ElementName=SortedClassSkills}" ItemTemplate="{StaticResource selectableSkillTemplate}"/>
                </ControlTemplate>
            </Control.Resources>
        </Control>
    </ControlTemplate>

    <ControlTemplate x:Key="skillExpertisePanelTemplate">
        <Control Template="{StaticResource skillsSelectionTemplate}" DataContext="{Binding AllSkills.ExpertiseSkills}">
            <Control.Resources>
                <ControlTemplate x:Key="skillsSelectionHeader">
                    <TextBlock Text="{Binding Source='hb05a8953g3596g4e62g91c4gb1a8f8babd71', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>
                </ControlTemplate>
                <ControlTemplate x:Key="skillsSelectionDescription">
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hcaaf5b44gc727g4765gb347g4aad3cce1837', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}" MaxWidth="1100" TextWrapping="Wrap"/>
                </ControlTemplate>
                <ControlTemplate x:Key="skillsSelectedLabel">
                    <TextBlock Text="{Binding Source='h863c91fbg1f42g4969gb7b1ga1245440b043', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource SkillsTitleStyle}"/>
                </ControlTemplate>
                <ControlTemplate x:Key="selectableSkills">
                    <ItemsControl ItemsSource="{Binding SortedItems, ElementName=SortedExpertiseSkills}" ItemTemplate="{StaticResource selectableSkillTemplate}"/>
                </ControlTemplate>
            </Control.Resources>
        </Control>
    </ControlTemplate>

    <ControlTemplate x:Key="StandardBottomButtonsTemplate">
        <DockPanel>
            <TextBlock x:Name="MulticlassDisabledDesc" DockPanel.Dock="Top" ls:TextBlockFormatter.SourceText="{Binding Source='h8fcb856ega2acg4a7fga12fg65567a18376e', Converter={StaticResource TranslatedStringConverter}}" 
                       Style="{StaticResource PanelDescriptionText}" Foreground="{StaticResource LS_accent75TxtColor}" HorizontalAlignment="Right" Margin="0,0,0,12"/>

            <StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal">
                <!-- Add a new class (multiclass) in LevelUp -->
                <ls:LSButton x:Name="addClassButton" Visibility="Collapsed" IsEnabled="False" Command="{Binding DataContext.SelectFirstUnusedClass, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAddClass, Converter={StaticResource FindInputEventConverter}}" BoundEvent="UIAddClass" Tag="{Binding Source=hcbc3c9a8g9e80g4139g952bga971015c1f41,Converter={StaticResource TranslatedStringConverter}}">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Click">
                            <b:ChangePropertyAction TargetName="levelupTab" PropertyName="Visibility" Value="Collapsed" />
                            <b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedItem" Value="{Binding ElementName=classTab}" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSButton>

                <ls:LSButton x:Name="cancelAddClassButton" Visibility="Collapsed" Command="{Binding DataContext.SelectFirstUsedClass, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAddClass, Converter={StaticResource FindInputEventConverter}}" BoundEvent="UIAddClass" Tag="{Binding Source=hd8d647a9ga19bg47c6g9c46gc4b12ac464c8,Converter={StaticResource TranslatedStringConverter}}">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Click">
                            <b:ChangePropertyAction TargetName="levelupTab" PropertyName="Visibility" Value="Visible" />
                            <b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedItem" Value="{Binding ElementName=levelupTab}" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSButton>

                <ls:LSButton x:Name="useRecommended" Visibility="Collapsed" Command="{Binding DataContext.UseRecommendedAbilities, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIDelete, Converter={StaticResource FindInputEventConverter}}" BoundEvent="UIDelete" Tag="{Binding Source=h44d84d6fg14d8g4606gb563gf458f155defa,Converter={StaticResource TranslatedStringConverter}}"/>

                <ls:LSButton x:Name="showSummary" Visibility="{Binding ElementName=summary, Path=Visibility, Converter={StaticResource InvertVisibilityConverter}}" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UISort, Converter={StaticResource FindInputEventConverter}}" BoundEvent="UISort" Tag="{Binding Source=h890f4cddg2bdcg4bb2gb73eg43fe16b11b08,Converter={StaticResource TranslatedStringConverter}}" TapTime="{StaticResource DefaultButtonTapTime}">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Click">
                            <b:ChangePropertyAction TargetName="summary" PropertyName="Tag" Value="ShowIfPossible" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSButton>
                <ls:LSButton x:Name="hideSummary" Visibility="{Binding ElementName=summary, Path=Visibility}" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UISort, Converter={StaticResource FindInputEventConverter}}" BoundEvent="UISort" Tag="{Binding Source=h70ec62ddg0cfcg4512ga0c6gbc591945b75b,Converter={StaticResource TranslatedStringConverter}}" TapTime="{StaticResource DefaultButtonTapTime}">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Click">
                            <b:ChangePropertyAction TargetName="summary" PropertyName="Tag" Value="HideIfPossible" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSButton>

                <!-- Toggle tooltips -->
                <ls:LSButton x:Name="ToggleTooltips"
                                     Command="{Binding ToggleTooltipOnUIElement}"
                                     CommandParameter="{Binding FocusedElement, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}"
                                     BoundEvent="UIShowInfo"
                                     ContentTemplate="{StaticResource ControllerButtonHint}"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIShowInfo, Converter={StaticResource FindInputEventConverter}}"
                                     Tag="{Binding Source='hf8dd4c2fg97e0g4ccdgac1ag3cd1fe5060ef', Converter={StaticResource TranslatedStringConverter}}" TapTime="{StaticResource DefaultButtonTapTime}"/>

                <ls:LSButton x:Name="backButton" Command="{Binding DataContext.PrevGameplayTab, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding ElementName=gameplayTabs}"  ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UICancel, Converter={StaticResource FindInputEventConverter}}" BoundEvent="UICancel" Tag="{Binding Source=h77fec760g866dg4e47g8e81g467c9c05e447,Converter={StaticResource TranslatedStringConverter}}"/>

                <ContentPresenter/>
            </StackPanel>
        </DockPanel>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="origin">
                <Setter TargetName="backButton" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=gameplayTabs, Path=Tag}" Value="levelup"/>
                    <Condition Binding="{Binding HasPrevGameplayTab}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="backButton" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="ability">
                <Setter TargetName="useRecommended" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="appearance">
                <Setter TargetName="showSummary" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="hideSummary" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="daisy">
                <Setter TargetName="showSummary" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="hideSummary" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=gameplayTabs, Path=Tag}" Value="levelup"/>
                    <Condition Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="levelup"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="addClassButton" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding IsMulticlassEnabled}" Value="True">
                <Setter TargetName="MulticlassDisabledDesc" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="addClassButton" Property="IsEnabled" Value="True"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedMultiClass.Level}" Value="0">
                <Setter TargetName="addClassButton" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="cancelAddClassButton" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding DataContext.ShowUIElementTooltip, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True">
                <Setter TargetName="ToggleTooltips" Property="Tag" Value="{Binding Source='hb33ec471gd611g4ee3gbbffg699af8f79167', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Character Creator Bottom Buttons -->
    <ControlTemplate x:Key="StandardBottomButtonsTemplate2">

        <StackPanel Orientation="Horizontal">

            <!-- Add a new class (multiclass) in LevelUp -->
            <ls:LSButton x:Name="addClassButton" Visibility="Collapsed" Command="{Binding DataContext.SelectFirstUnusedClass, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAddClass, Converter={StaticResource FindInputEventConverter}}" BoundEvent="UIAddClass" Tag="{Binding Source=hcbc3c9a8g9e80g4139g952bga971015c1f41,Converter={StaticResource TranslatedStringConverter}}"/>

            <ls:LSButton x:Name="cancelAddClassButton" Visibility="Collapsed" Command="{Binding DataContext.SelectFirstUsedClass, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAddClass, Converter={StaticResource FindInputEventConverter}}" BoundEvent="UIAddClass" Tag="{Binding Source=hd8d647a9ga19bg47c6g9c46gc4b12ac464c8,Converter={StaticResource TranslatedStringConverter}}"/>

            <ls:LSButton x:Name="gotoAppearanceButton"
                Visibility="Collapsed"
                ContentTemplate="{StaticResource ControllerButtonHint}" 
                Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UICreate, Converter={StaticResource FindInputEventConverter}}" 
                BoundEvent="UICreate" 
                Tag="{Binding Source=h4d42df61g362eg4b5cg9ffcgd381a84c2930,Converter={StaticResource TranslatedStringConverter}}" >
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Click">
                        <b:ChangePropertyAction TargetName="tabBar" PropertyName="Tag" Value="{Binding Tag, ElementName=gameplayTabs}" />
                        <b:ChangePropertyAction TargetName="appearanceTab" PropertyName="IsSelected" Value="True" />
                        <b:InvokeCommandAction Command="{Binding SetupGameplayTabNavigation}" CommandParameter="{Binding ElementName=gameplayTabs}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ls:LSButton>

            <ls:LSButton x:Name="showSummary" Visibility="{Binding ElementName=summary, Path=Visibility, Converter={StaticResource InvertVisibilityConverter}}" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UISort, Converter={StaticResource FindInputEventConverter}}" BoundEvent="UISort" Tag="{Binding Source=h890f4cddg2bdcg4bb2gb73eg43fe16b11b08,Converter={StaticResource TranslatedStringConverter}}" TapTime="{StaticResource DefaultButtonTapTime}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Click">
                        <b:ChangePropertyAction TargetName="summary" PropertyName="Tag" Value="ShowIfPossible" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ls:LSButton>
            <ls:LSButton x:Name="hideSummary" Visibility="{Binding ElementName=summary, Path=Visibility}" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UISort, Converter={StaticResource FindInputEventConverter}}" BoundEvent="UISort" Tag="{Binding Source=h70ec62ddg0cfcg4512ga0c6gbc591945b75b,Converter={StaticResource TranslatedStringConverter}}" TapTime="{StaticResource DefaultButtonTapTime}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Click">
                        <b:ChangePropertyAction TargetName="summary" PropertyName="Tag" Value="HideIfPossible" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ls:LSButton>

            <!-- Toggle tooltips -->
            <ls:LSButton x:Name="ToggleTooltips"
                                 Command="{Binding ToggleTooltipOnUIElement}"
                                 CommandParameter="{Binding FocusedElement, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}"
                                 BoundEvent="UIShowInfo"
                                 ContentTemplate="{StaticResource ControllerButtonHint}"
                                 Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIShowInfo, Converter={StaticResource FindInputEventConverter}}"
                                 Tag="{Binding Source='hf8dd4c2fg97e0g4ccdgac1ag3cd1fe5060ef', Converter={StaticResource TranslatedStringConverter}}" TapTime="{StaticResource DefaultButtonTapTime}"/>

        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ElementName=tabBar, Path=Tag}" Value="CanJumpToAppearance">
                <Setter TargetName="gotoAppearanceButton" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="appearance">
                <Setter TargetName="showSummary" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="hideSummary" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="gotoAppearanceButton" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="daisy">
                <Setter TargetName="showSummary" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="hideSummary" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=gameplayTabs, Path=Tag}" Value="levelup"/>
                    <Condition Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="levelup"/>
                    <Condition Binding="{Binding IsMulticlassEnabled}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="addClassButton" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding SelectedMultiClass.Level}" Value="0">
                <Setter TargetName="addClassButton" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="cancelAddClassButton" Property="Visibility" Value="Visible"/>
            </DataTrigger>

			<!-- MOD START - Edit appearance for Origin characters -->
			<!--<DataTrigger Binding="{Binding SelectedOrigin.IsLockedAppearance}" Value="True">
				<Setter TargetName="gotoAppearanceButton" Property="Visibility" Value="Collapsed"/>
			</DataTrigger>-->
			<!-- MOD END -->

            <DataTrigger Binding="{Binding DataContext.ShowUIElementTooltip, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True">
                <Setter TargetName="ToggleTooltips" Property="Tag" Value="{Binding Source='hb33ec471gd611g4ee3gbbffg699af8f79167', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="CharacterChangeAppearance">
                <Setter TargetName="showSummary" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="hideSummary" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="Henchmen">
                <Setter TargetName="showSummary" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="hideSummary" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>            

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SummaryBottomButtonsTemplate">
        <StackPanel Orientation="Horizontal">
            <!-- Toggle tooltips -->
            <ls:LSButton x:Name="ToggleTooltips"
                         ContentTemplate="{StaticResource ControllerButtonHint}"
                         Tag="{Binding Source='hf8dd4c2fg97e0g4ccdgac1ag3cd1fe5060ef', Converter={StaticResource TranslatedStringConverter}}" TapTime="{StaticResource DefaultButtonTapTime}"
                         Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIShowInfo, Converter={StaticResource FindInputEventConverter}}"
                         Command="{Binding ToggleTooltipOnUIElement}"
                         CommandParameter="{Binding FocusedElement, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}"
                         BoundEvent="UIShowInfo"/>

            <ls:LSButton x:Name="backButton" 
                         ContentTemplate="{StaticResource ControllerButtonHint}" 
                         Tag="{Binding Source=h77fec760g866dg4e47g8e81g467c9c05e447,Converter={StaticResource TranslatedStringConverter}}"
                         Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UICancel, Converter={StaticResource FindInputEventConverter}}" 
                         CommandParameter="{Binding ElementName=gameplayTabs}"/>
        </StackPanel>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.ShowUIElementTooltip, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True">
                <Setter TargetName="ToggleTooltips" Property="Tag" Value="{Binding Source='hb33ec471gd611g4ee3gbbffg699af8f79167', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="featDetailsPanel">
        <DockPanel DataContext="{Binding SelectedFeatDetails}" >
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:SetMoveFocusAction TargetName="CharacterLevelUp_c"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <StackPanel DockPanel.Dock="Top">

                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hc29c98d2gdcdfg4dfag88d1g5eef11e74344', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>

                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Name}" Style="{StaticResource PanelHeaderText}"/>

                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Description.Text}" Style="{StaticResource PanelDescriptionText}" Margin="0,20,0,0"/>

            </StackPanel>

            <ScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}">
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                    <!-- Boosts and Abilities -->
                    <ItemsControl ItemsSource="{Binding FeatDetails.Progressions}" Margin="0,50,0,0">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="ls:VMProgression">
                                <StackPanel>
                                    <ItemsControl ItemsSource="{Binding Features.Boosts}" ItemTemplate="{StaticResource progressionFeatureBoost}"/>

                                    <ItemsControl ItemsSource="{Binding Features.Abilities}" ItemTemplate="{StaticResource progressionFeatureAbility}"/>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <!-- Ability Selectors -->
                    <StackPanel x:Name="abilitySelection" Visibility="{Binding FeatDetails.AbilitySelection.Count, Converter={StaticResource CountToVisibilityConverter}}">

                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,50,0,0">
                            <TextBlock x:Name="AbilitySelectionTitle" ls:TextBlockFormatter.SourceText="{Binding Source='h72161eb0g8981g45cfgba63ga76e152e1fe9', Converter={StaticResource TranslatedStringConverter}}" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource CCTextNormal}"/>
                            <TextBlock x:Name="AbilitySelectionValue" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource CCTextPrimary}" Margin="20,0,0,0">
                                <Run Text="{Binding FeatDetails.SelectedAbilityCount}"/><Run Text="{Binding FeatDetails.MaxSelectedAbilityCount, StringFormat='/{0}'}"/>
                            </TextBlock>
                        </StackPanel>

                        <ItemsControl ItemsSource="{Binding FeatDetails.AbilitySelection}" ItemTemplate="{StaticResource changeAbilityTemplate}">
                            <ItemsControl.Resources>
                                <ControlTemplate x:Key="buttonsAndValue">
                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="400,0,0,0">
                                        <ls:LSButton x:Name="leftBtn" BoundEvent="UILeft" IsEnabled="{Binding Improvement, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Command="{Binding DataContext.DeselectAbility, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" Style="{StaticResource IconCarouselButtonStyle}" VerticalAlignment="Center" SoundID="UI_HUD_CC_DecreaseAbility">
                                            <ls:LSButton.RenderTransform>
                                                <ScaleTransform ScaleX="-1" CenterX="32"/>
                                            </ls:LSButton.RenderTransform>
                                        </ls:LSButton>

                                        <TextBlock x:Name="value" ls:TextBlockFormatter.SourceText="{Binding Value}" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="LightGreen" TextAlignment="Center" MinWidth="80" HorizontalAlignment="Center" VerticalAlignment="Center"/>

                                        <ls:LSButton x:Name="rightBtn" BoundEvent="UIRight" Command="{Binding DataContext.SelectAbility, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" Style="{StaticResource IconCarouselButtonStyle}" VerticalAlignment="Center" SoundID="UI_HUD_CC_IncreaseAbility"/>
                                    </StackPanel>
                                    <ControlTemplate.Triggers>

                                        <DataTrigger Binding="{Binding Improvement}" Value="0">
                                            <Setter TargetName="value" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
                                        </DataTrigger>

                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Value="True">
                                                    <Condition.Binding>
                                                        <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                                                            <Binding Path="Improvement"/>
                                                            <Binding Path="DataContext.FeatDetails.MaxSelectedAbilityCount" ElementName="editFeatPanel"/>
                                                        </MultiBinding>
                                                    </Condition.Binding>
                                                </Condition>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="rightBtn" Property="IsEnabled" Value="False"/>
                                        </MultiDataTrigger>

                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ItemsControl.Resources>
                        </ItemsControl>
                    </StackPanel>

                    <!-- Skills -->
                    <StackPanel x:Name="skillSelection" Visibility="{Binding FeatSkills.Skills.Count, Converter={StaticResource CountToVisibilityConverter}}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,50,0,0">
                            <TextBlock x:Name="SkillSelectionTitle" ls:TextBlockFormatter.SourceText="{Binding Source='h0bddbaf0g8c93g4ddfgbb52ge3c54b72c3c6', Converter={StaticResource TranslatedStringConverter}}" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource CCTextNormal}"/>
                            <TextBlock x:Name="SkillSelectionValue" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource CCTextPrimary}" Margin="20,0,0,0">
                                <Run Text="{Binding FeatSkills.SelectedSkillCount}"/><Run Text="{Binding FeatSkills.MaxSelectedSkillCount, StringFormat='/{0}'}"/>
                            </TextBlock>
                        </StackPanel>

                        <ItemsControl ItemsSource="{Binding FeatSkills.Skills}" ItemTemplate="{StaticResource selectableSkillTemplate}" Margin="0,30,0,0"/>
                    </StackPanel>

                    <!-- Passive Selectors-->
                    <ItemsControl ItemsSource="{Binding FeatPassives}">
                        <ItemsControl.ItemTemplate>

                            <DataTemplate DataType="ls:VMCharacterCreationPassives">
                                <StackPanel>
                                    <TextBlock x:Name="title" Text="{Binding Name}" Style="{StaticResource PanelHeaderText}"/>

                                    <TextBlock x:Name="description" Visibility="{Binding Description.Text, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}" ls:TextBlockFormatter.SourceText="{Binding Description.Text}" Style="{StaticResource PanelDescriptionText}" Margin="0,20,0,0"/>

                                    <TextBlock x:Name="SelectedTitle" Style="{StaticResource PanelSubHeaderText}" Margin="0,50,0,0">
                                        <Run Text="{Binding Source='h390a9286g28cag49ceg93c5gd5b7c1e962da', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Run Text="{Binding SelectedPassiveCount, StringFormat=' {0}'}"/>
                                        <Run x:Name="PassiveSelectorMaxText" Text="{Binding MaxSelectedPassiveCount, StringFormat='/{0}'}"/>
                                    </TextBlock>

                                    <ItemsControl ItemsSource="{Binding Passives}" ItemTemplate="{StaticResource SelectablePassiveTemplate}" Margin="0,40,0,0"/>

                                </StackPanel>

                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding IsComplete}" Value="False">
                                        <Setter TargetName="SelectedTitle" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
                                    </DataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsComplete}" Value="True"/>
                                            <Condition Value="True">
                                                <Condition.Binding>
                                                    <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                                                        <Binding Path="MaxSelectedPassiveCount"/>
                                                        <Binding Path="SelectedPassiveCount"/>
                                                    </MultiBinding>
                                                </Condition.Binding>
                                            </Condition>
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="PassiveSelectorMaxText" Property="Text" Value="{Binding SelectedPassiveCount, StringFormat='/{0}'}"/>
                                    </MultiDataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>

                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <!-- Spell Selectors -->
                    <ItemsControl ItemsSource="{Binding FeatDetails.SpellSelectors}" ItemTemplate="{StaticResource progressionSpellSelectors}" Visibility="{Binding FeatDetails.SpellSelectors.Count, Converter={StaticResource CountToVisibilityConverter}}"/>

                </StackPanel>
            </ScrollViewer>

        </DockPanel>

        <ControlTemplate.Triggers>
            <DataTrigger Value="False">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="SelectedFeatDetails.FeatDetails.SelectedAbilityCount"/>
                        <Binding Path="SelectedFeatDetails.FeatDetails.MaxSelectedAbilityCount"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="AbilitySelectionTitle" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
                <Setter TargetName="AbilitySelectionValue" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>

            <DataTrigger Value="False">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="SelectedFeatDetails.FeatSkills.SelectedSkillCount"/>
                        <Binding Path="SelectedFeatDetails.FeatSkills.MaxSelectedSkillCount"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="SkillSelectionTitle" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
                <Setter TargetName="SkillSelectionValue" Property="Foreground" Value="{StaticResource CCTabToDo}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="featsPanel">
        <Grid>
            <DockPanel x:Name="selectFeatPanel" ls:MoveFocus.IsMoveFocusScope="True">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <ls:SetMoveFocusAction TargetName="CharacterLevelUp_c"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>

                <StackPanel DockPanel.Dock="Top">
                    <TextBlock x:Name="featsTitle" ls:TextBlockFormatter.SourceText="{Binding Source='hb7180a49g729ag4ec3g9f87gaeadb7d4252c', Converter={StaticResource TranslatedStringConverter}, StringFormat='{}{0} (1/1)'}" Style="{StaticResource PanelHeaderText}"/>

                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h3a0e9481ge605g41fbgb7fag21d4a45f0c93', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}" Margin="0,20,0,40"/>
                </StackPanel>
                <ScrollViewer Style="{StaticResource gameplayPanelScrollViewerStyle}">
                    <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                        <ListBox x:Name="featsList" ItemsSource="{Binding SelectableFeats}" SelectedItem="{Binding SelectedFeat}">
                            <ListBox.Template>
                                <ControlTemplate TargetType="ListBox">
                                    <ItemsPresenter/>
                                </ControlTemplate>
                            </ListBox.Template>

                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <VirtualizingStackPanel IsItemsHost="True" Orientation="Vertical"/>
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>

                            <ListBox.ItemTemplate>
                                <DataTemplate DataType="ls:VMSelectableFeat">
                                    <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True">
                                        <ContentControl.ToolTip>
                                            <ls:LSTooltip Content="{Binding DataContext, ElementName=base}">
                                                <ToolTip.ContentTemplate>
                                                    <DataTemplate>

                                                        <StackPanel>

                                                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Description}" Foreground="{StaticResource LS_accent100TxtColor}" FontSize="{StaticResource ScaledDefaultFontSize}" MaxWidth="{StaticResource MaxTooltipContentWidth}" TextWrapping="Wrap" Margin="0,20,0,20"/>

                                                            <StackPanel x:Name="unmetRequirements" Visibility="Collapsed">
                                                                <TextBlock Text="{Binding Source='he7dbfbb3g279cg4872gab74g3b11497fc320', Converter={StaticResource TranslatedStringConverter}}" FontSize="{StaticResource ScaledDefaultFontSize}"/>
                                                                <ItemsControl ItemsSource="{Binding Requirements}">
                                                                    <ItemsControl.ItemTemplate>
                                                                        <DataTemplate>
                                                                            <TextBlock x:Name="req" Text="{Binding Requirement}" TextWrapping="Wrap" FontSize="{StaticResource ScaledDefaultFontSize}"/>
                                                                            <DataTemplate.Triggers>
                                                                                <DataTrigger Binding="{Binding IsMet}" Value="False">
                                                                                    <Setter TargetName="req" Property="Foreground" Value="{DynamicResource LS_alertTxtColor}"/>
                                                                                </DataTrigger>
                                                                            </DataTemplate.Triggers>
                                                                        </DataTemplate>
                                                                    </ItemsControl.ItemTemplate>
                                                                </ItemsControl>
                                                            </StackPanel>
                                                        </StackPanel>
                                                        <DataTemplate.Triggers>
                                                            <DataTrigger Binding="{Binding IsRequirementsMet}" Value="False">
                                                                <Setter TargetName="unmetRequirements" Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                        </DataTemplate.Triggers>
                                                    </DataTemplate>
                                                </ToolTip.ContentTemplate>
                                            </ls:LSTooltip>
                                        </ContentControl.ToolTip>

                                        <Grid>
                                            <Grid Style="{StaticResource FeatureListItemIconHolder}">
                                                <Rectangle x:Name="icon" Width="96" Height="96" Fill="{Binding Icon}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </Grid>

                                            <TextBlock x:Name="text" ls:TextBlockFormatter.SourceText="{Binding Name}" Style="{StaticResource FeatureListItemName}"/>

                                            <Image x:Name="tick" Visibility="Collapsed" Source="{StaticResource IconTick}" Stretch="None" HorizontalAlignment="Right" Margin="0,0,30,0"/>
                                            <Image x:Name="lock" Visibility="Collapsed" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterLevelup/ico_locked.png" Stretch="None" HorizontalAlignment="Right" Margin="0,0,40,0"/>

                                            <ls:LSInputBinding x:Name="selectFeat" BoundEvent="UIAccept" IsEnabled="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}">
                                                <b:Interaction.Triggers>
                                                    <b:EventTrigger EventName="LSInputBindingReleased" >
                                                        <b:ChangePropertyAction TargetName="featsList" PropertyName="SelectedItem" Value="{Binding}" />
                                                        <ls:LSPlaySound Sound="UI_DefaultButton_Click"/>
                                                        <b:InvokeCommandAction Command="{Binding DataContext.SetupGameplayTabNavigation, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding ElementName=gameplayTabs}"/>
                                                    </b:EventTrigger>
                                                </b:Interaction.Triggers>
                                            </ls:LSInputBinding>

                                        </Grid>
                                    </ContentControl>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
                                            <Setter TargetName="tick" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="selectFeat" Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsAlreadyTaken}" Value="True">
                                            <Setter TargetName="selectFeat" Property="IsEnabled" Value="False"/>
                                            <Setter TargetName="tick" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="tick" Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                                            <Setter TargetName="text" Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsRequirementsMet}" Value="False">
                                            <Setter TargetName="selectFeat" Property="IsEnabled" Value="False"/>
                                            <Setter TargetName="lock" Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Icon}" Value="{x:Null}">
                                            <Setter TargetName="icon" Property="Fill" Value="{StaticResource IconFeatDefaultBrush}"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>

                    </StackPanel>
                </ScrollViewer>
            </DockPanel>

        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding SelectedFeat}" Value="{x:Null}">
                <Setter TargetName="featsTitle" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hb7180a49g729ag4ec3g9f87gaeadb7d4252c', Converter={StaticResource TranslatedStringConverter}, StringFormat='{}{0} (0/1)'}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>


    <!-- Appearance Templates -->

    <ControlTemplate x:Key="ChangeRandomCharacterCarouselTemplate">
        <StackPanel>
            <ContentControl Template="{StaticResource ListButtonTemplate}" x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True">
                <Grid>
                    <ls:LSButton x:Name="leftBtn" BoundEvent="UILeft" IsEnabled="{Binding HasPreviousCharacter}" Style="{StaticResource IconCarouselButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="40,0,0,0" Command="{Binding DataContext.RandomCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="prev">
                        <ls:LSButton.RenderTransform>
                            <ScaleTransform ScaleX="-1" CenterX="32"/>
                        </ls:LSButton.RenderTransform>
                    </ls:LSButton>
                    <ls:LSButton x:Name="rightBtn" BoundEvent="UIRight" IsEnabled="{Binding HasNextCharacter}" Style="{StaticResource IconCarouselButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,40,0" Command="{Binding DataContext.RandomCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="next"/>

                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h1595c068g30a1g4efegbd7fg072665991b3b', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource IconCarouselText}"/>
                </Grid>
            </ContentControl>

            <ls:LSButton x:Name="RandomiseCharacterButton" 
                                 Command="{Binding DataContext.RandomCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                                 CommandParameter="new"
                                 ContentTemplate="{StaticResource ControllerButtonHint}"
                                 Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAccept, Converter={StaticResource FindInputEventConverter}}"
                                 Tag="{Binding Source=h726d54dcg32b8g4d47g95cega8ff28505e85, Converter={StaticResource TranslatedStringConverter}}"
                                 BoundEvent="UIAccept"
                                 Margin="0,32,0,0"
                                 Visibility="{Binding ElementName=base, Path=(ls:MoveFocus.IsFocused), Converter={StaticResource BoolToVisibleConverter}}"/>
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="setAppearanceCamera">
        <Canvas>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <b:InvokeCommandAction Command="{Binding SetCameraMode}" CommandParameter="CloseupB"/>
                    <b:InvokeCommandAction Command="{Binding Path=SetCameraOffsets}">
                        <b:InvokeCommandAction.CommandParameter>
                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                <Binding>
                                    <Binding.Source>
                                        <System:Single>1.3</System:Single>
                                    </Binding.Source>
                                </Binding>
                                <Binding>
                                    <Binding.Source>
                                        <System:Single>1.3</System:Single>
                                    </Binding.Source>
                                </Binding>
                                <Binding>
                                    <Binding.Source>
                                        <System:Single>2.7</System:Single>
                                    </Binding.Source>
                                </Binding>
                            </MultiBinding>
                        </b:InvokeCommandAction.CommandParameter>
                    </b:InvokeCommandAction>
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </Canvas>
    </ControlTemplate>

    <ControlTemplate x:Key="setAppearanceCamera_Splitscreen">
        <Canvas>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <b:InvokeCommandAction Command="{Binding SetCameraMode}" CommandParameter="CloseupB"/>
                    <b:InvokeCommandAction Command="{Binding Path=SetCameraOffsets}">
                        <b:InvokeCommandAction.CommandParameter>
                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                <Binding>
                                    <Binding.Source>
                                        <System:Single>1.3</System:Single>
                                    </Binding.Source>
                                </Binding>
                                <Binding>
                                    <Binding.Source>
                                        <System:Single>1.3</System:Single>
                                    </Binding.Source>
                                </Binding>
                                <Binding>
                                    <Binding.Source>
                                        <System:Single>1.3</System:Single>
                                    </Binding.Source>
                                </Binding>
                            </MultiBinding>
                        </b:InvokeCommandAction.CommandParameter>
                    </b:InvokeCommandAction>
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </Canvas>
    </ControlTemplate>

    <ControlTemplate x:Key="AppearanceCarousel" TargetType="ListBox" >
        <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource AppearanceListButtonTemplate}" HorizontalAlignment="Center" >
            <Grid>
                <Grid.Resources>
                    <BitmapImage x:Key="GridIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/box_ico_actions.png"/>
                </Grid.Resources>

                <StackPanel x:Name="ExpandGridInput" Visibility="{Binding Tag, ElementName=base, Converter={StaticResource NullToCollapsedConverter}}" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" Opacity="0" Margin="0,-4,-4,0">
                    <Image x:Name="box" Source="{StaticResource GridIcon}" Height="64" Width="64" VerticalAlignment="Center" Margin="0,2,-24,0"/>
                    <Control x:Name="img" DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}" Template="{StaticResource ControllerButton.ImageSwitcher}" Width="80" Height="80"/>
                </StackPanel>

                <ls:LSRepeatButton x:Name="leftBtn" BoundEvent="UILeft" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="{StaticResource LeftCarouselMargin}" Command="{Binding DataContext.PrevItem, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                    <ls:LSRepeatButton.RenderTransform>
                        <ScaleTransform ScaleX="-1" CenterX="32"/>
                    </ls:LSRepeatButton.RenderTransform>
                </ls:LSRepeatButton>

                <ls:LSRepeatButton x:Name="rightBtn" BoundEvent="UIRight" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="{StaticResource RightCarouselMargin}" Command="{Binding DataContext.NextItem, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" SoundID="{DynamicResource CarouselButtonSoundEvent}"/>

                <StackPanel VerticalAlignment="Center" >
                    <TextBlock x:Name="title" Text="{TemplateBinding Tag}" Style="{StaticResource AppearanceCarouselTitleText}" />
                    <Grid x:Name="SliderBase" HorizontalAlignment="Center" Width="520" Height="46" Margin="0,-10,0,-10" Opacity="{DynamicResource DisabledOpacity}">
                        <Rectangle x:Name="sliderBG" Opacity="0.6" Fill="{StaticResource LS_accent100TxtColor}" Height="8" HorizontalAlignment="Stretch" VerticalAlignment="Center" Width="Auto" Margin="16,0,16,0" />
                        <Rectangle x:Name="sliderSide1" Opacity="0.6" VerticalAlignment="Center" HorizontalAlignment="Left" Fill="{StaticResource options.SliderEnds}" Height="42" Width="8" />
                        <Rectangle x:Name="sliderSide2" Opacity="0.6" VerticalAlignment="Center" HorizontalAlignment="Right" Fill="{StaticResource options.SliderEnds}" Height="42" Width="8" />
                        <Border Width="488">
                            <ItemsPresenter x:Name="AppearanceCarouselSlider" Width="488" Height="12" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,0,0,0"  />
                        </Border>
                    </Grid>

                    <StackPanel x:Name="CarouselSelectedLabel" Orientation="Horizontal" HorizontalAlignment="Center">
                        <TextBlock x:Name="selectionName" Text="{Binding SelectedItem.Name, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Style="{StaticResource AppearanceCarouselValueText}" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"  MaxWidth="400"/>

                        <Ellipse x:Name="colourSwatch" Visibility="Collapsed" Fill="{Binding SelectedItem.Colour, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Width="46" Height="46" Margin="20,0,0,0"/>

                        <StackPanel x:Name="materialColor" Visibility="Collapsed" Orientation="Horizontal">
                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding SelectedItem.ColorName, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Converter={StaticResource TranslatedStringConverter}, ConverterParameter='LocaKey', StringFormat=' ~ {0}'}" Style="{StaticResource AppearanceCarouselValueText}"/>
                            <Ellipse Fill="{Binding SelectedItem.Color, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Width="60" Height="60" Margin="20,0,0,0"/>
                        </StackPanel>
                    </StackPanel>
                </StackPanel>

            </Grid>
        </ContentControl>
        <ControlTemplate.Triggers>

            <DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                <Setter TargetName="ExpandGridInput" Property="Opacity" Value="1"/>
                <Setter TargetName="SliderBase" Property="Opacity" Value="1"/>
            </DataTrigger>

            <Trigger Property="Tag" Value="daisyrace">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='hadf27237ge191g4922ga84cg055b984c9b1f', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <Setter Property="Visibility" TargetName="sliderBG" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Tag" Value="daisysubrace">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h08c34beeg3883g49b0gb9ffg79cad05797e9', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <Setter Property="Visibility" TargetName="sliderBG" Value="Collapsed" />
                <Setter TargetName="AppearanceCarouselSlider" Property="Margin" Value="0,0,0,0" />
                <Setter Property="Visibility" TargetName="sliderSide2" Value="Collapsed" />
                <Setter Property="Visibility" TargetName="sliderSide1" Value="Collapsed" />
            </Trigger>

            <Trigger Property="Tag" Value="heads">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h3eee9b8dgc315g4cb8g90a3g50cea8a27c69', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <Setter TargetName="CarouselSelectedLabel" Property="Visibility" Value="Collapsed"/>
                <Setter Property="Visibility" TargetName="sliderBG" Value="Collapsed" />
                <Setter Property="Margin" TargetName="SliderBase" Value="0,6,0,10" />
            </Trigger>
            <Trigger Property="Tag" Value="topofhead">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h971421cfgc048g476fgbbe1g91a91e796a78', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <Setter Property="Visibility" TargetName="sliderBG" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Tag" Value="chin">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h0346a0efg6393g4ce1gbc5cgbcc420046d79', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <Setter Property="Visibility" TargetName="sliderBG" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Tag" Value="jaw">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='hcea5dbbdg1d7dg4c82g8c93g2546cb585e7f', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <Setter Property="Visibility" TargetName="sliderBG" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Tag" Value="tail">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='hbb75a111g99e6g45afga2a6gaf73b748faa8', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <Setter Property="Visibility" TargetName="sliderBG" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Tag" Value="skinColors">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='hc81ba7bcgb2ccg4423ga050g253fd53ce2c9', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="colourSwatch" Property="Visibility" Value="Visible"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>

            <Trigger Property="Tag" Value="eyeColors">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h1203122ag1146g4759ga531g57ccd5ef36da', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="colourSwatch" Property="Visibility" Value="Visible"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="eyeColors"/>
                    <Condition Binding="{Binding HeterochromiaEnabled}" Value="true"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="title" Property="Text" Value="{Binding Source='hc6bfd120gde63g4c3ag99eag43e8f905a7d4', Converter={StaticResource TranslatedStringConverter}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <Trigger Property="Tag" Value="heterochromiaEyeColors">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h7d84f886g75e1g46begb5adg922b4238c617', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="colourSwatch" Property="Visibility" Value="Visible"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>
            
            <Trigger Property="Tag" Value="tattoos">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h3f96b6b8gd682g4b90ga8fdge34ccb965bbd', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>
            
            <Trigger Property="Tag" Value="tattooColors">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h0c6d2890g6a16g4e20ga2a1gcb15afa6e8d3', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="colourSwatch" Property="Visibility" Value="Visible"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>
            
            <Trigger Property="Tag" Value="makeup">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='hbd793d8fg4b19g4efdga071g112ba7af47dd', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>
            
            <Trigger Property="Tag" Value="makeupColors">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='hd98545bbg8f42g437dg8f70gcb5f7a1bda8b', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="colourSwatch" Property="Visibility" Value="Visible"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>
            
            <Trigger Property="Tag" Value="lipMakeupColors">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='ha96c9b3bg5d8dg4ebbgb7a8gbefe66c7b781', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="colourSwatch" Property="Visibility" Value="Visible"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>

            <Trigger  Property="Tag" Value="scars">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h408d8f2bgca7eg4d20gb0bag4d4a3318f1c5', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <Setter Property="Visibility" TargetName="sliderBG" Value="Collapsed" />
            </Trigger>

            <Trigger Property="Tag" Value="hair">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='haaecd709ga04eg4c33gb2a3gd5be989e5146', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>
            
            <Trigger Property="Tag" Value="hairColors">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h6ed36c54g1a3dg4c46g9987gd5882613ae05', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="colourSwatch" Property="Visibility" Value="Visible"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>
            
            <Trigger Property="Tag" Value="hairHighlights">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h9d4a4e08g81cdg4259g8bd1g80b47dbda3f3', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="colourSwatch" Property="Visibility" Value="Visible"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>
            
            <Trigger Property="Tag" Value="hairGrays">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='hb85e6761gd73bg4fc1g8ff3g4081ff97694a', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="colourSwatch" Property="Visibility" Value="Visible"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>

            <Trigger Property="Tag" Value="beards">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h5060d1edg2799g4388g9203gc42e380c68f8', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>
            
            <Trigger Property="Tag" Value="horns">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h290f2542g9702g4651g8afdgdae1f08a12eb', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>

            <Trigger Property="Tag" Value="hornColors">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h8f9581e8g4440g4cf5g8752g220535346a50', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="colourSwatch" Property="Visibility" Value="Visible"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>
            
            <Trigger Property="Tag" Value="hornTipColors">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h33ea2bd3g91cag471cg8242gef7327983dbf', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="colourSwatch" Property="Visibility" Value="Visible"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>

            <Trigger Property="Tag" Value="scales">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h381a6c0bg214fg4968gae5cg9e5b8a8ffc20', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <Setter Property="Visibility" TargetName="sliderBG" Value="Collapsed" />
            </Trigger>
            
            <Trigger Property="Tag" Value="scaleColors">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h85555614g40b2g459dgbfbfg76291036aebe', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="colourSwatch" Property="Visibility" Value="Visible"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>

            <Trigger Property="Tag" Value="draconicLines">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h861a433dgcc20g452bg9b1agde89d14c85c9', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>
            
            <Trigger Property="Tag" Value="draconicLineColors">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h7202f8ebgaa5dg411dgac62g3bf8986e28b3', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="colourSwatch" Property="Visibility" Value="Visible"/>
                <Setter TargetName="base" Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </Trigger>

            <!-- No Tag set on base means no sub panel that can be opened -->
            <Trigger Property="Tag" Value="piercing">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h5458d095gcdb9g414bgacfdgdbd144fc2bd0', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>

            <Trigger Property="Tag" Value="genitals">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h72410e08g770dg48c8g98e8g5a5a933a2254', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter Property="Visibility" TargetName="sliderBG" Value="Collapsed" />
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AppearanceSliderCarousel" TargetType="ListBox">
        <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource AppearanceListButtonTemplate}" HorizontalAlignment="Center">
            <Grid VerticalAlignment="Center">
                <ls:LSRepeatButton x:Name="leftBtn" BoundEvent="UILeft" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="{StaticResource LeftCarouselMargin}" Command="{Binding DataContext.PrevSliderCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
                    <ls:LSRepeatButton.RenderTransform>
                        <ScaleTransform ScaleX="-1" CenterX="32"/>
                    </ls:LSRepeatButton.RenderTransform>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Click">
                            <b:InvokeCommandAction Command="{Binding DataContext.AppearanceValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSRepeatButton>
                <ls:LSRepeatButton x:Name="rightBtn" BoundEvent="UIRight" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="{StaticResource RightCarouselMargin}" Command="{Binding DataContext.NextSliderCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Click">
                            <b:InvokeCommandAction Command="{Binding DataContext.AppearanceValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSRepeatButton>

                <StackPanel VerticalAlignment="Center">
                    <TextBlock x:Name="title" Text="{Binding Source='hfcbe9131g86b0g46d7ga4afg5c3301c070bf', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}" />
                    <Control x:Name="content" IsEnabled="False" VerticalAlignment="Center" HorizontalAlignment="Center" Focusable="False" Template="{StaticResource SliderTemplate}" Margin="0,8,0,0"/>
                </StackPanel>

            </Grid>
        </ContentControl>
        <ControlTemplate.Triggers>
            <Trigger Property="ls:AttachedProperties.InheritedTag" Value="freckles">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h6a8fb398g7b1ag443egb45eg53c46ebbe9a3', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="ls:AttachedProperties.InheritedTag" Value="frecklesIntensity">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h63c9cb05g65f3g439dgb85bg9eb69a2cc894', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="ls:AttachedProperties.InheritedTag" Value="vitiligo">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h8f8d1cc6g57adg486agbb58gcba376102c37', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="ls:AttachedProperties.InheritedTag" Value="grayIntensity">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='hf9b80a67geb60g426cg82dcg19e1af9bab9b', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="ls:AttachedProperties.InheritedTag" Value="highlightIntensity">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h086c2fd7ge3d3g458egbc81g1986b837cb3f', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="ls:AttachedProperties.InheritedTag" Value="lipColorIntensity">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='hc93c40a6gf955g459bg835eg11152b6f0683', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="ls:AttachedProperties.InheritedTag" Value="glossyIntensity">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='h3f60bd19gd12bg47d9g8f1dg710885f13edc', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>
            <Trigger Property="ls:AttachedProperties.InheritedTag" Value="metallicIntensity">
                <Setter TargetName="title" Property="Text" Value="{Binding Source='hcdc5c4b6g12d8g4e3bga7a5gccbc0b640e14', Converter={StaticResource TranslatedStringConverter}}"/>
            </Trigger>

            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                <Setter TargetName="content" Property="IsEnabled" Value="True"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="appearanceListTemplate">
        <StackPanel x:Name="appearanceListPanel">
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="Unloaded">
                    <b:InvokeCommandAction Command="{Binding DisplayEquipment}" CommandParameter="{StaticResource TrueValue}"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <ListBox x:Name="rename" Visibility="Collapsed">
                <ListBox.Template>
                    <ControlTemplate>
                        <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource AppearanceListButtonTemplate}" HorizontalAlignment="Center">
                            <Grid>
                                <StackPanel VerticalAlignment="Center">
                                    <TextBlock x:Name="text" ls:TextBlockFormatter.SourceText="{Binding Source='h5cd3cabag657ag4abfga33fg9b1b2808ee7f', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>

                                    <Grid HorizontalAlignment="Center">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <Rectangle Grid.Column="0" Fill="{StaticResource CCTextSpecial}" Opacity="0.8" Height="90"/>

                                        <ls:LSTextBox Grid.Column="0" x:Name="characterName" Text="{Binding CharacterName}" IsEnabled="{Binding CanEditName}" MaxLength="20" TextImmediateSourceUpdate="True"
                                                      Foreground="{StaticResource CCTextPrimary}" FontSize="{StaticResource ScaledDefaultFontSize}" TextAlignment="Center" HorizontalContentAlignment="Center" VerticalAlignment="Center" ProfanityFilter="True"
                                                      Margin="16,0"/>
                                    </Grid>

                                </StackPanel>

                                <ls:LSButton x:Name="focusNaming" IsEnabled="{Binding CanEditName}" Visibility="Collapsed" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAccept, Converter={StaticResource FindInputEventConverter}}" HorizontalAlignment="Right" VerticalAlignment="Top">
                                    <ls:LSButton.ContentTemplate>
                                        <DataTemplate DataType="ls:VMInputEvent">
                                            <Control x:Name="ImageSwitcher" Template="{StaticResource ControllerButton.ImageSwitcher}" VerticalAlignment="Center" Width="{StaticResource ScaledControllerHintSizeSmall}" Height="{StaticResource ScaledControllerHintSizeSmall}"/>
                                        </DataTemplate>
                                    </ls:LSButton.ContentTemplate>
                                    <b:Interaction.Triggers>
                                        <b:EventTrigger EventName="Click">
                                            <noesis:SetFocusAction TargetName="characterName"/>
                                        </b:EventTrigger>
                                    </b:Interaction.Triggers>
                                </ls:LSButton>
                            </Grid>
                        </ContentControl>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                                <Setter TargetName="focusNaming" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="focusNaming" Property="BoundEvent" Value="UIAccept"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ListBox.Template>
            </ListBox>

            <ls:LSButton x:Name="newRandomAppearance" Visibility="Collapsed" ls:MoveFocus.Focusable="True" Focusable="True" Command="{Binding RandomCharacter}" CommandParameter="new" Margin="0,0,0,12">
                <ls:LSButton.Template>
                    <ControlTemplate>
                        <Grid x:Name="bg" Width="{StaticResource appearancePanelWidth}" Height="90">

                            <Image x:Name="box" Source="{StaticResource ListButtonBg}" Stretch="Fill"/>

                            <TextBlock x:Name="text" ls:TextBlockFormatter.SourceText="{Binding Source='h6b184ec1gc364g4467g9617g3ab1a3959d10', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}" VerticalAlignment="Center"/>

                            <Control x:Name="img" DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}" Template="{StaticResource ControllerButton.ImageSwitcher}" Width="{DynamicResource ScaledControllerHintSizeSmall}" Height="{DynamicResource ScaledControllerHintSize}" HorizontalAlignment="Right" VerticalAlignment="Center" VerticalContentAlignment="Center" Opacity="0.05"/>

                            <Control x:Name="frame" Width="800" Height="126" HorizontalAlignment="Center" VerticalAlignment="Center" />

                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                                <Setter TargetName="box" Property="Source" Value="{StaticResource ListButtonBg_h}"/>
                                <Setter TargetName="frame" Property="Template" Value="{StaticResource FocusedListItemIndicatorTemplate}"/>
                                <Setter TargetName="img" Property="Opacity" Value="1"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                                <Setter TargetName="img" Property="Margin" Value="0,4,0,-4"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ls:LSButton.Template>
            </ls:LSButton>

            <ListBox x:Name="randomAppearancesCarousel" Visibility="Collapsed" Margin="0,0,0,12">
                <ListBox.Template>
                    <ControlTemplate>
                        <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource AppearanceListButtonTemplate}" HorizontalAlignment="Center">
                            <Grid>

                                <ls:LSRepeatButton x:Name="leftBtn" Command="{Binding RandomCharacter}" CommandParameter="prev" BoundEvent="UILeft" IsEnabled="{Binding HasPreviousCharacter}" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="{StaticResource LeftCarouselMargin}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                                    <ls:LSRepeatButton.RenderTransform>
                                        <ScaleTransform ScaleX="-1" CenterX="32"/>
                                    </ls:LSRepeatButton.RenderTransform>
                                </ls:LSRepeatButton>
                                <ls:LSRepeatButton x:Name="rightBtn" Command="{Binding RandomCharacter}" CommandParameter="next" BoundEvent="UIRight" IsEnabled="{Binding HasNextCharacter}" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="{StaticResource RightCarouselMargin}" SoundID="{DynamicResource CarouselButtonSoundEvent}"/>
                                <StackPanel VerticalAlignment="Center">
                                    <TextBlock Text="{Binding Source='h8b63fa05g09d3g445fgb24agcd8718089484', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                                    <TextBlock x:Name="cTxt" Style="{StaticResource AppearanceCarouselValueText}">
                                        <Run x:Name="IndexText" Text="{Binding RandomAppearanceIndex, Converter={StaticResource AddConverter}, ConverterParameter='1'}"/><Run x:Name="CountText" Text="{Binding RandomAppearanceCount, StringFormat=/{0}}"/>
                                    </TextBlock>
                                </StackPanel>

                            </Grid>
                        </ContentControl>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="appearance">
                                <Setter TargetName="leftBtn" Property="Command" Value="{Binding RandomAppearance}"/>
                                <Setter TargetName="rightBtn" Property="Command" Value="{Binding RandomAppearance}"/>
                                <Setter TargetName="leftBtn" Property="IsEnabled" Value="{Binding HasPreviousAppearance}"/>
                                <Setter TargetName="rightBtn" Property="IsEnabled" Value="{Binding HasNextAppearance}"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="CharacterChangeAppearance">
                                <Setter TargetName="leftBtn" Property="Command" Value="{Binding RandomAppearance}"/>
                                <Setter TargetName="rightBtn" Property="Command" Value="{Binding RandomAppearance}"/>
                                <Setter TargetName="leftBtn" Property="IsEnabled" Value="{Binding HasPreviousAppearance}"/>
                                <Setter TargetName="rightBtn" Property="IsEnabled" Value="{Binding HasNextAppearance}"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding CharacterCreationStep}" Value="Companion">
                                <Setter TargetName="IndexText" Property="Text" Value="{Binding RandomCharacterIndex, Converter={StaticResource AddConverter}, ConverterParameter='1'}"/>
                                <Setter TargetName="CountText" Property="Text" Value="{Binding RandomCharacterCount, StringFormat=/{0}}"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ListBox.Template>
            </ListBox>

            <!-- GENERAL -->
                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h3003476bg9facg4159g87e1gd9f70aee88eb', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceSubHeaderText}"/>
            <ListBox x:Name="daisyRace" Tag="daisyrace" ItemsSource="{Binding SelectableRaces}" SelectedItem="{Binding SelectedRace}" Template="{StaticResource AppearanceCarousel}" Style="{StaticResource paginatedListBoxStyle}" />

            <ListBox x:Name="daisySubRace" Tag="daisysubrace" ItemsSource="{Binding SelectableSubRaces}" SelectedItem="{Binding SelectedSubRace}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding Path=SelectableSubRaces.Count, Converter={StaticResource CountToVisibilityConverter}}" Style="{StaticResource paginatedListBoxStyleFixed}" />

            <StackPanel x:Name="bodyType">
                <b:Interaction.Triggers>
                    <b:DataTrigger Binding="{Binding BodyTypeAndShape}" Value="Female">
                        <b:ChangePropertyAction TargetName="bodyTypeCarousel" PropertyName="SelectedIndex" Value="0"/>
                    </b:DataTrigger>
                    <b:DataTrigger Binding="{Binding BodyTypeAndShape}" Value="Male">
                        <b:ChangePropertyAction TargetName="bodyTypeCarousel" PropertyName="SelectedIndex" Value="1"/>
                    </b:DataTrigger>
                    <b:DataTrigger Binding="{Binding BodyTypeAndShape}" Value="FemaleStrong">
                        <b:ChangePropertyAction TargetName="bodyTypeCarousel" PropertyName="SelectedIndex" Value="2"/>
                    </b:DataTrigger>
                    <b:DataTrigger Binding="{Binding BodyTypeAndShape}" Value="MaleStrong">
                        <b:ChangePropertyAction TargetName="bodyTypeCarousel" PropertyName="SelectedIndex" Value="3"/>
                    </b:DataTrigger>
                    <b:DataTrigger Binding="{Binding DataContext.SelectedRace.HasAdditionalBodyShapes, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False">
                        <b:ChangePropertyAction TargetName="femaleStrong" PropertyName="Visibility" Value="Collapsed"/>
                        <b:ChangePropertyAction TargetName="maleStrong" PropertyName="Visibility" Value="Collapsed"/>
                    </b:DataTrigger>
                </b:Interaction.Triggers>

                <ListBox x:Name="bodyTypeCarousel" Visibility="{Binding SelectedOrigin.IsLockedBody, Converter={StaticResource BoolToCollapsedConverter}}" Style="{StaticResource paginatedListBoxStyleFixed}">

                    <ListBox.Template>
                        <ControlTemplate>
                            <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource AppearanceListButtonTemplate}" HorizontalAlignment="Center">
                                <Grid>
                                    <ls:LSRepeatButton x:Name="leftBtn" BoundEvent="UILeft" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="{StaticResource LeftCarouselMargin}"
                                        Command="{Binding DataContext.SelectPreviousBodyType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                                        <ls:LSRepeatButton.RenderTransform>
                                            <ScaleTransform ScaleX="-1" CenterX="32"/>
                                        </ls:LSRepeatButton.RenderTransform>
                                    </ls:LSRepeatButton>
                                    <ls:LSRepeatButton x:Name="rightBtn" BoundEvent="UIRight" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="{StaticResource RightCarouselMargin}"
                                        Command="{Binding DataContext.SelectNextBodyType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" SoundID="{DynamicResource CarouselButtonSoundEvent}"/>

                                    <StackPanel VerticalAlignment="Center">
                                        <TextBlock Text="{Binding Source='hc4f5c05bgc2feg4333ga08fg229b33c42437', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                                        <Grid x:Name="SliderBase" HorizontalAlignment="Center" Width="520" Height="46" Opacity="{StaticResource DisabledOpacity}">
                                            <ItemsPresenter x:Name="AppearanceCarouselSlider" Width="408" Height="12" HorizontalAlignment="Center"  />
                                        </Grid>
                                    </StackPanel>

                                </Grid>
                            </ContentControl>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                                    <Setter TargetName="SliderBase" Property="Opacity" Value="1" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </ListBox.Template>

                    <ListBox.Items>
                        <ListBoxItem x:Name="female" Content="1"/>
                        <ListBoxItem x:Name="male" Content="2"/>
                        <ListBoxItem x:Name="femaleStrong" Content="3"/>
                        <ListBoxItem x:Name="maleStrong" Content="4"/>

                    </ListBox.Items>
                </ListBox>
            </StackPanel>

            <StackPanel Visibility="{Binding CanEditIdentity, Converter={StaticResource BoolToVisibleConverter}}">
                <b:Interaction.Triggers>
                    <b:DataTrigger Binding="{Binding SelectedIdentity}" Value="Male">
                        <b:ChangePropertyAction TargetName="identityCarousel" PropertyName="SelectedIndex" Value="0"/>
                    </b:DataTrigger>
                    <b:DataTrigger Binding="{Binding SelectedIdentity}" Value="Female">
                        <b:ChangePropertyAction TargetName="identityCarousel" PropertyName="SelectedIndex" Value="1"/>
                    </b:DataTrigger>
                    <b:DataTrigger Binding="{Binding SelectedIdentity}" Value="Neutral">
                        <b:ChangePropertyAction TargetName="identityCarousel" PropertyName="SelectedIndex" Value="2"/>
                    </b:DataTrigger>
                </b:Interaction.Triggers>

                <ListBox x:Name="identityCarousel" Style="{StaticResource paginatedListBoxStyleFixed}">
                    <ListBox.Template>
                        <ControlTemplate>
                            <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource AppearanceListButtonTemplate}" HorizontalAlignment="Center">
                                <Grid>
                                    <ls:LSRepeatButton x:Name="leftBtn" BoundEvent="UILeft" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="{StaticResource LeftCarouselMargin}" Command="{Binding DataContext.SelectPreviousIdentity, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" SoundID="UI_HUD_CC_Gender">
                                        <ls:LSRepeatButton.RenderTransform>
                                            <ScaleTransform ScaleX="-1" CenterX="32"/>
                                        </ls:LSRepeatButton.RenderTransform>
                                    </ls:LSRepeatButton>
                                    <ls:LSRepeatButton x:Name="rightBtn" BoundEvent="UIRight" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="{StaticResource RightCarouselMargin}" Command="{Binding DataContext.SelectNextIdentity, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" SoundID="UI_HUD_CC_Gender"/>

                                    <StackPanel VerticalAlignment="Center">
                                        <TextBlock Text="{Binding Source='hcc23cfaagbc1eg4bb0gafb9g9f720497b786', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}" />
                                        <Grid x:Name="SliderBase" HorizontalAlignment="Center" Width="520" Height="46" Opacity="{StaticResource DisabledOpacity}" Margin="0,-10,0,-10">
                                            <Viewbox StretchDirection="Both" Width="408">
                                                <ItemsPresenter x:Name="AppearanceCarouselSlider" Width="408" Height="12" HorizontalAlignment="Center"  />
                                            </Viewbox>
                                        </Grid>
                                        <TextBlock x:Name="cTxt" Style="{StaticResource AppearanceCarouselValueText}" Text="{Binding SelectedItem.Content, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" />
                                    </StackPanel>
                                </Grid>
                            </ContentControl>
                            <ControlTemplate.Triggers>

                                <DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                                    <Setter TargetName="SliderBase" Property="Opacity" Value="1" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </ListBox.Template>

                    <ListBoxItem x:Name="m" Content="{Binding Source='hf12d3837gd6fbg448ag813dg9cf6d9a4d412', Converter={StaticResource TranslatedStringConverter}}"/>
                    <ListBoxItem x:Name="f" Content="{Binding Source='h5d60ad1cg41dcg4d9fgaba8gda842c090327', Converter={StaticResource TranslatedStringConverter}}"/>
                    <ListBoxItem x:Name="n" Content="{Binding Source='hea2ce077g2b7ag42dfgb194g928c3dd108a7', Converter={StaticResource TranslatedStringConverter}}"/>
                </ListBox>

            </StackPanel>

            <!-- ToDo: polish, press to hear voice -->
			<!-- MOD START - Always show voices, even for Hirelings/Origins -->
			<ListBox x:Name="voices" ItemsSource="{Binding Voices.ComboItems}" SelectedItem="{Binding Voices.SelectedItem}" Style="{StaticResource paginatedListBoxStyle}">
				<!-- MOD END -->
                <ListBox.Template>
                    <ControlTemplate>
                        <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource AppearanceListButtonTemplate}" HorizontalAlignment="Center">
                            <Grid>
                                <ls:LSRepeatButton x:Name="leftBtn" BoundEvent="UILeft" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="{StaticResource LeftCarouselMargin}" Command="{Binding DataContext.PrevComboItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Voices}">
                                    <ls:LSRepeatButton.RenderTransform>
                                        <ScaleTransform ScaleX="-1" CenterX="32"/>
                                    </ls:LSRepeatButton.RenderTransform>
                                </ls:LSRepeatButton>
                                <ls:LSRepeatButton x:Name="rightBtn" BoundEvent="UIRight" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="{StaticResource RightCarouselMargin}" Command="{Binding DataContext.NextComboItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        CommandParameter="{Binding Voices}"/>

                                <StackPanel VerticalAlignment="Center">
                                    <TextBlock Text="{Binding Source='h81102ec7gef4dg42edg85b5g60d7fb1d13f9', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}" />
                                    <Grid x:Name="SliderBase" HorizontalAlignment="Center" Width="520" Height="46" Opacity="{StaticResource DisabledOpacity}" Margin="0,6,0,10">
                                        <Rectangle x:Name="sliderEnd1" Opacity="0.6" VerticalAlignment="Center" HorizontalAlignment="Left" Fill="{StaticResource options.SliderEnds}" Height="42" Width="8" />
                                        <Rectangle x:Name="sliderEnd2" Opacity="0.6" VerticalAlignment="Center" HorizontalAlignment="Right" Fill="{StaticResource options.SliderEnds}" Height="42" Width="8" />
                                        <Border Width="488">
                                            <ItemsPresenter x:Name="AppearanceCarouselSlider" Width="488" Height="12" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,0,0,0"  />
                                        </Border>
                                    </Grid>
                                </StackPanel>

                            </Grid>
                        </ContentControl>
                        <ControlTemplate.Triggers>

                            <DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                                <Setter TargetName="SliderBase" Property="Opacity" Value="1" />
                            </DataTrigger>

                            <DataTrigger Binding="{Binding CharacterCreationStep}" Value="Companion">
                                <Setter TargetName="sliderEnd1" Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="sliderEnd2" Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="AppearanceCarouselSlider" Property="Margin" Value="0,0,0,0" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ListBox.Template>
            </ListBox>

            <ListBox Tag="heads" ItemsSource="{Binding SelectableHeads}" SelectedItem="{Binding SelectedHead}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding SelectableHeads.Count, Converter={StaticResource CountToVisibilityConverter}}" Style="{StaticResource paginatedListBoxStyle}"/>

            <ListBox Tag="topofhead" ItemsSource="{Binding SelectableTopOfHead}" SelectedItem="{Binding SelectedTopOfHead}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding SelectableTopOfHead.Count, Converter={StaticResource CountToVisibilityConverter}}" Style="{StaticResource paginatedListBoxStyle}"/>

            <ListBox Tag="chin" ItemsSource="{Binding SelectableChin}" SelectedItem="{Binding SelectedChin}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding SelectableChin.Count, Converter={StaticResource CountToVisibilityConverter}}" Style="{StaticResource paginatedListBoxStyle}" />

            <ListBox Tag="jaw" ItemsSource="{Binding SelectableJaw}" SelectedItem="{Binding SelectedJaw}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding SelectableJaw.Count, Converter={StaticResource CountToVisibilityConverter}}" Style="{StaticResource paginatedListBoxStyle}"/>
            
            <ListBox Tag="tail" ItemsSource="{Binding SelectableTail}" SelectedItem="{Binding SelectedTail}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding SelectableTail.Count, Converter={StaticResource CountToVisibilityConverter}}" Style="{StaticResource paginatedListBoxStyle}" />

            <ListBox Tag="skinColors" ItemsSource="{Binding SelectableSkinColours}" SelectedItem="{Binding SelectedSkinColour}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding SelectableSkinColours.Count, Converter={StaticResource CountToVisibilityConverter}}" Style="{StaticResource sliderListBoxStyle}"/>

            <ListBox x:Name="age" Tag="{StaticResource FalseValue}" ls:AttachedProperties.InheritedTag="age" DataContext="{Binding ApperanceScalarAge}" Template="{StaticResource AppearanceSliderCarousel}" Visibility="Collapsed"/>

            <ListBox x:Name="freckles" Tag="{StaticResource FalseValue}" ls:AttachedProperties.InheritedTag="freckles" DataContext="{Binding ApperanceScalarFreckles}" Template="{StaticResource AppearanceSliderCarousel}" Visibility="Collapsed"/>

            <ListBox x:Name="frecklesIntensity" Tag="{StaticResource FalseValue}" ls:AttachedProperties.InheritedTag="frecklesIntensity" DataContext="{Binding ApperanceScalarFrecklesIntensity}" Template="{StaticResource AppearanceSliderCarousel}" Visibility="Collapsed"/>

            <ListBox x:Name="vitiligo" Tag="{StaticResource FalseValue}" ls:AttachedProperties.InheritedTag="vitiligo" DataContext="{Binding ApperanceScalarVitiligo}" Template="{StaticResource AppearanceSliderCarousel}" Visibility="Collapsed" Focusable="True" />

            <StackPanel x:Name="scarChoices" Visibility="{Binding IsDragonborn, Converter={StaticResource BoolToCollapsedConverter}}">
                <ListBox Tag="scars" ItemsSource="{Binding SelectableScars}" SelectedItem="{Binding SelectedScar}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding SelectableScars.Count, Converter={StaticResource CountToVisibilityConverter}}" Style="{StaticResource paginatedListBoxStyle}"/>
            </StackPanel>

            <ListBox x:Name="genitalsCarousel" Tag="genitals" Visibility="Collapsed" ItemsSource="{Binding SelectableGenitals}" SelectedItem="{Binding SelectedGenitals}" Template="{StaticResource AppearanceCarousel}" Style="{StaticResource paginatedListBoxStyle}"/>

            <ListBox x:Name="hideClothes" Visibility="Collapsed">
                <ListBox.Template>
                    <ControlTemplate>
                        <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource AppearanceListButtonTemplate}" HorizontalAlignment="Center">

                            <Grid x:Name="displayGenitalsToggle" Tag="{StaticResource FalseValue}">

                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <b:InvokeCommandAction Command="{Binding DisplayEquipment}" CommandParameter="{Binding Tag, ElementName=displayGenitalsToggle, Converter={StaticResource InvertBoolConverter}}"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <ls:LSRepeatButton x:Name="leftBtn" BoundEvent="UILeft" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="{StaticResource LeftCarouselMargin}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                                    <ls:LSRepeatButton.RenderTransform>
                                        <ScaleTransform ScaleX="-1" CenterX="32"/>
                                    </ls:LSRepeatButton.RenderTransform>
                                    <b:Interaction.Triggers>
                                        <b:EventTrigger EventName="Click" >
                                            <b:ChangePropertyAction TargetName="displayGenitalsToggle" PropertyName="Tag" Value="{Binding Tag, ElementName=displayGenitalsToggle, Converter={StaticResource InvertBoolConverter}}"/>
                                            <b:InvokeCommandAction Command="{Binding DisplayEquipment}" CommandParameter="{Binding Tag, ElementName=displayGenitalsToggle, Converter={StaticResource InvertBoolConverter}}"/>
                                        </b:EventTrigger>
                                        <b:EventTrigger EventName="Click" >
                                            <b:Interaction.Behaviors>
                                                <b:ConditionBehavior>
                                                    <b:ConditionalExpression>
                                                        <b:ComparisonCondition LeftOperand="{Binding Tag, ElementName=displayGenitalsToggle}" Operator="Equal" RightOperand="{StaticResource TrueValue}"/>
                                                    </b:ConditionalExpression>
                                                </b:ConditionBehavior>
                                            </b:Interaction.Behaviors>
                                            <b:InvokeCommandAction Command="{Binding SetCameraMode}" CommandParameter="Overview"/>
                                        </b:EventTrigger>
                                    </b:Interaction.Triggers>
                                </ls:LSRepeatButton>
                                <ls:LSRepeatButton x:Name="rightBtn" BoundEvent="UIRight" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="{StaticResource RightCarouselMargin}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                                    <b:Interaction.Triggers>
                                        <b:EventTrigger EventName="Click" >
                                            <b:ChangePropertyAction TargetName="displayGenitalsToggle" PropertyName="Tag" Value="{Binding Tag, ElementName=displayGenitalsToggle, Converter={StaticResource InvertBoolConverter}}"/>
                                            <b:InvokeCommandAction Command="{Binding DisplayEquipment}" CommandParameter="{Binding Tag, ElementName=displayGenitalsToggle, Converter={StaticResource InvertBoolConverter}}"/>
                                        </b:EventTrigger>
                                        <b:EventTrigger EventName="Click" >
                                            <b:Interaction.Behaviors>
                                                <b:ConditionBehavior>
                                                    <b:ConditionalExpression>
                                                        <b:ComparisonCondition LeftOperand="{Binding Tag, ElementName=displayGenitalsToggle}" Operator="Equal" RightOperand="{StaticResource TrueValue}"/>
                                                    </b:ConditionalExpression>
                                                </b:ConditionBehavior>
                                            </b:Interaction.Behaviors>
                                            <b:InvokeCommandAction Command="{Binding SetCameraMode}" CommandParameter="Overview"/>
                                        </b:EventTrigger>
                                    </b:Interaction.Triggers>
                                </ls:LSRepeatButton>

                                <StackPanel VerticalAlignment="Center">
                                    <TextBlock Text="{Binding Source='h5d70015agdbd9g45c9g9270g7ee6876b5b9a', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>

                                    <TextBlock x:Name="displayGenitalsValueText" Style="{StaticResource AppearanceCarouselValueText}"/>
                                </StackPanel>

                            </Grid>
                        </ContentControl>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Tag, ElementName=displayGenitalsToggle}" Value="True">
                                <Setter TargetName="displayGenitalsValueText" Property="Text" Value="{Binding Source='h585635bdg10feg4babg9bb8gc3df3bf73ba6', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Tag, ElementName=displayGenitalsToggle}" Value="False">
                                <Setter TargetName="displayGenitalsValueText" Property="Text" Value="{Binding Source='habf08f50g2d6bg4950g8cfeg3980512d8051', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ListBox.Template>
            </ListBox>

            <!-- EYES -->
            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h9b52cf91g3b11g428ag9d17g3a724339b3cd', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceSubHeaderText}"/>

            <ListBox Tag="eyeColors" ItemsSource="{Binding SelectableEyeColours}" SelectedItem="{Binding SelectedEyeColour}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding SelectableEyeColours.Count, Converter={StaticResource CountToVisibilityConverter}}" Style="{StaticResource sliderListBoxStyle}"/>

            <ListBox Tag="heterochromiaEyeColors" ItemsSource="{Binding SelectableEyeColours}" SelectedItem="{Binding SelectedHeterochromiaEyeColour}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding HeterochromiaEnabled, Converter={StaticResource BoolToVisibleConverter}}" Style="{StaticResource sliderListBoxStyle}"/>

            <ListBox x:Name="enableHeterochromia" Visibility="Collapsed">
                <ListBox.Template>
                    <ControlTemplate>
                        <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource AppearanceListButtonTemplate}" HorizontalAlignment="Center">
                            <Grid x:Name="enableHeterochromiaToggle" Tag="{StaticResource FalseValue}">
                                <ls:LSRepeatButton x:Name="leftBtn" BoundEvent="UILeft" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="{StaticResource LeftCarouselMargin}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                                    <ls:LSRepeatButton.RenderTransform>
                                        <ScaleTransform ScaleX="-1" CenterX="32"/>
                                    </ls:LSRepeatButton.RenderTransform>
                                    <b:Interaction.Triggers>
                                        <b:EventTrigger EventName="Click" >
                                            <b:ChangePropertyAction TargetObject="{Binding .}" PropertyName="HeterochromiaEnabled" Value="{Binding HeterochromiaEnabled, Converter={StaticResource InvertBoolConverter}}"/>
                                        </b:EventTrigger>
                                        <b:EventTrigger EventName="Click" >
                                            <b:Interaction.Behaviors>
                                                <b:ConditionBehavior>
                                                    <b:ConditionalExpression>
                                                        <b:ComparisonCondition LeftOperand="{Binding HeterochromiaEnabled}" Operator="Equal" RightOperand="{StaticResource FalseValue}"/>
                                                    </b:ConditionalExpression>
                                                </b:ConditionBehavior>
                                            </b:Interaction.Behaviors>
                                            <b:InvokeCommandAction Command="{Binding DisableHeterochromia}"/>
                                        </b:EventTrigger>
                                    </b:Interaction.Triggers>
                                </ls:LSRepeatButton>
                                <ls:LSRepeatButton x:Name="rightBtn" BoundEvent="UIRight" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="{StaticResource RightCarouselMargin}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                                    <b:Interaction.Triggers>
                                        <b:EventTrigger EventName="Click" >
                                            <b:ChangePropertyAction TargetObject="{Binding .}" PropertyName="HeterochromiaEnabled" Value="{Binding HeterochromiaEnabled, Converter={StaticResource InvertBoolConverter}}"/>
                                        </b:EventTrigger>
                                        <b:EventTrigger EventName="Click" >
                                            <b:Interaction.Behaviors>
                                                <b:ConditionBehavior>
                                                    <b:ConditionalExpression>
                                                        <b:ComparisonCondition LeftOperand="{Binding HeterochromiaEnabled}" Operator="Equal" RightOperand="{StaticResource FalseValue}"/>
                                                    </b:ConditionalExpression>
                                                </b:ConditionBehavior>
                                            </b:Interaction.Behaviors>
                                            <b:InvokeCommandAction Command="{Binding DisableHeterochromia}"/>
                                        </b:EventTrigger>
                                    </b:Interaction.Triggers>
                                </ls:LSRepeatButton>

                                <StackPanel VerticalAlignment="Center">
                                    <TextBlock Text="{Binding Source='h6f4a0631g9994g44ffg9468gaec6c6a62838', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>

                                    <TextBlock x:Name="enableHeterochromiaValueText" Style="{StaticResource AppearanceCarouselValueText}"/>
                                </StackPanel>

                            </Grid>
                        </ContentControl>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding HeterochromiaEnabled}" Value="True">
                                <Setter TargetName="enableHeterochromiaValueText" Property="Text" Value="{Binding Source='h054025c0gd806g418agb58dg6b325823b7cd', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding HeterochromiaEnabled}" Value="False">
                                <Setter TargetName="enableHeterochromiaValueText" Property="Text" Value="{Binding Source='h468f21a6g00c2g41c3g81d3gbe5291d6ab4d', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ListBox.Template>
            </ListBox>

            <!-- BODY ART -->

            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hff534bd5g26b4g44dbg877bg9ca6abd65969', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceSubHeaderText}"/>

            <StackPanel x:Name="tattooChoices" Visibility="{Binding IsDragonborn, Converter={StaticResource BoolToCollapsedConverter}}">
                <ListBox Tag="tattoos" ItemsSource="{Binding SelectableTattoos}" SelectedItem="{Binding SelectedTattoo}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding SelectableTattoos.Count, Converter={StaticResource CountToVisibilityConverter}}" Style="{StaticResource sliderListBoxStyle}"/>

                <ListBox Tag="tattooColors" ItemsSource="{Binding SelectableTattooColours}" SelectedItem="{Binding SelectedTattooColour}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding AppearanceTattoos.EmptyMaterialSelected, Converter={StaticResource BoolToCollapsedConverter}}" Style="{StaticResource sliderListBoxStyle}"/>
            </StackPanel>

            <ListBox Tag="piercing" ItemsSource="{Binding SelectablePiercings}" SelectedItem="{Binding SelectedPiercing}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding SelectablePiercings.Count, Converter={StaticResource CountToVisibilityConverter}}" Style="{StaticResource sliderListBoxStyle}" />

            <!-- MAKE UP -->

            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hbbddf3e9g352fg461fg8761gbb5256ebd9c4', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceSubHeaderText}"/>

            <ListBox Tag="makeup" ItemsSource="{Binding SelectableMakeup}" SelectedItem="{Binding SelectedMakeup}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding SelectableMakeup.Count, Converter={StaticResource CountToVisibilityConverter}}" Style="{StaticResource sliderListBoxStyle}"/>

            <ListBox Tag="makeupColors" ItemsSource="{Binding SelectableMakeupColours}" SelectedItem="{Binding SelectedMakeupColour}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding AppearanceMakeup.EmptyMaterialSelected, Converter={StaticResource BoolToCollapsedConverter}}" Style="{StaticResource sliderListBoxStyle}"/>

			<!-- MOD START - Hide lip makeup based on if eye makeup is available (doesn't show for Origin characters) -->
			<StackPanel Visibility="{Binding SelectableMakeup.Count, Converter={StaticResource CountToVisibilityConverter}}">
				<ListBox Tag="lipMakeupColors" ItemsSource="{Binding SelectableLipsMakeupColours}" SelectedItem="{Binding SelectedLipsMakeupColour}" Template="{StaticResource AppearanceCarousel}" Style="{StaticResource sliderListBoxStyle}"/>
				<ListBox x:Name="lipColorIntensity" Tag="{StaticResource FalseValue}" ls:AttachedProperties.InheritedTag="lipColorIntensity" DataContext="{Binding AppearanceLipsMakeup.ColorOptions[0]}" Template="{StaticResource AppearanceSliderCarousel}"/>
				<ListBox x:Name="metallicIntensity" Tag="{StaticResource FalseValue}" ls:AttachedProperties.InheritedTag="metallicIntensity" DataContext="{Binding AppearanceLipsMakeup.ColorOptions[1]}" Template="{StaticResource AppearanceSliderCarousel}"/>
				<ListBox x:Name="glossyIntensity" Tag="{StaticResource FalseValue}" ls:AttachedProperties.InheritedTag="glossyIntensity" DataContext="{Binding AppearanceLipsMakeup.ColorOptions[2]}" Template="{StaticResource AppearanceSliderCarousel}"/>
			</StackPanel>
			<!-- MOD END -->

            <!-- HAIR -->

            <StackPanel x:Name="hairChoices" Visibility="{Binding SelectableHair.Count, Converter={StaticResource CountToVisibilityConverter}}">
                
                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h6c6fae77g40f8g4c82gaabfg69655aae2293', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceSubHeaderText}" />

                <ListBox Tag="hair" ItemsSource="{Binding SelectableHair}" SelectedItem="{Binding SelectedHair}" Template="{StaticResource AppearanceCarousel}" Style="{StaticResource sliderListBoxStyle}"/>
                
                <ListBox Tag="beards" ItemsSource="{Binding SelectableBeards}" SelectedItem="{Binding SelectedBeard}" Template="{StaticResource AppearanceCarousel}" Visibility="{Binding SelectableBeards.Count, Converter={StaticResource CountToVisibilityConverter}}" Style="{StaticResource sliderListBoxStyle}"/>

                <StackPanel x:Name="hairColoring" Visibility="Collapsed">
                    <ListBox Tag="hairColors" ItemsSource="{Binding SelectableHairColours}" SelectedItem="{Binding SelectedHairColour}" Template="{StaticResource AppearanceCarousel}" Style="{StaticResource sliderListBoxStyle}"/>
                    <ListBox Tag="hairHighlights" ItemsSource="{Binding SelectableHighlightColours}" SelectedItem="{Binding SelectedHighlightColour}" Template="{StaticResource AppearanceCarousel}" Style="{StaticResource sliderListBoxStyle}"/>
                    <ListBox x:Name="highlightIntensity" Tag="{StaticResource FalseValue}" ls:AttachedProperties.InheritedTag="highlightIntensity" DataContext="{Binding AppearanceHairHighlights.ColorOptions[0]}" Template="{StaticResource AppearanceSliderCarousel}"/>
                    <ListBox Tag="hairGrays" ItemsSource="{Binding SelectableGrayingColours}" SelectedItem="{Binding SelectedGrayingColour}" Template="{StaticResource AppearanceCarousel}"  Style="{StaticResource sliderListBoxStyle}"/>
                    <ListBox x:Name="grayIntensity" Tag="{StaticResource FalseValue}" ls:AttachedProperties.InheritedTag="grayIntensity" DataContext="{Binding AppearanceHairGraying.ColorOptions[0]}" Template="{StaticResource AppearanceSliderCarousel}"/>
                </StackPanel>
            </StackPanel>

            <StackPanel x:Name="hornChoices" Visibility="{Binding SelectableHorns.Count, Converter={StaticResource CountToVisibilityConverter}}">
                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h1e2fea14g1a4fg4567ga286g8c4162b78d6e_14', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceSubHeaderText}"/>
                <ListBox Tag="horns" ItemsSource="{Binding SelectableHorns}" SelectedItem="{Binding SelectedHorn}" Template="{StaticResource AppearanceCarousel}" Style="{StaticResource sliderListBoxStyle}"/>
                <ListBox Tag="hornColors" ItemsSource="{Binding SelectableHornColours}" SelectedItem="{Binding SelectedHornColour}" Template="{StaticResource AppearanceCarousel}" Style="{StaticResource sliderListBoxStyle}"/>
                <ListBox Tag="hornTipColors" ItemsSource="{Binding SelectableHornTipColours}" SelectedItem="{Binding SelectedHornTipColour}" Template="{StaticResource AppearanceCarousel}" Style="{StaticResource sliderListBoxStyle}"/>
            </StackPanel>

            <!-- DRACONIC BLOODLINE -->

            <TextBlock x:Name="draconicBloodline" ls:TextBlockFormatter.SourceText="{Binding Source='h0e1fded7g681ag4e5fgb0a2gc5928ab399a1', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceSubHeaderText}" Visibility="Collapsed"/>

            <ListBox x:Name="scales" Tag="scales" ItemsSource="{Binding SelectableScales}" SelectedItem="{Binding SelectedScales}" Template="{StaticResource AppearanceCarousel}" Visibility="Collapsed" Style="{StaticResource paginatedListBoxStyle}"/>
            <ListBox x:Name="scaleColors" Tag="scaleColors" ItemsSource="{Binding SelectablePassiveColours}" SelectedItem="{Binding SelectedPassiveColour}" Template="{StaticResource AppearanceCarousel}" Visibility="Collapsed" Style="{StaticResource sliderListBoxStyle}"/>

            <ListBox x:Name="draconicLines" Visibility="Collapsed">
                <ListBox.Template>
                    <ControlTemplate>
                        <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource AppearanceListButtonTemplate}" HorizontalAlignment="Center">
                            <Grid x:Name="enableDraconicLinesToggle">
                                <ls:LSRepeatButton x:Name="leftBtn" BoundEvent="UILeft" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="{StaticResource LeftCarouselMargin}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                                    <ls:LSRepeatButton.RenderTransform>
                                        <ScaleTransform ScaleX="-1" CenterX="32"/>
                                    </ls:LSRepeatButton.RenderTransform>
                                    <b:Interaction.Triggers>
                                        <b:EventTrigger EventName="Click" >
                                            <b:ChangePropertyAction TargetObject="{Binding AppearancePassive}" PropertyName="EmptyMaterialSelected" Value="{Binding AppearancePassive.EmptyMaterialSelected, Converter={StaticResource InvertBoolConverter}}"/>
                                            <b:InvokeCommandAction Command="{Binding DragonbornDraconicLinesToggleCommand}"/>
                                        </b:EventTrigger>
                                    </b:Interaction.Triggers>
                                </ls:LSRepeatButton>
                                <ls:LSRepeatButton x:Name="rightBtn" BoundEvent="UIRight" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="{StaticResource RightCarouselMargin}" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                                    <b:Interaction.Triggers>
                                        <b:EventTrigger EventName="Click" >
                                            <b:ChangePropertyAction TargetObject="{Binding AppearancePassive}" PropertyName="EmptyMaterialSelected" Value="{Binding AppearancePassive.EmptyMaterialSelected, Converter={StaticResource InvertBoolConverter}}"/>
                                            <b:InvokeCommandAction Command="{Binding DragonbornDraconicLinesToggleCommand}"/>
                                        </b:EventTrigger>
                                    </b:Interaction.Triggers>
                                </ls:LSRepeatButton>

                                <StackPanel VerticalAlignment="Center">
                                    <TextBlock Text="{Binding Source='h861a433dgcc20g452bg9b1agde89d14c85c9', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>

                                    <TextBlock x:Name="enableDraconicLinesValueText" Style="{StaticResource AppearanceCarouselValueText}"/>
                                </StackPanel>

                            </Grid>
                        </ContentControl>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding AppearancePassive.EmptyMaterialSelected}" Value="False">
                                <Setter TargetName="enableDraconicLinesValueText" Property="Text" Value="{Binding Source='h054025c0gd806g418agb58dg6b325823b7cd', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding AppearancePassive.EmptyMaterialSelected}" Value="True">
                                <Setter TargetName="enableDraconicLinesValueText" Property="Text" Value="{Binding Source='h468f21a6g00c2g41c3g81d3gbe5291d6ab4d', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ListBox.Template>
            </ListBox>

            <ListBox x:Name="draconicLineColors" Tag="draconicLineColors" ItemsSource="{Binding SelectablePassiveColours}" SelectedItem="{Binding SelectedPassiveColour}" Template="{StaticResource AppearanceCarousel}" Visibility="Collapsed" Style="{StaticResource sliderListBoxStyle}"/>

        </StackPanel>

        <ControlTemplate.Triggers>

            <DataTrigger Binding="{Binding HasNewRandomAppearance}" Value="True">
                <Setter TargetName="newRandomAppearance" Property="Visibility" Value="Visible"/>
                <Setter TargetName="randomAppearancesCarousel" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), ElementName=newRandomAppearance}" Value="True">
                <Setter TargetName="newRandomAppearance" Property="BoundEvent" Value="UIAccept"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="appearance">
                <Setter TargetName="newRandomAppearance" Property="Command" Value="{Binding RandomAppearance}"/>
                <Setter TargetName="daisyRace" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="daisySubRace" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="CharacterChangeAppearance">
                <Setter TargetName="rename" Property="Visibility" Value="Visible"/>
                <Setter TargetName="newRandomAppearance" Property="Command" Value="{Binding RandomAppearance}"/>
                <Setter TargetName="daisyRace" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="daisySubRace" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="bodyTypeCarousel" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ParentState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="Henchmen">
                <Setter TargetName="rename" Property="Visibility" Value="Visible"/>
                <Setter TargetName="newRandomAppearance" Property="Command" Value="{Binding RandomAppearance}"/>
                <Setter TargetName="daisyRace" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="daisySubRace" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="bodyTypeCarousel" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            
            <DataTrigger Binding="{Binding Voices.ComboItems.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True">
                <Setter TargetName="voices" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding SelectedHair.IsNull, FallbackValue=False}" Value="False">
                <Setter TargetName="hairColoring" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedBeard.IsNull, FallbackValue=False}" Value="False">
                <Setter TargetName="hairColoring" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding SelectableGenitals.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="hideClothes" Property="Visibility" Value="Visible"/>
                <Setter TargetName="genitalsCarousel" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CoverNudity}" Value="True">
                <Setter TargetName="hideClothes" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="genitalsCarousel" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CharacterCreationStep}" Value="Companion">
                <!-- Swen reqeuest, don't show genitals options for Daisy -->
                <Setter TargetName="hideClothes" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="genitalsCarousel" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding SelectedOrigin.IsLockedAppearance }" Value="False">
                <Setter TargetName="enableHeterochromia" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CharacterCreationStep}" Value="Companion">
                <Setter TargetName="enableHeterochromia" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsDragonborn}" Value="True">
                <Setter TargetName="metallicIntensity" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="glossyIntensity" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsDragonborn}" Value="False"/>
                    <Condition Binding="{Binding SelectedOrigin.IsLockedAppearance }" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="age" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="freckles" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="frecklesIntensity" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="vitiligo" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsDragonborn}" Value="False"/>
                    <Condition Binding="{Binding CharacterCreationStep}" Value="Companion"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="age" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="freckles" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="frecklesIntensity" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="vitiligo" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding HasAppearancePassive}" Value="True"/>
                    <Condition Binding="{Binding IsDragonborn}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="scales" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="draconicBloodline" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding HasAppearancePassive}" Value="True"/>
                    <Condition Binding="{Binding IsDragonborn}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="scaleColors" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding HasAppearancePassive}" Value="True"/>
                    <Condition Binding="{Binding IsDragonborn}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="draconicLines" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="draconicBloodline" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding HasAppearancePassive}" Value="True"/>
                    <Condition Binding="{Binding IsDragonborn}" Value="True"/>
                    <Condition Binding="{Binding AppearancePassive.EmptyMaterialSelected}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="draconicLineColors" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding CharacterCreationStep}" Value="Companion">
                <Setter TargetName="voices" Property="Style" Value="{StaticResource paginatedListBoxStyleFixed}" />
            </DataTrigger> 

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AppearanceBackgroundTemplate">
        <Grid>
            <Rectangle x:Name="appearanceBackgroundShadow" HorizontalAlignment="Right" Width="{StaticResource appearancePanelBackgroundWidthSplitScreen}" Fill="{StaticResource RightSideShadingBrush}" OpacityMask="{StaticResource OpacityMaskShadingBrush}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Layout}" Value="Common">
                <Setter TargetName="appearanceBackgroundShadow" Property="Width" Value="{StaticResource appearancePanelBackgroundWidth}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AppearanceItemSelectableBottomButtons">
        <StackPanel Orientation="Horizontal">
            <ls:LSButton x:Name="selectButton" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAccept, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source=h0dab6b33gf8f3g4d26g8426g23d2d6da3b3a,Converter={StaticResource TranslatedStringConverter}}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="LSInputBindingPressed" >
                        <ls:LSPlaySound Sound="UI_DefaultButton_Click"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ls:LSButton>

        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding FocusedElement.Tag, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource NullToBoolFalseConverter}, FallbackValue=False}" Value="True">
                <Setter TargetName="selectButton" Property="IsEnabled" Value="True"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding FocusedElement.Tag, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource NullToBoolFalseConverter}, FallbackValue=False}" Value="False">

                <Setter TargetName="selectButton" Property="IsEnabled" Value="False"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AppearanceItemSelectedBottomButtons">
        <StackPanel Orientation="Horizontal">

            <ls:LSButton x:Name="selectButton" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAccept, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source=hd0c08193ga7f2g4a7eg8225g63748c7b3096,Converter={StaticResource TranslatedStringConverter}}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="LSInputBindingPressed" >
                        <ls:LSPlaySound Sound="UI_DefaultButton_Click"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ls:LSButton>

            <!-- Toggle tooltips -->
            <ls:LSButton x:Name="ToggleTooltips"
                                 Command="{Binding ToggleTooltipOnUIElement}"
                                 CommandParameter="{Binding FocusedElement, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}"
                                 BoundEvent="UIShowInfo"
                                 ContentTemplate="{StaticResource ControllerButtonHint}"
                                 Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIShowInfo, Converter={StaticResource FindInputEventConverter}}"
                                 Tag="{Binding Source='hf8dd4c2fg97e0g4ccdgac1ag3cd1fe5060ef', Converter={StaticResource TranslatedStringConverter}}" TapTime="{StaticResource DefaultButtonTapTime}"/>

            <ls:LSButton x:Name="backButton" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UICancel, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source=h77fec760g866dg4e47g8e81g467c9c05e447,Converter={StaticResource TranslatedStringConverter}}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="LSInputBindingPressed" >
                        <ls:LSPlaySound Sound="UI_DefaultButton_Click"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ls:LSButton>
        </StackPanel>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.ShowUIElementTooltip, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True">
                <Setter TargetName="ToggleTooltips" Property="Tag" Value="{Binding Source='hb33ec471gd611g4ee3gbbffg699af8f79167', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AppearancePanelTemplate">
        <DockPanel HorizontalAlignment="Right">
            <TextBlock x:Name="headerText" DockPanel.Dock="Top" ls:TextBlockFormatter.SourceText="{Binding Source=h261cce55g1d1eg4c09g9675ge5c1be13e820, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"  Margin="0,0,76,0"/>
            <!-- ls:ScrollViewerHelper.VerticalScrollOffsetMargin="185"-->

            <ScrollViewer Margin="0,50,0,0" VerticalScrollBarVisibility="Auto" >
                <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">
                    <b:Interaction.Triggers>
                        <b:DataTrigger Binding="{Binding FocusedElement.Tag, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource NullToBoolFalseConverter}, FallbackValue=False}" Value="True">
                            <b:ChangePropertyAction TargetName="selectApperanceItem" PropertyName="IsEnabled" Value="True"/>
                         
                        </b:DataTrigger>
                        <b:DataTrigger Binding="{Binding FocusedElement.Tag, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource NullToBoolFalseConverter}, FallbackValue=False}" Value="False">
                            <b:ChangePropertyAction TargetName="selectApperanceItem" PropertyName="IsEnabled" Value="False"/>
                        </b:DataTrigger>

                        <b:EventTrigger EventName="Loaded">
                            <b:ChangePropertyAction TargetName="bottomButtons" PropertyName="Template" Value="{DynamicResource AppearanceItemSelectableBottomButtons}"/>
                        </b:EventTrigger>
                        <!-- Only happens for appearance tab when tab changed -->
                        <b:EventTrigger EventName="Unloaded">
                            <b:ChangePropertyAction TargetName="bottomButtons" PropertyName="Template" Value="{DynamicResource StandardBottomButtonsTemplate2}"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>

                    <Control x:Name="appearanceList" Template="{StaticResource appearanceListTemplate}" ls:MoveFocus.IsMoveFocusScope="True"/>
                    <Control x:Name="appearanceSelectedContents" Visibility="Collapsed" Tag="" Width="{StaticResource appearancePanelWidth}"/>

                </StackPanel>
            </ScrollViewer>

            <ls:LSButton x:Name="selectApperanceItem" BoundEvent="UIAccept">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Click">
                        <b:ChangePropertyAction TargetName="appearanceList" PropertyName="Visibility" Value="Collapsed"/>
                        <b:ChangePropertyAction TargetName="appearanceSelectedContents" PropertyName="Tag" Value="{Binding Path=FocusedElement.Tag, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        <b:ChangePropertyAction TargetName="appearanceSelectedContents" PropertyName="Visibility" Value="Visible"/>
                        <b:ChangePropertyAction TargetName="bottomButtons" PropertyName="Template" Value="{DynamicResource AppearanceItemSelectedBottomButtons}"/>
                        <b:ChangePropertyAction TargetName="selectApperanceItem" PropertyName="IsEnabled" Value="False"/>
                        <ls:LSPlaySound Sound="UI_DefaultButton_Click"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ls:LSButton>

            <ls:LSButton x:Name="backFromApperanceItem" BoundEvent="UICancel" IsEnabled="{Binding ElementName=appearanceSelectedContents, Path=IsVisible}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Click">
                        <b:ChangePropertyAction TargetName="appearanceList" PropertyName="Visibility" Value="Visible"/>
                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=appearanceList}"/>
                        <b:ChangePropertyAction TargetName="appearanceSelectedContents" PropertyName="Tag" Value=""/>
                        <b:ChangePropertyAction TargetName="appearanceSelectedContents" PropertyName="Visibility" Value="Collapsed"/>
                        <b:ChangePropertyAction TargetName="bottomButtons" PropertyName="Template" Value="{DynamicResource AppearanceItemSelectableBottomButtons}"/>
                        <b:ChangePropertyAction TargetName="selectApperanceItem" PropertyName="IsEnabled" Value="True"/>
                        <ls:LSPlaySound Sound="UI_DefaultButton_Click"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ls:LSButton>

        </DockPanel>
        <ControlTemplate.Triggers>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="daisyrace">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h6020727bge0e3g4de7gaf3ag469c3b32b3d2', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ListBox ItemTemplate="{StaticResource CustomIconTemplate}" ItemsSource="{Binding SelectableRaces}" SelectedItem="{Binding SelectedRace}" Style="{StaticResource gameplayIconGridStyle}">
                                    <ListBox.Resources>
                                        <Style x:Key="CustomIconStyle" BasedOn="{StaticResource RaceIconStyle}" TargetType="Rectangle"/>
                                    </ListBox.Resources>
                                </ListBox>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="daisysubrace">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h29d1d637g94bbg4f11g9bdfgbe0042b60e40', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ListBox ItemTemplate="{StaticResource CustomIconTemplate}" ItemsSource="{Binding SelectableSubRaces}" SelectedItem="{Binding SelectedSubRace}" Style="{StaticResource gameplayIconGridStyle}">
                                    <ListBox.Resources>
                                        <Style x:Key="CustomIconStyle" BasedOn="{StaticResource RaceIconStyle}" TargetType="Rectangle"/>
                                    </ListBox.Resources>
                                </ListBox>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="heads">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <ListBox ItemsSource="{Binding SelectableHeads}" SelectedItem="{Binding SelectedHead}" Style="{StaticResource appearanceIconGridStyle}"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="skinColors">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hc81ba7bcgb2ccg4423ga050g253fd53ce2c9', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>
                                
                                <ItemsControl Style="{DynamicResource ColorOptionsStyle}" ItemsSource="{Binding SkinColorOptions}" Margin="0,21,0,0"/>

                                <ListBox ItemsSource="{Binding SelectableSkinColours}" SelectedItem="{Binding SelectedSkinColour}" ItemTemplate="{StaticResource selectableColourTemplate}" Style="{StaticResource appearanceOverpanelListBoxStyle}" Margin="0,21,0,0"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="eyeColors">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h1203122ag1146g4759ga531g57ccd5ef36da', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ItemsControl Style="{DynamicResource ColorOptionsStyle}" ItemsSource="{Binding EyeColorOptions}" Margin="0,21,0,0"/>

                                <ListBox ItemsSource="{Binding SelectableEyeColours}" SelectedItem="{Binding SelectedEyeColour}" ItemTemplate="{StaticResource selectableColourTemplate}" Style="{StaticResource appearanceOverpanelListBoxStyle}" Margin="0,21,0,0"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="heterochromiaEyeColors">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hc6bfd120gde63g4c3ag99eag43e8f905a7d4', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ItemsControl Style="{DynamicResource ColorOptionsStyle}" ItemsSource="{Binding EyeColorOptions}" Margin="0,21,0,0"/>

                                <ListBox ItemsSource="{Binding SelectableEyeColours}" SelectedItem="{Binding SelectedHeterochromiaEyeColour}" ItemTemplate="{StaticResource selectableColourTemplate}" Style="{StaticResource appearanceOverpanelListBoxStyle}" Margin="0,21,0,0"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="tattoos">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <ListBox ItemsSource="{Binding SelectableTattoos}" SelectedItem="{Binding SelectedTattoo}" Style="{StaticResource appearanceIconGridStyle}"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="tattooColors">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h0c6d2890g6a16g4e20ga2a1gcb15afa6e8d3', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ListBox ItemsSource="{Binding SelectableTattooColours}" SelectedItem="{Binding SelectedTattooColour}" ItemTemplate="{StaticResource selectableColourTemplate}" Style="{StaticResource appearanceOverpanelListBoxStyle}" Margin="0,50,0,0"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="makeup">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <ListBox ItemsSource="{Binding SelectableMakeup}" SelectedItem="{Binding SelectedMakeup}" Style="{StaticResource appearanceIconGridStyle}"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="makeupColors">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                                <b:Interaction.Behaviors>
                                    <ls:CollectionFilterBehavior x:Name="IsDragonbornMakeupFilter" ItemsSource="{Binding AppearanceMakeup.ColorOptions}" Predicate="{Binding IsDragonbornPredicate}"/>
                                </b:Interaction.Behaviors>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hd98545bbg8f42g437dg8f70gcb5f7a1bda8b', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ListBox ItemsSource="{Binding SelectableMakeupColours}" SelectedItem="{Binding SelectedMakeupColour}" ItemTemplate="{StaticResource selectableColourTemplate}" Style="{StaticResource appearanceOverpanelListBoxStyle}" Margin="0,50,0,0"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="lipMakeupColors">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='ha96c9b3bg5d8dg4ebbgb7a8gbefe66c7b781', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ListBox ItemsSource="{Binding SelectableLipsMakeupColours}" SelectedItem="{Binding SelectedLipsMakeupColour}" ItemTemplate="{StaticResource selectableColourTemplate}" Style="{StaticResource appearanceOverpanelListBoxStyle}" Margin="0,50,0,0"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="scars">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h408d8f2bgca7eg4d20gb0bag4d4a3318f1c5', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ListBox ItemsSource="{Binding SelectableScars}" SelectedItem="{Binding SelectedScar}" Style="{StaticResource appearanceIconGridStyle}"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="hair">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <ListBox ItemsSource="{Binding SelectableHair}" SelectedItem="{Binding SelectedHair}" Style="{StaticResource appearanceIconGridStyle}"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="hairColors">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h6ed36c54g1a3dg4c46g9987gd5882613ae05', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ListBox ItemsSource="{Binding SelectableHairColours}" SelectedItem="{Binding SelectedHairColour}" ItemTemplate="{StaticResource selectableColourTemplate}" Style="{StaticResource appearanceOverpanelListBoxStyle}" Margin="0,50,0,0"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="hairHighlights">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h9d4a4e08g81cdg4259g8bd1g80b47dbda3f3', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ListBox ItemsSource="{Binding SelectableHighlightColours}" SelectedItem="{Binding SelectedHighlightColour}" ItemTemplate="{StaticResource selectableColourTemplate}" Style="{StaticResource appearanceOverpanelListBoxStyle}" Margin="0,50,0,0"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="hairGrays">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hb85e6761gd73bg4fc1g8ff3g4081ff97694a', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ListBox ItemsSource="{Binding SelectableGrayingColours}" SelectedItem="{Binding SelectedGrayingColour}" ItemTemplate="{StaticResource selectableColourTemplate}" Style="{StaticResource appearanceOverpanelListBoxStyle}" Margin="0,50,0,0"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="beards">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <ListBox ItemsSource="{Binding SelectableBeards}" SelectedItem="{Binding SelectedBeard}" Style="{StaticResource appearanceIconGridStyle}"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="horns">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h290f2542g9702g4651g8afdgdae1f08a12eb', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ListBox ItemsSource="{Binding SelectableHorns}" SelectedItem="{Binding SelectedHorn}" Style="{StaticResource appearanceIconGridStyle}"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>


            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="hornColors">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h8f9581e8g4440g4cf5g8752g220535346a50', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ListBox ItemsSource="{Binding SelectableHornColours}" SelectedItem="{Binding SelectedHornColour}" ItemTemplate="{StaticResource selectableColourTemplate}" Style="{StaticResource appearanceOverpanelListBoxStyle}" Margin="0,50,0,0"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="hornTipColors">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h33ea2bd3g91cag471cg8242gef7327983dbf', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ListBox ItemsSource="{Binding SelectableHornTipColours}" SelectedItem="{Binding SelectedHornTipColour}" ItemTemplate="{StaticResource selectableColourTemplate}" Style="{StaticResource appearanceOverpanelListBoxStyle}" Margin="0,50,0,0"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="scales">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h381a6c0bg214fg4968gae5cg9e5b8a8ffc20', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ListBox ItemsSource="{Binding SelectableScales}" SelectedItem="{Binding SelectedScales}" Style="{StaticResource appearanceIconGridStyle}"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="scaleColors">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h85555614g40b2g459dgbfbfg76291036aebe', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ItemsControl Style="{StaticResource ColorOptionsStyle}" ItemsSource="{Binding AppearancePassive.ColorOptions}" Margin="0,50,0,0"/>

                                <ListBox ItemsSource="{Binding SelectablePassiveColours}" SelectedItem="{Binding SelectedPassiveColour}" ItemTemplate="{StaticResource selectableColourTemplate}" Style="{StaticResource appearanceOverpanelListBoxStyle}" Margin="0,50,0,0"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="draconicLineColors">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h7202f8ebgaa5dg411dgac62g3bf8986e28b3', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource OverPanelHeaderText}"/>

                                <ItemsControl Style="{StaticResource ColorOptionsStyle}" ItemsSource="{Binding AppearancePassive.ColorOptions}" Margin="0,50,0,0"/>

                                <ListBox ItemsSource="{Binding SelectablePassiveColours}" SelectedItem="{Binding SelectedPassiveColour}" ItemTemplate="{StaticResource selectableColourTemplate}" Style="{StaticResource appearanceOverpanelListBoxStyle}" Margin="0,50,0,0"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="topofhead">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <ListBox ItemsSource="{Binding SelectableTopOfHead}" SelectedItem="{Binding SelectedTopOfHead}" Style="{StaticResource appearanceIconGridStyle}"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="chin">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <ListBox ItemsSource="{Binding SelectableChin}" SelectedItem="{Binding SelectedChin}" Style="{StaticResource appearanceIconGridStyle}"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="jaw">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                                
                                <ListBox ItemsSource="{Binding SelectableJaw}" SelectedItem="{Binding SelectedJaw}" Style="{StaticResource appearanceIconGridStyle}"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, ElementName=appearanceSelectedContents}" Value="tail">
                <Setter TargetName="appearanceSelectedContents" Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="CharacterCreation_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>

                                <ListBox ItemsSource="{Binding SelectableTail}" SelectedItem="{Binding SelectedTail}" Style="{StaticResource appearanceIconGridStyle}"/>

                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>