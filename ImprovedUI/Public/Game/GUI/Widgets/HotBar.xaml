<ls:UIWidget x:Name="HotBar"
             ls:UIWidget.ContextName="HotBar"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"   
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance {x:Type ls:DCHotBar}, IsDesignTimeCreatable=True}"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             d:DesignWidth="3840" d:DesignHeight="2160"
             Style="{StaticResource hud.root.Style}">

    <ls:UIWidget.Template>
        <ControlTemplate>
            <ControlTemplate.Resources>
                <System:Int16 x:Key="MaxDeckColumns">16</System:Int16>
                <System:Double x:Key="HotbarSlotSize">88</System:Double>
                <System:Double x:Key="HotbarSlotIconSize">88</System:Double>
                <System:Double x:Key="HotbarSlotSpacing">0</System:Double>
                <System:Double x:Key="HotbarAttackSlotSize">80</System:Double>
                <System:Double x:Key="ClassIconSize">160</System:Double>

                <System:Double x:Key="MinimalistSlotSize">88</System:Double>
                <System:Double x:Key="MinimalistHotbarThreshold">12</System:Double>

                <System:TimeSpan x:Key="StopDragDuration">0:0:0.2</System:TimeSpan>
                <System:TimeSpan x:Key="DeckResizeDuration">0:0:0.5</System:TimeSpan>
                <Duration x:Key="SingleHotbarAnimationsDuration">0:0:0.2</Duration>
                <Duration x:Key="ExtraDecksResizeDuration">0:0:0.5</Duration>
                <Duration x:Key="ShowConcertinaDuration">0:0:0.1</Duration>

                <KeyTime x:Key="RestButtonAnimationTime">0:0:0.3</KeyTime>

                <!-- How many statuses to show before limiting. Multiples of 3. Update both! -->
                <System:Double x:Key="StatusLimitAmount">9</System:Double>
                <System:Double x:Key="StatusLimitAmountInverse">-9</System:Double>

                <Thickness x:Key="ResourceBackgroundMargin">0</Thickness>
                <Thickness x:Key="ClassIconMargin">0,16,0,51</Thickness>
                <Thickness x:Key="TurnButtonMargin">0,0,174,34</Thickness>
                <Thickness x:Key="EndTurnButtonMargin">0,0,183,42</Thickness>
                <Thickness x:Key="FleeButtonMargin">0,0,25,76</Thickness>

                <Thickness x:Key="FixedHotbarHiddenMargin">1600,6,0,-6</Thickness>
                <Thickness x:Key="FixedHotbarMargin">0,6,0,-6</Thickness>
                <Thickness x:Key="SingleHotbarHiddenMargin">0,300,0,-300</Thickness>
                <Thickness x:Key="SingleHotbarMargin">0,0,0,1</Thickness>
                <Thickness x:Key="SingleHotbarFromLeftHiddenMargin">-1000,0,0,1</Thickness>
                <Thickness x:Key="SingleHotbarFromLeftMargin">0,0,0,1</Thickness>

                <BitmapImage x:Key="OverlayMessageBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/overlay_message.png" />
                <BitmapImage x:Key="HotbarDivider" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/vertical_divider_double.png" />

                <!--ANIMATE CONCERTINA HANDLES-->
                <Storyboard x:Key="FadeSlidersOutAnim" FillBehavior="Stop">
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="PART_SizerThumb">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                    </ObjectAnimationUsingKeyFrames>
                <DoubleAnimation
                Storyboard.TargetName="PART_SizerThumb"
                Storyboard.TargetProperty="Opacity"
                From="1"
                To="0"
                Duration="0:0:0.2">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseOut"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>

                </Storyboard>
                <Storyboard x:Key="FadeSlidersInAnim" FillBehavior="Stop">
                    <DoubleAnimation
                Storyboard.TargetName="PART_SizerThumb"
                Storyboard.TargetProperty="Opacity"
                From="0"
                To="1"
                Duration="0:0:0.2">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseOut"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <ControlTemplate x:Key="FloatingFrameButton" TargetType="ls:LSButton">
                    <ControlTemplate.Resources>
                        <BitmapImage x:Key="FloatingFrame" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_floatingFrame_d.png" />
                        <BitmapImage x:Key="SmallFocus" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_small_focus_d.png" />
                    </ControlTemplate.Resources>
                    <Grid>
                        <Image x:Name="bg" Source="{StaticResource FloatingFrame}" Stretch="None"/>
                        <Image x:Name="bgImg" Source="{StaticResource SmallFocus}" Stretch="None"/>
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_small_focus_h.png" TargetName="bgImg"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_small_focus_p.png" TargetName="bgImg"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <Style x:Key="BottomLinksMarkerStyle" TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                    <Setter Property="VerticalAlignment" Value="Top"/>
                    <Setter Property="IsHitTestVisible" Value="False"/>
                    <Setter Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_inactivemod_d.png"/>
                    <Setter Property="Slices" Value="12"/>
                    <Setter Property="MinWidth" Value="44"/>
                    <Setter Property="Height" Value="20"/>
                    <Setter Property="Margin" Value="0,-8,0,0"/>
                    <Setter Property="Visibility" Value="Collapsed"/>
                </Style>

                <BitmapImage x:Key="FilterButtonBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_d.png" />
                <BitmapImage x:Key="NewContentMarker1" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterLevelup/levelUp_exclamation_h1.png" />
                <BitmapImage x:Key="NewContentMarker2" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterLevelup/levelUp_exclamation_h2.png" />

                <ControlTemplate x:Key="FilterButton" TargetType="{x:Type ls:LSButton}">
                    <Grid>
                        <ls:LSNineSliceImage x:Name="bg" ImageSource="{StaticResource FilterButtonBackground}" Slices="36" Padding="10" MinWidth="{Binding MaxWidth, RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}}">
                            <TextBlock Text="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Style="{StaticResource BtnTextGlow}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" Margin="10" VerticalAlignment="Center" HorizontalAlignment="Stretch" TextTrimming="CharacterEllipsis" TextAlignment="Center"/>
                        </ls:LSNineSliceImage>

                        <Image x:Name="NewContentMarker" Visibility="Collapsed" Stretch="None" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,-26,10,0" IsHitTestVisible="False" RenderTransformOrigin="0.5,0.5">
                            <Image.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="0.5" ScaleY="0.5"/>
                                </TransformGroup>
                            </Image.RenderTransform>
                        </Image>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding MaxWidth, RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=200}" Value="True">
                            <Setter TargetName="bg" Property="MinWidth" Value="200"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="ImageSource" TargetName="bg" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_h.png"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="ImageSource" TargetName="bg" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_p.png"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"  Value="False">
                            <Setter Property="ImageSource" TargetName="bg" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_disabled.png"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="NewContent">
                            <Setter TargetName="NewContentMarker" Property="Visibility" Value="Visible"/>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard x:Name="NewContentMarkerAnimation">
                                    <Storyboard RepeatBehavior="Forever">
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="NewContentMarker" Storyboard.TargetProperty="Source" Duration="0:0:1">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource NewContentMarker1}"/>
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.5" Value="{StaticResource NewContentMarker2}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="NewContentMarkerAnimation"/>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <BitmapImage x:Key="ActiveFilterButtonBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_active_d.png" />

                <ControlTemplate x:Key="ActiveFilterButton" TargetType="{x:Type ls:LSButton}">
                    <Grid>
                        <ls:LSNineSliceImage x:Name="bg" ImageSource="{StaticResource ActiveFilterButtonBackground}" Slices="36" Padding="10"  MinWidth="{Binding MaxWidth, RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}}">
                            <TextBlock Text="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Style="{StaticResource BtnTextGlow}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" Margin="10" VerticalAlignment="Center" HorizontalAlignment="Stretch" TextTrimming="CharacterEllipsis" TextAlignment="Center"/>
                        </ls:LSNineSliceImage>

                        <ls:LSNineSliceImage x:Name="Marker" Style="{StaticResource BottomLinksMarkerStyle}" Width="{Binding ActualWidth, ElementName=bg, Converter={StaticResource AddConverter}, ConverterParameter=-80}" Visibility="Visible">
                            <Image Source="{StaticResource ActiveModArrow}" Stretch="None" VerticalAlignment="Center" Margin="0,4,0,-4"/>
                        </ls:LSNineSliceImage>

                        <Image x:Name="NewContentMarker" Visibility="Collapsed" Stretch="None" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,-26,10,0" IsHitTestVisible="False" RenderTransformOrigin="0.5,0.5">
                            <Image.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="0.5" ScaleY="0.5"/>
                                </TransformGroup>
                            </Image.RenderTransform>
                        </Image>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding MaxWidth, RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=200}" Value="True">
                            <Setter TargetName="bg" Property="MinWidth" Value="200"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="ImageSource" TargetName="bg" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_active_h.png"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="ImageSource" TargetName="bg" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_active_p.png"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"  Value="False">
                            <Setter Property="ImageSource" TargetName="bg" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_active_disabled.png"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="NewContent">
                            <Setter TargetName="NewContentMarker" Property="Visibility" Value="Visible"/>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard x:Name="NewContentMarkerAnimation">
                                    <Storyboard RepeatBehavior="Forever">
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="NewContentMarker" Storyboard.TargetProperty="Source" Duration="0:0:1">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource NewContentMarker1}"/>
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.5" Value="{StaticResource NewContentMarker2}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="NewContentMarkerAnimation"/>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <Style x:Key="BottomLinksStyle" TargetType="ls:LSButton">
                    <Setter Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
                    <Setter Property="FontSize" Value="{StaticResource SmallFontSize}"/>
                    <Setter Property="Margin" Value="-4,0"/>
                    <Setter Property="Template" Value="{StaticResource FilterButton}"/>
                </Style>

                <Style x:Key="BottomDividerImageStyle" TargetType="Image">
                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_divider.png"/>
                    <Setter Property="Margin" Value="-30,6, -30, 0" />
                    <Setter Property="Stretch" Value="None"/>
                    <Setter Property="VerticalAlignment" Value="Top"/>
                </Style>

                <ImageBrush x:Key="HotbarSlotBackground" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/hotbarSlot.png" />
                <ImageBrush x:Key="HotbarSlotBackgroundTiles" AlignmentX="Left" AlignmentY="Top" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/hotbarSlot_bg.png" TileMode="Tile" Stretch="None" ViewboxUnits="Absolute" ViewportUnits="Absolute" Viewbox="0,0,88,88" Viewport="0,0,88,88"/>


                <System:Double x:Key="FullWidth">1498.0</System:Double>
                <System:Double x:Key="DeckWidth">1498.0</System:Double>
                <System:Double x:Key="DeckWidthShapeshift">1450.0</System:Double>
                <Thickness x:Key="DeckMarginShapeshift">52,26,36,16</Thickness>
           
                <!--ITEMS eg THROW-->
                <ControlTemplate x:Key="ItemsControlDeckTemplate" TargetType="ListBox">
                    <ScrollViewer x:Name="ContainerScroller" Template="{StaticResource NoForcedStyleScrollViewerTemplate}" ls:ScrollViewerHelper.MouseWheelScrollsHorizontally="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Padding="0,0,0,28" Focusable="False" VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Visible"  CanContentScroll="{Binding CellColumns, Converter={StaticResource GreaterThanConverter}, ConverterParameter={StaticResource MaxDeckColumns}}" Margin="0,0,0,-28">
                        <ItemsPresenter />
                    </ScrollViewer>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Tag,RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="HideScrollbar">
                            <Setter TargetName="ContainerScroller" Property="HorizontalScrollBarVisibility" Value="Disabled"/>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.CurrentShownDeck, RelativeSource={RelativeSource AncestorType=ls:UIWidget}, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsAnimatingFullyResizedItem, RelativeSource={RelativeSource AncestorType={x:Type ls:Concertina}}, FallbackValue=True}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ContainerScroller" Property="HorizontalScrollBarVisibility" Value="Auto"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <DataTemplate x:Key="HotBarTemplate" DataType="{x:Type ls:VMHotBar}">
                    <Grid HorizontalAlignment="Stretch" Background="{x:Null}">
                        <ListBox x:Name="HotbarItemsList" HorizontalContentAlignment="Right" ItemsSource="{Binding SlotList}" Width="{Binding ContainerWidth, RelativeSource={RelativeSource AncestorType=ls:ConcertinaItem}}" Template="{DynamicResource ItemsControlDeckTemplate}">
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem">
                                    <Setter Property="Template" >
                                        <Setter.Value>
                                            <ControlTemplate TargetType="ListBoxItem">
                                                <ls:LSButton x:Name="contentContainer" Style="{StaticResource HotBarSlotStyle}" Content="{TemplateBinding Content}" ls:TooltipExtender.Owner="{Binding DataContext.CurrentPlayer.SelectedCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                                <ControlTemplate.Triggers>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding DataContext.CurrentActiveSlot.SlotType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Item"/>
                                                            <!--GUS-210767: When CanHideActiveSlotFilter is True it means we're in a weapon filter and this is an item there (i.e. an arrow in a bow filter), so we DON'T want to change the owner for the hotbar tooltips-->
                                                            <Condition Binding="{Binding DataContext.CanHideActiveSlotFilter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter TargetName="contentContainer" Property="ls:TooltipExtender.Owner" Value="{Binding DataContext.CurrentActiveSlot.GameObject, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                                    </MultiDataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListBox.ItemContainerStyle>
                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <ls:LSGrid x:Name="Container" Columns="{Binding CellColumns}" Rows="{Binding NumberOfBars}" ExtendedRows="False" Orientation="Vertical" Background="{x:Null}"
                                                           CellWidth="{StaticResource HotbarSlotIconSize}" CellHeight="{StaticResource HotbarSlotIconSize}" IndexParam="SlotIndex"
                                                           HorizontalSpacing="{StaticResource HotbarSlotSpacing}" VerticalSpacing="{StaticResource HotbarSlotSpacing}"
                                                           AutoIndex="{Binding (ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}" VerticalAlignment="Top">
                                        <b:Interaction.Behaviors>
                                            <!--AllowDrop is an inherited property for any FrameworkElement, so the first one we find is ok-->
                                            <ls:DropOnInventoryGridBehavior DropCommand="{Binding DataContext.DropOnHotBarCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" AllowDrop="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=AllowDrop}"/>
                                            <ls:DragGameObjectGridBehavior StartDragCommand="{Binding DataContext.DragSlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" DragDisabledSoundID="UI_HUD_HotBar_Ability_DragDisabled">
                                                <ls:DragGameObjectGridBehavior.AllowDrag>
                                                    <MultiBinding Converter="{StaticResource BoolAndConverter}">
                                                        <Binding Path="AllowDrop" RelativeSource="{RelativeSource AncestorType={x:Type FrameworkElement}}"/>
                                                        <Binding Path="DataContext.CurrentPlayer.SelectedCharacter.HotBarUnlocked" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                    </MultiBinding>
                                                </ls:DragGameObjectGridBehavior.AllowDrag>
                                            </ls:DragGameObjectGridBehavior>
                                        </b:Interaction.Behaviors>
                                        <b:Interaction.Triggers>
                                            <b:DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=AllowDrop}" Value="True">
                                                <b:ChangePropertyAction PropertyName="Background" TargetName="Container" Value="{StaticResource HotbarSlotBackgroundTiles}"/>
                                            </b:DataTrigger>
                                        </b:Interaction.Triggers>
                                    </ls:LSGrid>
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>
                        </ListBox>
                        <StackPanel x:Name="BottomFilterExtraData" Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Left" Height="90" Visibility="Collapsed"
                            DataContext="{x:Null}" Background="{x:Null}">
                            <TextBlock Text="{Binding Name}" VerticalAlignment="Center"
                               Foreground="{StaticResource LS_tint100}" FontSize="{StaticResource MediumFontSize}"/>
                            <ItemsControl Margin="50,0,0,0" Style="{StaticResource ActiveConditionsSection}" VerticalAlignment="Center" ItemTemplate="{StaticResource ActiveConditionBasicTemplate}"
                                  ItemsSource="{Binding NonPermanentStatusEffects}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </StackPanel>

                    </Grid>
                    <DataTemplate.Triggers>
                        <Trigger Property="ActualWidth" Value="{StaticResource FullWidth}">
                            <Setter TargetName="HotbarItemsList" Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsAnimatingFullyResizedItem, RelativeSource={RelativeSource AncestorType={x:Type ls:Concertina}}, FallbackValue=False}" Value="False"/>
                                <Condition Binding="{Binding IsFullSize, RelativeSource={RelativeSource AncestorType={x:Type ls:ConcertinaItem}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="HotbarItemsList" Property="Width" Value="{StaticResource FullWidth}"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Tag,RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="HideScrollbar">
                            <Setter TargetName="HotbarItemsList" Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HotBarType}" Value="InvalidHotBar"/>
                                <Condition Binding="{Binding DataContext.CurrentActiveSlot.Spell.WeaponActionType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Melee"/>
                                <Condition Binding="{Binding DataContext.IsSelectingUpcastedSpell, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                                <Condition Binding="{Binding DataContext.IsShowingAContainerWithVariants, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BottomFilterExtraData" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BottomFilterExtraData" Property="DataContext" Value="{Binding DataContext.CurrentPlayer.SelectedCharacter.Equipment.MeleeMainHand.Item, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HotBarType}" Value="InvalidHotBar"/>
                                <Condition Binding="{Binding DataContext.CurrentActiveSlot.Spell.WeaponActionType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Ranged"/>
                                <Condition Binding="{Binding DataContext.IsSelectingUpcastedSpell, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                                <Condition Binding="{Binding DataContext.IsShowingAContainerWithVariants, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BottomFilterExtraData" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BottomFilterExtraData" Property="DataContext" Value="{Binding DataContext.CurrentPlayer.SelectedCharacter.Equipment.RangedMainHand.Item, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HotBarType}" Value="InvalidHotBar"/>
                                <Condition Binding="{Binding DataContext.CurrentActiveSlot.GameObject.UseType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Arrow"/>
                                <Condition Binding="{Binding DataContext.IsSelectingUpcastedSpell, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                                <Condition Binding="{Binding DataContext.IsShowingAContainerWithVariants, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BottomFilterExtraData" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BottomFilterExtraData" Property="DataContext" Value="{Binding DataContext.CurrentPlayer.SelectedCharacter.Equipment.RangedMainHand.Item, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HotBarType}" Value="InvalidHotBar"/>
                                <Condition Binding="{Binding DataContext.IsShowingAContainerWithVariants, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                <Condition Binding="{Binding DataContext.SingleHotBar.SlotList.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource LessThanConverter}, ConverterParameter={StaticResource MinimalistHotbarThreshold}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <!-- We will use this as background, but elements will be shown in MinimalistContainer -->
                            <Setter TargetName="HotbarItemsList" Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Path=IsAnimatingFullyResizedItem, RelativeSource={RelativeSource AncestorType={x:Type ls:Concertina}}, FallbackValue=False}" Value="True">
                            <Setter TargetName="HotbarItemsList" Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
                            <Setter TargetName="HotbarItemsList" Property="IsHitTestVisible" Value="False"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>

                <BitmapImage x:Key="ConcertinaShutter" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutter_d.png" />
                <BitmapImage x:Key="ConcertinaShutterMore" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_shutter_more.png" />

                <ControlTemplate x:Key="HotbarItemTemplate" TargetType="ls:ConcertinaItem">
                    <StackPanel x:Name="Root" Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Top" ClipToBounds="False">
                        <ContentPresenter x:Name="PART_ConcertinaContainer"/>
                        <Border x:Name="PART_SizerThumb" VerticalAlignment="Stretch" HorizontalAlignment="Right">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="MouseEnter">
                                    <b:InvokeCommandAction Command="{Binding DataContext.SetCursorCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="Resize"/>
                                </b:EventTrigger>
                                <b:EventTrigger EventName="MouseLeave">
                                    <b:InvokeCommandAction Command="{Binding DataContext.SetCursorCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter=""/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                            <Grid x:Name="ShutterZone" Width="36" ClipToBounds="False" HorizontalAlignment="Right">

                                <Image x:Name="Shutter" Stretch="UniformToFill" HorizontalAlignment="Center" VerticalAlignment="Stretch" Source="{StaticResource ConcertinaShutter}" Margin="0,0,0,-8">
                                    <Image.Effect>
                                        <DropShadowEffect BlurRadius="20" ShadowDepth="-4" Opacity="1" Color="{StaticResource tint20}"/>
                                    </Image.Effect>
                                </Image>
                                <Image x:Name="Overflow" Stretch="None" HorizontalAlignment="Left" VerticalAlignment="Center" Source="{StaticResource ConcertinaShutterMore}" Margin="-20,0,0,0" Visibility="Collapsed"/>
                            </Grid>
                        </Border>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding DataContext.NumberOfRows, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="3">
                            <Setter TargetName="Shutter" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutterX3_d.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DataContext.NumberOfRows, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="4">
                            <Setter TargetName="Shutter" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutterX4_d.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsMouseOver, ElementName=PART_SizerThumb}" Value="True">
                            <Setter TargetName="Shutter" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutter_h.png"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_SizerThumb}" Value="True"/>
                                <Condition Binding="{Binding DataContext.NumberOfRows, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="2"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Shutter" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutter_h.png"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_SizerThumb}" Value="True"/>
                                <Condition Binding="{Binding DataContext.NumberOfRows, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="3"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Shutter" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutterX3_h.png"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_SizerThumb}" Value="True"/>
                                <Condition Binding="{Binding DataContext.NumberOfRows, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="4"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Shutter" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutterX4_h.png"/>
                        </MultiDataTrigger>

                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                                    <Binding Path="LastUsedColumn"/>
                                    <Binding Path="CellColumns" Converter="{StaticResource AddConverter}" ConverterParameter="1"/>
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Overflow" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=IsAnimatingFullyResizedItem, RelativeSource={RelativeSource AncestorType={x:Type ls:Concertina}}, FallbackValue=True}" Value="True">
                            <Setter TargetName="Overflow" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding HotBarType}" Value="ItemHotBar">
                            <Setter TargetName="Shutter" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_SizerThumb" Property="IsHitTestVisible" Value="False"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=IsFixedSize}" Value="True">
                            <Setter TargetName="PART_SizerThumb" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DataContext.CurrentShownDeck, RelativeSource={RelativeSource AncestorType=ls:UIWidget}, Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                            <Setter TargetName="PART_SizerThumb" Property="Visibility" Value="Collapsed"/>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard x:Name="FadeSlidersOut" Storyboard="{StaticResource FadeSlidersOutAnim}"/>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard x:Name="FadeSlidersIn" Storyboard="{StaticResource FadeSlidersInAnim}"/>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>


                <!-- ===== STYLE TRIGGERS FOR WEAPON TOGGLE ===== -->
                <Style x:Key="WeaponSetSwitchStyle" TargetType="ls:LSRadioButton">
                    <Setter Property="BoundEvent" Value="ToggleWeaponSet"/>
                    <Setter Property="VerticalAlignment" Value="Top"/>
                    <Setter Property="IsEnabled" Value="False"/>
                    <Setter Property="ToolTipService.Placement" Value="Center"/>
                    <Setter Property="ToolTipService.VerticalOffset" Value="-80"/>
                    <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
                    <Setter Property="GroupName" Value="WeaponSetSwitchGroup"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ls:LSRadioButton">
                                <Grid>
                                    <Image x:Name="bg" Source="{DynamicResource BtnWeaponsToggle}" Stretch="None"/>
                                    <Image x:Name="icon" Source="{DynamicResource WeaponSetIcon}" Stretch="None"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="bg" Property="Source" Value="{DynamicResource WeaponSetBgHover}"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter TargetName="bg" Property="Source" Value="{DynamicResource WeaponSetBgPressed}"/>
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="True">
                                        <Setter TargetName="bg" Property="Source" Value="{DynamicResource WeaponSetBgNormalActive}"/>
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsChecked" Value="True"/>
                                            <Condition Property="IsMouseOver" Value="True"/>
                                        </MultiTrigger.Conditions>
                                        <Setter TargetName="bg" Property="Source" Value="{DynamicResource WeaponSetBgHoverActive}"/>
                                    </MultiTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsChecked" Value="True"/>
                                            <Condition Property="IsPressed" Value="True"/>
                                        </MultiTrigger.Conditions>
                                        <Setter TargetName="bg" Property="Source" Value="{DynamicResource WeaponSetBgPressedActive}"/>
                                    </MultiTrigger>

                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsChecked" Value="False"/>
                                            <Condition Property="IsMouseOver" Value="True"/>
                                        </MultiTrigger.Conditions>
                                    </MultiTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsChecked" Value="False"/>
                                            <Condition Property="IsPressed" Value="True"/>
                                        </MultiTrigger.Conditions>
                                        <Setter TargetName="icon" Property="Margin" Value="0,0,0,-4"/>
                                    </MultiTrigger>
                                    <Trigger Property="IsChecked" Value="False">
                                        <Setter TargetName="icon" Property="Opacity" Value="0.8"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>

                        <!--Are Weapon Toggles Available-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BoundEvent" Value="{x:Null}"/>
                        </Trigger>

                    </Style.Triggers>
                </Style>

                <BitmapImage x:Key="FrameWeaponSlotHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/frame_weaponSlot_h.png" />

                <ControlTemplate x:Key="WeaponSlotTemplate" TargetType="Button">
                    <Grid x:Name="Root" ToolTipService.Placement="Top" ToolTipService.VerticalOffset="-60" d:DataContext="{d:DesignInstance {x:Type ls:VMEquipmentSlot}, IsDesignTimeCreatable=True}" Height="{StaticResource HotbarSlotSize}" Width="{StaticResource HotbarSlotSize}">
                        <Grid.ToolTip>
                            <ls:LSTooltip Content="{Binding DataContext.Item, ElementName=Root}" ls:TooltipExtender.Owner="{Binding Path=(ls:TooltipExtender.Owner), ElementName=WeaponSlots}"/>
                        </Grid.ToolTip>
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="MouseLeftButtonDown" >
                                <ls:LSPlaySound Sound="UI_Shared_Secondary_Press"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="MouseEnter">
                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                <b:InvokeCommandAction Command="{Binding DataContext.SetDebugUIEntityCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Item.EntityHandle}"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="MouseLeave">
                                <b:InvokeCommandAction Command="{Binding DataContext.ClearDebugUIEntityCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                        <Rectangle Width="{StaticResource HotbarAttackSlotSize}" Height="{StaticResource HotbarAttackSlotSize}" Fill="{Binding Item.Icon}"/>
                        <Image x:Name="hl" Width="{StaticResource HotbarAttackSlotSize}" Height="{StaticResource HotbarAttackSlotSize}" Stretch="Uniform" Source="{StaticResource FrameWeaponSlotHover}" Visibility="Collapsed"/>
                        <Image x:Name="StatusIcon" Source="{StaticResource IconConditionMark}" Stretch="None" HorizontalAlignment="Right" VerticalAlignment="Top" Visibility="{Binding Item.NonPermanentStatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}}" Margin="0,8,10,0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Item}" Value="{x:Null}">
                            <Setter TargetName="StatusIcon" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="hl" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <Storyboard x:Key="ShowSingleHotBar" Duration="{StaticResource SingleHotbarAnimationsDuration}">
                    <ThicknessAnimation Duration="{StaticResource SingleHotbarAnimationsDuration}" From="{StaticResource SingleHotbarHiddenMargin}" To="{StaticResource SingleHotbarMargin}" Storyboard.TargetProperty="Margin" Storyboard.TargetName="SingleHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}" To="0.0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}" To="0.0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HotbarsBehindSingleHotbar">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="ShowSingleHotBarFromLeft" Duration="{StaticResource SingleHotbarAnimationsDuration}">
                    <ThicknessAnimation Duration="{StaticResource SingleHotbarAnimationsDuration}" From="{StaticResource SingleHotbarFromLeftHiddenMargin}" To="{StaticResource SingleHotbarFromLeftMargin}" Storyboard.TargetProperty="Margin" Storyboard.TargetName="SingleHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}" To="0.0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}" To="0.0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HotbarsBehindSingleHotbar">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="ShowCustomHotBar" Duration="{StaticResource ExtraDecksResizeDuration}">
                    <ThicknessAnimation Duration="{StaticResource ExtraDecksResizeDuration}" From="{StaticResource FixedHotbarHiddenMargin}" To="{StaticResource FixedHotbarMargin}" Storyboard.TargetProperty="Margin" Storyboard.TargetName="CustomHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource ExtraDecksResizeDuration}" To="0.0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource ExtraDecksResizeDuration}" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HotbarsBehindSingleHotbar">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="ShowPassivesHotBar" Duration="{StaticResource ExtraDecksResizeDuration}">
                    <ThicknessAnimation Duration="{StaticResource ExtraDecksResizeDuration}" From="{StaticResource FixedHotbarHiddenMargin}" To="{StaticResource FixedHotbarMargin}" Storyboard.TargetProperty="Margin" Storyboard.TargetName="PassivesHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource ExtraDecksResizeDuration}" To="0.0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource ExtraDecksResizeDuration}" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HotbarsBehindSingleHotbar">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="HideSingleHotBar" Duration="{StaticResource SingleHotbarAnimationsDuration}">
                    <ThicknessAnimation Duration="{StaticResource SingleHotbarAnimationsDuration}" To="{StaticResource SingleHotbarHiddenMargin}" Storyboard.TargetProperty="Margin" Storyboard.TargetName="SingleHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HotbarsBehindSingleHotbar">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="HideSingleHotBarToLeft" Duration="{StaticResource SingleHotbarAnimationsDuration}">
                    <ThicknessAnimation Duration="{StaticResource SingleHotbarAnimationsDuration}" To="{StaticResource SingleHotbarFromLeftHiddenMargin}" Storyboard.TargetProperty="Margin" Storyboard.TargetName="SingleHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HotbarsBehindSingleHotbar">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="HideCustomHotBar" Duration="{StaticResource ExtraDecksResizeDuration}">
                    <ThicknessAnimation Duration="{StaticResource ExtraDecksResizeDuration}" To="{StaticResource FixedHotbarHiddenMargin}" Storyboard.TargetProperty="Margin" Storyboard.TargetName="CustomHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource ExtraDecksResizeDuration}" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="HidePassivesHotBar" Duration="{StaticResource ExtraDecksResizeDuration}">
                    <ThicknessAnimation Duration="{StaticResource ExtraDecksResizeDuration}" To="{StaticResource FixedHotbarHiddenMargin}" Storyboard.TargetProperty="Margin" Storyboard.TargetName="PassivesHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation  FillBehavior="Stop" Duration="{StaticResource ExtraDecksResizeDuration}" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="ShowConcertina" Duration="{StaticResource ShowConcertinaDuration}">
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource ShowConcertinaDuration}" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <BitmapImage x:Key="DefaultHotBarBtnBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_default_d.png" />
                <BitmapImage x:Key="IconRTNoArrow" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_RT_d_noArrow.png" />

                <ControlTemplate x:Key="EnterFTBTemplate" TargetType="ls:LSButton">
                    <Grid ToolTip="{StaticResource PlacementParentDCTooltip}" ToolTipService.Placement="Center" ToolTipService.VerticalOffset="-100" ToolTipService.ShowOnDisabled="True">
                        <Image x:Name="img" Source="{StaticResource DefaultHotBarBtnBg}" Stretch="None"/>
                        <Image x:Name="ico" Source="{StaticResource IconHourglass}" Stretch="None" Visibility="Visible" Margin="0,-4,0,0"/>
                        <Grid x:Name="AnimChrono" Visibility="Hidden">
                            <Image x:Name="icoAnim" Source="{StaticResource IconRTNoArrow}" Stretch="None" Margin="0,-4,0,0"/>
                            <Path x:Name="Arrow" Stretch="None" Width="88" Height="88" StrokeThickness="0" Stroke="#88000000" Fill="White" RenderTransformOrigin="0.5,0.534">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                                <Path.Data>
                                    <Geometry >M40,51 V45 L68,23 L47,51 Z</Geometry>
                                </Path.Data>
                            </Path>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_default_h.png"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_default_p.png"/>
                            <Setter TargetName="ico" Property="Margin" Value="0,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="img" Property="Source" Value="{StaticResource DefaultHotBarBtnBg}"/>
                            <Setter TargetName="ico" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="AnimChrono" Property="Visibility" Value="Visible"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="ChronoAnim">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="AnimChrono" Storyboard.TargetProperty="Opacity" RepeatBehavior="Forever">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="0.5"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.4" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="ChronoAnim"/>
                            </Trigger.ExitActions>
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard x:Name="FTBRotateAnim">
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsEnabled)">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0.0" Value="False"/>
                                            <DiscreteBooleanKeyFrame KeyTime="{StaticResource TurnTime}" Value="True"/>
                                        </BooleanAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" >
                                            <LinearDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                            <LinearDoubleKeyFrame KeyTime="{StaticResource TurnTime}" Value="360"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                        </DataTrigger>

                        <!-- When switching from a character in combat to a character in real-time, we don't want to have the 6s wait until entering FTB -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.IsSelectingCharacter, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                                <Condition Binding="{Binding DataContext.CurrentPlayer.PreviousSelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <StopStoryboard BeginStoryboardName="FTBRotateAnim"/>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>

                        <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                            <StopStoryboard BeginStoryboardName="FTBStrokeAnim1"/>
                            <StopStoryboard BeginStoryboardName="FTBRotateAnim"/>
                            <StopStoryboard BeginStoryboardName="ChronoAnim"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <BitmapImage x:Key="ButtonEndTurnScaled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_endTurn_scaled_d.png" />

                <ControlTemplate x:Key="EndTurnTemplate" TargetType="ls:LSButton">
                    <Grid HorizontalAlignment="Center" VerticalAlignment="Stretch">
                        <Image x:Name="img" Source="{StaticResource ButtonEndTurnScaled}" Stretch="None"/>
                        <Image x:Name="ico" Source="{StaticResource IconHourglassActive}" VerticalAlignment="Top" Stretch="None" RenderTransformOrigin="0.5,0.5" Margin="0,44,0,0" Visibility="Collapsed">
                            <Image.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Image.RenderTransform>
                        </Image>
                        <TextBlock x:Name="CenterTitle"  Text="{Binding Source='h917f2b48g8735g4f9fgb529ga520b53eb2ed', Converter={StaticResource TranslatedStringConverter}}" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="{StaticResource MediumFontSize}" Foreground="{StaticResource LS_extraspecialTxtColor}" TextWrapping="Wrap" MaxWidth="158" LineHeight="{StaticResource MediumFontSize}" LineStackingStrategy="BlockLineHeight"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_endTurn_scaled_h.png"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_endTurn_scaled_p.png"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_endTurn_scaled_disabled_d.png"/>
                            <Setter TargetName="ico" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_hourglass_disabled.png"/>
                            <Setter TargetName="ico" Property="VerticalAlignment" Value="Center"/>
                            <Setter TargetName="ico" Property="Margin" Value="0"/>
                            <Setter TargetName="CenterTitle" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="ico" Property="Visibility" Value="Visible"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.CanEndTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True">
                            <DataTrigger.EnterActions>
                                <StopStoryboard BeginStoryboardName="currentTurnAnim2"/>
                                <BeginStoryboard x:Name="currentTurnAnim">
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsEnabled)">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0.0" Value="True"/>
                                        </BooleanAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ico" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="360"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.CanEndTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False">
                            <DataTrigger.EnterActions>
                                <StopStoryboard BeginStoryboardName="currentTurnAnim"/>
                                <BeginStoryboard x:Name="currentTurnAnim2">
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsEnabled)">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0.0" Value="False"/>
                                        </BooleanAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="1x" Storyboard.TargetName="ico" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="180">
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ico" Storyboard.TargetProperty="Opacity" RepeatBehavior="Forever">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="0.5"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.4" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="currentTurnAnim2"/>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ico" Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.HasCancelEndTurnTimeout, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True">
                            <Setter TargetName="CenterTitle" Property="Text" Value="{Binding Source='h59defd55gea7cg4879gaa14g1ba594940649', Converter={StaticResource TranslatedStringConverter}}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard x:Name="rotateAnimBS">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ico" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="-180"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.0" Value="0">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut"/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                        </DataTrigger>
                        <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                            <StopStoryboard BeginStoryboardName="currentTurnAnim"/>
                            <StopStoryboard BeginStoryboardName="currentTurnAnim2"/>
                            <StopStoryboard BeginStoryboardName="rotateAnimBS"/>
                            <StopStoryboard BeginStoryboardName="AnimateStrokeBS1" />
                            <StopStoryboard BeginStoryboardName="AnimateStrokeBS2" />
                            <StopStoryboard BeginStoryboardName="HighlightEndTurn" />
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <Storyboard x:Key="ShowRestButtonsAnimation">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RestSubButtons" Storyboard.TargetProperty="Height">
                        <EasingDoubleKeyFrame KeyTime="{StaticResource RestButtonAnimationTime}" Value="420">
                            <EasingDoubleKeyFrame.EasingFunction>
                                <CubicEase EasingMode="EaseOut"/>
                            </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                    </DoubleAnimationUsingKeyFrames>
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="RestSubButtons" Storyboard.TargetProperty="(ls:TutorialProperties.IsAnimating)">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True"/>
                        <DiscreteBooleanKeyFrame KeyTime="{StaticResource RestButtonAnimationTime}" Value="False"/>
                    </BooleanAnimationUsingKeyFrames>
                </Storyboard>

                <Storyboard x:Key="HideRestButtonsAnimation">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RestSubButtons" Storyboard.TargetProperty="Height">
                        <EasingDoubleKeyFrame KeyTime="{StaticResource RestButtonAnimationTime}" Value="0">
                            <EasingDoubleKeyFrame.EasingFunction>
                                <CubicEase EasingMode="EaseOut"/>
                            </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                    </DoubleAnimationUsingKeyFrames>
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="RestSubButtons" Storyboard.TargetProperty="(ls:TutorialProperties.IsAnimating)">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True"/>
                        <DiscreteBooleanKeyFrame KeyTime="{StaticResource RestButtonAnimationTime}" Value="False"/>
                    </BooleanAnimationUsingKeyFrames>
                </Storyboard>

                <Style x:Key="SubMenuItemStyle" TargetType="MenuItem">
                    <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
                    <Setter Property="StaysOpenOnClick" Value="False"/>

                    <!-- Sub-menu items are supposed to be inside a Popup, so their SubmenuLayer property is filled in the Popup. 
                        Since we are not going to use a Popup because we want the subitems to be part of the visual tree, we need
                        to mark them as non-focusable; otherwise, they will try to access their SubmenuLayer property when the main
                        MenuItem loses its focus, and that property will be null so it will trigger an assert (in the best cases). -->
                    <Setter Property="Focusable" Value="False"/>
                </Style>

                <Style x:Key="HotbarGeneralDescriptionStyle" TargetType="TextBlock">
                    <Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="FontSize" Value="{StaticResource SmallFontSize}"/>
                </Style>

                <ControlTemplate x:Key="ThrowFilterToggleIconButtonTemplate" TargetType="RadioButton">
                    <Grid>
                        <Image x:Name="background" Source="{StaticResource BtnSmallRound}" Stretch="None"/>
                        <Image x:Name="icon" Source="{DynamicResource IconNormal}" Stretch="Uniform" Width="64" Height="64" Opacity="0.65"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="background" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_h.png"/>
                            <Setter TargetName="icon" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="background" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_p.png"/>
                            <Setter TargetName="icon" Property="Opacity" Value="1"/>
                            <Setter TargetName="icon" Property="Margin" Value="0,6,0,0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="icon" Property="Source" Value="{DynamicResource IconHighlight}"/>
                            <Setter TargetName="icon" Property="Opacity" Value="0.9"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="icon" Property="Source" Value="{DynamicResource IconHighlight}"/>
                            <Setter TargetName="icon" Property="Opacity" Value="1"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <Style x:Key="MainPiesStyle" TargetType="ls:LSPie">
                    <Setter Property="SweepDirection" Value="Counterclockwise"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                    <Setter Property="RenderTransform">
                        <Setter.Value>
                            <RotateTransform Angle="180" CenterX="142" CenterY="142"/>
                        </Setter.Value>
                    </Setter>
                </Style>

               
                <BitmapImage x:Key="BarBody" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_body.png" />
                <BitmapImage x:Key="SideBarBody" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_bodyextra_x2.png" />
                <BitmapImage x:Key="BarResources" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_resources.png" />
                <BitmapImage x:Key="BoxResourceBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/box_resourceBG.png" />
                <BitmapImage x:Key="BoxResource" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/box_resource_d.png" />
                <BitmapImage x:Key="BoxResourceH" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/box_resource_h.png" />
                <BitmapImage x:Key="BoxResourceDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/box_resource_disabled.png" />
                <BitmapImage x:Key="BarBottomBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_bottomBg.png" />
                <BitmapImage x:Key="BarBottom" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_bottom.png" />
                <BitmapImage x:Key="IconConcertina" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_concertina.png" />
                <BitmapImage x:Key="BtnConcertina" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_concertina_d.png" />
                <BitmapImage x:Key="BtnConcertinaActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_concertina_active_d.png" />
                <BitmapImage x:Key="BtnActiveModArrowRed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_activemod_arrowRed.png" />
                <BitmapImage x:Key="BtnActiveMod" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_activemod_d.png" />
                <BitmapImage x:Key="BarBodyPortrait" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_body_portrait.png" />
                <BitmapImage x:Key="BtnSheet" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_sheet_d.png" />
                <BitmapImage x:Key="OverlayExtraHP" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/overlay_extraHP.png" />
                <BitmapImage x:Key="OverlayExtraHPFill" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/overlay_extraHP_fill.png" />
                <BitmapImage x:Key="IconExtraHP" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_extraHP.png" />
                <BitmapImage x:Key="PaneConditions1" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/pane_conditions_1row.png" />
                <BitmapImage x:Key="PaneConditions2" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/pane_conditions_2rows.png" />
                <BitmapImage x:Key="PaneConditions" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/pane_conditions.png" />
                <BitmapImage x:Key="StatusBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/statusBG.png" />
                <BitmapImage x:Key="StatusBgFill" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/statusBG_fill.png" />
                <BitmapImage x:Key="WeaponsBarX2" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_weaponsBar_x2.png" />
                <BitmapImage x:Key="BtnWeaponsToggle" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_unselected_d.png" />
                <BitmapImage x:Key="IconDualwieldOff" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_dualwield_Off.png" />
                <BitmapImage x:Key="ShutterSlideBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutterSlide_bg.png" />
                <BitmapImage x:Key="BarBodyBtnGroup" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_body_buttonGroup.png" />
                <BitmapImage x:Key="BtnSmallDefault" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_small_default_d.png" />
                <BitmapImage x:Key="IconCamp" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_camp_d.png" />
                <BitmapImage x:Key="BtnPop" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pop_d.png" />
                <BitmapImage x:Key="IconShortRest" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_shortRest_d.png" />
                <BitmapImage x:Key="IconShortRestNode" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_shortRest_node.png" />
                <BitmapImage x:Key="IconLongRest" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_longRest_d.png" />
                <BitmapImage x:Key="LevelUPFrame" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/holder_levelupBtn.png" />
                <BitmapImage x:Key="ExitFTBBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_body_buttongGroup_scalingHolder.png" />
                <BitmapImage x:Key="ExitFTBIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_exit_d.png" />
                <BitmapImage x:Key="ExitFTBIconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_exit_h.png" />
            </ControlTemplate.Resources>

            <Grid x:Name="HotbarRoot" Opacity="1" VerticalAlignment="Bottom" HorizontalAlignment="Center" ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}"
                  Visibility="{Binding CurrentPlayer.SelectedCharacter, Converter={StaticResource NullToCollapsedConverter}}">

                <ls:LSInputBinding x:Name="LaunchJumpActionBinding" Command="{Binding LaunchDefaultActionCommand}" CommandParameter="Jump" BoundEvent="Jump"/>

                <ls:LSInputBinding x:Name="LaunchShoveActionBinding" Command="{Binding LaunchDefaultActionCommand}" CommandParameter="Shove" BoundEvent="Shove"/>

                <ls:LSInputBinding x:Name="LaunchThrowActionBinding" Command="{Binding LaunchDefaultActionCommand}" CommandParameter="Throw" BoundEvent="Throw"/>

                <ls:LSInputBinding x:Name="LaunchHideActionBinding" Command="{Binding LaunchDefaultActionCommand}" CommandParameter="Hide" BoundEvent="ToggleSneak"/>

                <!-- ================================== -->
                <!-- ========= HOTBAR CONTENT ========= -->
                <!-- ================================== -->

                <Grid x:Name="HotbarMainGrid" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,12">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>

                    <Image Grid.ColumnSpan="3" Source="{StaticResource BarBottomBg}" Margin="0,0,0,28" VerticalAlignment="Bottom" HorizontalAlignment="Center" Stretch="None" Panel.ZIndex="-1"/>
                    <Image Grid.Column="3" Source="{StaticResource HotbarDivider}" Margin="-24,0,0,72" Stretch="None" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>


                    <!-- ========= LEFT HOTBAR CONTENT ========= -->
                    <Grid Grid.Column="0" VerticalAlignment="Bottom" x:Name="LeftPart" Panel.ZIndex="1" Margin="0,0,0,16">
                        <Image Source="{StaticResource BarBodyPortrait}" Stretch="None" VerticalAlignment="Bottom"/>
                        <!--ClassBtn-->
                        <ls:LSButton x:Name="ClassIcon" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="{StaticResource ClassIconSize}" Height="{StaticResource ClassIconSize}" Margin="{StaticResource ClassIconMargin}" ToolTipService.Placement="Top">
                            <ls:LSButton.ToolTip>
                                <ls:LSTooltip IsHitTestVisible="False">
                                    <ls:LSTooltip.Style>
                                        <Style TargetType="ls:LSTooltip" BasedOn="{StaticResource {x:Type ls:LSTooltip}}">
                                            <Setter Property="Content">
                                                <Setter.Value>
                                                    <Binding Path="DataContext.CurrentPlayer.UIData.InputEvents" Converter="{StaticResource FindInputEventConverter}" ConverterParameter="ToggleInventory" ElementName="ClassIcon"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.IsMultiplayerCharacter, ElementName=ClassIcon}" Value="False"/>
                                                        <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.ExamineTarget, ElementName=ClassIcon, Converter={StaticResource NullToBoolTrueConverter}}" Value="True"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <MultiDataTrigger.Setters>
                                                        <Setter Property="Content">
                                                            <Setter.Value>
                                                                <TextBlock Text="{Binding Source='hc173e425geb02g4f20ga119g2cf1bd75643b', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" Foreground="{DynamicResource TooltipColor.Primary}"/>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </MultiDataTrigger.Setters>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ls:LSTooltip.Style>
                                </ls:LSTooltip>
                            </ls:LSButton.ToolTip>
                            <ls:LSButton.Template>
                                <ControlTemplate TargetType="ls:LSButton">
                                    <Grid>
                                        <Image x:Name="Background" Source="{StaticResource BtnSheet}" Stretch="UniformToFill"/>
                                        <Image x:Name="ClassIcon" DataContext="{Binding CurrentPlayer.SelectedCharacter.Stats.ClassList[0]}" Style="{StaticResource ClassIconHotbarStyle}" Stretch="UniformToFill" RenderTransformOrigin="0.5,0.5"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="Background" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_sheet_h.png"/>
                                            <Setter TargetName="ClassIcon" Property="Margin" Value="4"/>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter TargetName="Background" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_sheet_p.png"/>
                                            <Setter TargetName="ClassIcon" Property="Margin" Value="8"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ls:LSButton.Template>
                            <ls:LSButton.Style>
                                <Style TargetType="ls:LSButton" >
                                    <Setter Property="Command" Value="{Binding CustomEvent}"/>
                                    <Setter Property="CommandParameter" Value="ToggleCharacterPanel"/>
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.IsMultiplayerCharacter}" Value="False"/>
                                                <Condition Binding="{Binding CurrentPlayer.UIData.ExamineTarget, Converter={StaticResource NullToBoolTrueConverter}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <MultiDataTrigger.Setters>
                                                <Setter Property="Command" Value="{Binding ExamineCommand}"/>
                                                <Setter Property="CommandParameter" Value="{Binding CurrentPlayer.SelectedCharacter.EntityHandle}"/>
                                            </MultiDataTrigger.Setters>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.IsMultiplayerCharacter}" Value="False"/>
                                                <Condition Binding="{Binding CurrentPlayer.UIData.ExamineTarget, Converter={StaticResource NullToBoolTrueConverter}}" Value="False"/>
                                            </MultiDataTrigger.Conditions>
                                            <MultiDataTrigger.Setters>
                                                <Setter Property="IsEnabled" Value="False"/>
                                            </MultiDataTrigger.Setters>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ls:LSButton.Style>
                        </ls:LSButton>

                        <!--Portrait-->
                        <Grid x:Name="Portrait" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="246" Height="246" Margin="174,0,0,31">
                            <Grid.ToolTip>
                                <ls:LSTooltip Placement="Top">
                                    <StackPanel x:Name="root">
                                        <TextBlock Style="{DynamicResource TooltipTitleStyle}" ls:TextBlockFormatter.SourceText="{Binding Path=(ls:TooltipExtender.Owner).Name, ElementName=Portrait}"/>
                                        <TextBlock>
                                            <TextBlock.Style>
                                                <Style TargetType="TextBlock" BasedOn="{StaticResource TooltipSubTitleStyle}">
                                                    <Style.Triggers>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding Path=(ls:TooltipExtender.Owner).Stats.ClassList.Count, ElementName=Portrait, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                                                                <Condition Binding="{Binding Path=(ls:TooltipExtender.Owner).Stats.Level.Value, ElementName=Portrait, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="False"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="ls:TextBlockFormatter.SourceText">
                                                                <Setter.Value>
                                                                    <Binding Path="(ls:TooltipExtender.Owner).Stats.ClassList" ElementName="Portrait" Converter="{StaticResource ListConcatenationConverter}" ConverterParameter="h2519408dg5fd7g4cbcg840cg14370239edf8"/>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </MultiDataTrigger>
                                                        <DataTrigger Binding="{Binding Path=(ls:TooltipExtender.Owner).Stats.Level.Value, ElementName=Portrait, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                                                            <Setter Property="ls:TextBlockFormatter.SourceText">
                                                                <Setter.Value>
                                                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                                        <Binding Source="h5df00b79ga6acg4d9fgb8dag23340151fba7"/>
                                                                        <Binding Path="(ls:TooltipExtender.Owner).Stats.Level.Value" ElementName="Portrait"/>
                                                                        <Binding Path="(ls:TooltipExtender.Owner).Stats.ClassList" ElementName="Portrait" Converter="{StaticResource ListConcatenationConverter}" ConverterParameter="h2519408dg5fd7g4cbcg840cg14370239edf8"/>
                                                                    </MultiBinding>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>

                                        <TextBlock Style="{DynamicResource TooltipBaseTextStyle}" Foreground="{DynamicResource TooltipColor.Keyword}" Text="{Binding Source='h6f500b99gdd92g46fbg8266gdd794dfdf08e',Converter={StaticResource TranslatedStringConverter}}"/>
                                    </StackPanel>
                                </ls:LSTooltip>
                            </Grid.ToolTip>

                            <Grid Visibility="{Binding CurrentPlayer.SelectedCharacter.Stats.IsAlive, Converter={StaticResource BoolToVisibleConverter}}" DataContext="{Binding CurrentPlayer.SelectedCharacter}">
                                <Ellipse x:Name="PortraitIcon" Fill="{Binding Icon}"/>
                                <Ellipse x:Name="HealthBar" Visibility="{Binding Stats.Health.IsValid, Converter={StaticResource BoolToVisibleConverter}, ConverterParameter='True'}">
                                    <Ellipse.Fill>
                                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1" Opacity="1">
                                            <GradientStop Color="Transparent" Offset="0"/>
                                            <GradientStop Color="Transparent" Offset="{Binding Stats.Health.PercentValue, Mode=OneWay}"/>
                                            <GradientStop Color="{StaticResource HBCol1}" Offset="{Binding Stats.Health.PercentValue, Mode=OneWay}"/>
                                            <GradientStop Color="{StaticResource HBCol2}" Offset="{Binding Stats.Health.PercentValue, Mode=OneWay, Converter={StaticResource AddConverter}, ConverterParameter=0.16}"/>
                                            <GradientStop Color="{StaticResource HBCol3}" Offset="1.0"/>
                                        </LinearGradientBrush>
                                    </Ellipse.Fill>
                                </Ellipse>
                            </Grid>
                            <!--DEAD-->
                            <Grid Visibility="{Binding CurrentPlayer.SelectedCharacter.Stats.IsAlive, Converter={StaticResource BoolToCollapsedConverter}}">
                                <Ellipse x:Name="PortraitIconDead" Fill="{Binding CurrentPlayer.SelectedCharacter.Icon}"  Opacity="1">
                                    <Ellipse.Effect>
                                        <ls:SaturationEffect Saturation="0.1"/>
                                    </Ellipse.Effect>
                                </Ellipse>
                                <Ellipse x:Name="HealthBarDead" Fill="{StaticResource LS_PortraitDeadRadialColor}"/>
                            </Grid>

                            <StackPanel Orientation="Horizontal" Margin="0,0,0,16" VerticalAlignment="Bottom" HorizontalAlignment="Center" DataContext="{Binding CurrentPlayer.SelectedCharacter}">
                                <TextBlock x:Name="HealthLabel" FontSize="{StaticResource ScaledMediumFontSize}" noesis:Text.StrokeThickness="6" noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" Visibility="{Binding Stats.Health.IsValid, Converter={StaticResource BoolToVisibleConverter}}" Foreground="{StaticResource LS_PrimaryColor}">
                                    <Run Text="{Binding Stats.Health.Value, Mode=OneWay}"/><Run Text="{Binding Stats.Health.Max, Mode=OneWay, StringFormat='/{0}'}"/>
                                </TextBlock>
                                <TextBlock x:Name="TemporaryHealthAltLabel" FontSize="{StaticResource ScaledMediumFontSize}" Foreground="{StaticResource LS_tempHPColor}" noesis:Text.StrokeThickness="6" noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" Visibility="Collapsed" Text="{Binding Stats.TemporaryHealth.Value, Mode=OneWay, StringFormat='+{0}'}"/>
                            </StackPanel>
                            
                              <Control>
                                <Control.Template>
                                    <ControlTemplate TargetType="Control">
                                        <Border BorderThickness="0" Background="Transparent"/>
                                    </ControlTemplate>
                                </Control.Template>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="MouseDoubleClick" >
                                        <b:InvokeCommandAction Command="{Binding SetCameraOnGameObject}" CommandParameter="{Binding CurrentPlayer.SelectedCharacter}" />
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="MouseLeftButtonUp" >
                                        <b:InvokeCommandAction Command="{Binding SelectCharacter}" CommandParameter="{Binding CurrentPlayer.SelectedCharacter}"/>
                                        <b:InvokeCommandAction Command="{Binding PlaySelectCharacterReaction}" CommandParameter="{Binding CurrentPlayer.SelectedCharacter}"/>
                                        <b:InvokeCommandAction Command="{Binding PlaySoundEvent}" CommandParameter="UI_HUD_SelectCharacter"/>
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="MouseEnter">
                                        <b:InvokeCommandAction Command="{Binding HighlightGameobject}" CommandParameter="{Binding CurrentPlayer.SelectedCharacter}"/>
                                        <b:InvokeCommandAction Command="{Binding PlaySoundEvent}"  CommandParameter="UI_Shared_Hover"/>
                                        <b:InvokeCommandAction Command="{Binding SetDebugUIEntityCommand}" CommandParameter="{Binding CurrentPlayer.SelectedCharacter.EntityHandle}"/>
                                    </b:EventTrigger>
                                    <b:EventTrigger EventName="MouseLeave">
                                        <b:InvokeCommandAction Command="{Binding ClearHighlightGameobject}" CommandParameter="{Binding CurrentPlayer.SelectedCharacter}"/>
                                        <b:InvokeCommandAction Command="{Binding ClearDebugUIEntityCommand}"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </Control>
                        </Grid>
                        <!--Temp HP-->
                        <Grid x:Name="ExtraHP" VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="156,0,0,12" Visibility="{Binding CurrentPlayer.SelectedCharacter.Stats.TemporaryHealth.PercentValue, Converter={StaticResource CountToVisibilityConverter}}" IsHitTestVisible="False">
                            <Image Source="{StaticResource OverlayExtraHP}" Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Center" />
                            <ls:LSPie Style="{StaticResource MainPiesStyle}" Value="{Binding CurrentPlayer.SelectedCharacter.Stats.TemporaryHealth.PercentValue}">
                                <Image Source="{StaticResource OverlayExtraHPFill}" Stretch="None"/>
                            </ls:LSPie>

                            <Grid VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,-20">
                                <Image Source="{StaticResource IconExtraHP}" Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Center" />

                                <TextBlock x:Name="TemporaryHealthLabel" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="{StaticResource MediumFontSize}"  noesis:Text.StrokeThickness="6" noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" Text="{Binding CurrentPlayer.SelectedCharacter.Stats.TemporaryHealth.Value}" Margin="0,4,0,-4"/>
                            </Grid>
                        </Grid>

                        <!-- Status list -->
                        <Grid x:Name="StatusPanel" VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="-35,-180,0,180"
                              Visibility="{Binding CurrentPlayer.SelectedCharacter.StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}}">
                            <Rectangle x:Name="Gradient" Margin="10,0,10,36" IsHitTestVisible="False">
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0,1" EndPoint="0,0" >
                                        <GradientStop Color="#FF000000"/>
                                        <GradientStop Color="#00000000" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Image x:Name="PaneConditionsBg" Source="{StaticResource PaneConditions}" Stretch="None" VerticalAlignment="Bottom" HorizontalAlignment="Center" IsHitTestVisible="False"/>
                            <StackPanel VerticalAlignment="Bottom" HorizontalAlignment="Center">
                                <Grid x:Name="Overflow" Margin="80,0,0,0" Visibility="{Binding CurrentPlayer.SelectedCharacter.StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter={StaticResource StatusLimitAmount}}">
                                    <Image Source="{StaticResource OverflowNumberBg}" Stretch="None" Visibility="{Binding Path=IsChecked, ElementName=ExpandToggle, Converter={StaticResource BoolToCollapsedConverter}}" Margin="0,-8"/>
                                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="{StaticResource SmallFontSize}" Foreground="{StaticResource LS_baseTxtColor}" ls:TextBlockFormatter.SourceText="{Binding CurrentPlayer.SelectedCharacter.StatusEffects.Count, StringFormat='{}+{0}', Converter={StaticResource AddConverter}, ConverterParameter={StaticResource StatusLimitAmountInverse}}" Visibility="{Binding Path=IsChecked, ElementName=ExpandToggle, Converter={StaticResource BoolToCollapsedConverter}}"/>
                                    <ls:LSToggleButton x:Name="ExpandToggle" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,80,0">
                                        <ls:LSToggleButton.Template>
                                            <ControlTemplate TargetType="{x:Type ls:LSToggleButton}">
                                                <Grid>
                                                    <Image x:Name="Background" Source="{StaticResource BtnSmallRound}" Stretch="None"/>
                                                    <Image x:Name="Arrow" Margin="2,0,0,0" Source="{StaticResource IconDownArrow}" Stretch="None" RenderTransformOrigin="0.5, 0.5"/>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding Path=IsChecked, ElementName=ExpandToggle}" Value="False">
                                                        <Setter Property="RenderTransform" TargetName="Arrow">
                                                            <Setter.Value>
                                                                <ScaleTransform ScaleY="-1"/>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="Background" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_h.png"/>
                                                        <Setter TargetName="Arrow" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_downArrow_h.png"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </ls:LSToggleButton.Template>

                                        <ls:LSToggleButton.Style>
                                            <Style TargetType="ls:LSToggleButton">
                                                <Style.Triggers>
                                                    <!-- Auto collapse when # statuses goes below limit again -->
                                                    <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.StatusEffects.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter={StaticResource StatusLimitAmount}}" Value="False">
                                                        <Setter Property="IsChecked" Value="False"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ls:LSToggleButton.Style>
                                    </ls:LSToggleButton>
                                </Grid>
                                <ItemsControl ItemsSource="{Binding CurrentPlayer.SelectedCharacter.StatusEffects}" AlternationCount="{Binding CurrentPlayer.SelectedCharacter.StatusEffects.Count}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Disabled" MaxWidth="240" Margin="0,0,0,32">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <WrapPanel Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Center">
                                                <!-- Flip the list left/right and up/down. This also affects the items so we have to 'unflip' those individually as well -->
                                                <WrapPanel.LayoutTransform>
                                                    <ScaleTransform ScaleX="-1" ScaleY="-1"/>
                                                </WrapPanel.LayoutTransform>
                                            </WrapPanel>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>

                                    <ItemsControl.ItemContainerStyle>
                                        <Style TargetType="ContentPresenter">
                                            <Setter Property="Margin" Value="-2"/>
                                            <Setter Property="LayoutTransform">
                                                <Setter.Value>
                                                    <!-- 'Negates' the flipping of the list -->
                                                    <ScaleTransform ScaleX="-1" ScaleY="-1"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <!-- Always allow showing up to at least the limit -->
                                                <DataTrigger Binding="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource Self}, Converter={StaticResource LessThanConverter}, ConverterParameter={StaticResource StatusLimitAmount}}" Value="True">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Path=IsChecked, ElementName=ExpandToggle}" Value="True">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ItemsControl.ItemContainerStyle>

                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Grid ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Right" >
                                                <Image Source="{StaticResource StatusBg}" Stretch="None"/>
                                                <Ellipse Width="48" Height="48" VerticalAlignment="Center" HorizontalAlignment="Center" Fill="{Binding Icon}" />
                                                <ls:LSPie x:Name="Progression" Value="{Binding RemainingPercentage}" SweepDirection="Clockwise" RenderTransformOrigin="0.5 0.5">
                                                    <Image Source="{StaticResource StatusBgFill}" Stretch="UniformToFill" Width="60" Height="60" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                                </ls:LSPie>
                                                <Label VerticalAlignment="Bottom" HorizontalAlignment="Center" IsHitTestVisible="False" Content="{Binding Duration}" Margin="0,0,0,-8" Foreground="{StaticResource LS_tint100}" FontWeight="Bold" FontSize="{StaticResource SmallFontSize}" noesis:Text.Stroke="Black" noesis:Text.StrokeThickness="4" Visibility="{Binding Duration, Converter={StaticResource CountToVisibilityConverter}}"/>
                                            </Grid>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>
                        </Grid>

                    </Grid>

                    <!-- ========= CENTRAL HOTBAR CONTENT ========= -->
                    <Grid x:Name="HotbarCentre" Grid.Column="1" VerticalAlignment="Bottom" Margin="0,0,0,-16">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!--DECKAREA BAR-->
                        <StackPanel x:Name="HotbarDynamicContent" Grid.Row="1" Orientation="Horizontal">

                            <!-- WEAPONS & TOGGLES -->
                            <Grid x:Name="WeaponSlots" VerticalAlignment="Bottom" Margin="-32,-60,-20,-16" Visibility="Visible">
                                <Image x:Name="WeaponsBar" Source="{StaticResource WeaponsBarX2}" Stretch="None" VerticalAlignment="Bottom"/>
                                <Grid Margin="18,0" HorizontalAlignment="Stretch" VerticalAlignment="top">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="116"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>

                                    <Grid Grid.Row="0" Background="Transparent">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="1*"/>
                                            <ColumnDefinition Width="1*"/>
                                        </Grid.ColumnDefinitions>
                                        <!--MELEE WEAPON-->
                                        <Button x:Name="MeleeWeapon" Grid.Column="0" Template="{StaticResource WeaponSlotTemplate}" DataContext="{Binding CurrentPlayer.SelectedCharacter.Equipment.MeleeMainHand}" VerticalAlignment="Bottom" HorizontalAlignment="Center" Command="{Binding DataContext.UseMeleeWeaponCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Visibility="{Binding Visibility, ElementName=MainAttack, Converter={StaticResource InvertVisibilityConverter}, ConverterParameter='True'}">
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="Click">
                                                    <b:ChangePropertyAction TargetName="HotBar" PropertyName="Tag" Value="Left"/>
                                                    <ls:LSPlaySound Sound="UI_HUD_Hotbar_MeleeSet_Click"/>
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>
                                        </Button>
                                        <!--UNEQUIPPED-->
                                        <ls:LSButton x:Name="MainAttack" Grid.Column="0" VerticalAlignment="Bottom" HorizontalAlignment="Center" Style="{StaticResource HotBarSlotStyle}" Visibility="Collapsed"  Width="{StaticResource HotBarSlotWidth}" Height="{StaticResource HotBarSlotWidth}" DataContext="{Binding DataContext.CurrentPlayer.SelectedCharacter.MainMeleeSpell, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                     Content="{Binding DataContext.CurrentPlayer.SelectedCharacter.MainMeleeSpell, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                        </ls:LSButton>
                                        <!--RANGED WEAPON-->
                                        <Button x:Name="RangedWeapon" Grid.Column="1" Template="{StaticResource WeaponSlotTemplate}" DataContext="{Binding CurrentPlayer.SelectedCharacter.Equipment.RangedMainHand}" VerticalAlignment="Bottom" HorizontalAlignment="Center" Command="{Binding DataContext.UseRangedWeaponCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="Click">
                                                    <b:ChangePropertyAction TargetName="HotBar" PropertyName="Tag" Value="Left"/>
                                                    <ls:LSPlaySound Sound="UI_HUD_Hotbar_RangedSet_Click"/>
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>
                                        </Button>
                                    </Grid>

                                    <StackPanel Orientation="Horizontal" Grid.Row="1" HorizontalAlignment="Center" Margin="0,20,0,0">
                                        <!--MELEE TOGGLE-->
                                        <ls:LSRadioButton x:Name="MeleeToggle" HorizontalContentAlignment="Left" SoundID="UI_HUD_Hotbar_MeleeSet"
                                              DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='ToggleWeaponSet'}"
                                              IsChecked="True"
                                              Style="{StaticResource WeaponSetSwitchStyle}" >
                                            <ls:LSRadioButton.ToolTip>
                                                <ls:LSTooltip Content="{Binding ElementName=MeleeToggle,Path=DataContext}">
                                                    <ls:LSTooltip.ContentTemplate>
                                                        <DataTemplate>
                                                            <TextBlock Style="{StaticResource TooltipBaseTextStyle}">
													<Run Text="{Binding Source=h434608f0g100fg4af9ga58dg6d8539a9be89, Converter={StaticResource TranslatedStringConverter}}"/>
													<Run Text=" ["/>
													<Run Foreground="{DynamicResource LS_accent100TxtColor}" Text="{Binding Shortcut}"/>
													<Run Text="]"/>
                                                            </TextBlock>
                                                        </DataTemplate>
                                                    </ls:LSTooltip.ContentTemplate>
                                                </ls:LSTooltip>
                                            </ls:LSRadioButton.ToolTip>
                                            <ls:LSRadioButton.Resources>
                                                <BitmapImage x:Key="WeaponSetIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_melee.png"/>

                                                <BitmapImage x:Key="WeaponSetBgHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_unselected_h.png"/>
                                                <BitmapImage x:Key="WeaponSetBgPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_unselected_p.png"/>

                                                <BitmapImage x:Key="WeaponSetBgNormalActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_selected.png"/>
                                                <BitmapImage x:Key="WeaponSetBgHoverActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_selected.png"/>
                                                <BitmapImage x:Key="WeaponSetBgPressedActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_selected.png"/>

                                                <TextBlock x:Key="WeaponSetTooltipContent" Style="{StaticResource TooltipBaseTextStyle}">
                                        <Run Text="{Binding Source=h434608f0g100fg4af9ga58dg6d8539a9be89, Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Run Text=" ["/>
                                        <Run Foreground="{DynamicResource LS_accent100TxtColor}" Text="{Binding Shortcut}" DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents,  RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},  Converter={StaticResource FindInputEventConverter},  ConverterParameter='ToggleWeaponSet'}"/>
                                        <Run Text="]"/>
                                                </TextBlock>
                                            </ls:LSRadioButton.Resources>
                                        </ls:LSRadioButton>

                                        <!--RANGED TOGGLE-->
                                        <ls:LSRadioButton x:Name="RangedToggle" HorizontalContentAlignment="Right" SoundID="UI_HUD_Hotbar_RangedSet" HorizontalAlignment="Right"
                                              DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='ToggleWeaponSet'}"
                                              Style="{StaticResource WeaponSetSwitchStyle}" >
                                            <ls:LSRadioButton.ToolTip>
                                                <ls:LSTooltip Content="{Binding ElementName=RangedToggle,Path=DataContext}">
                                                    <ls:LSTooltip.ContentTemplate>
                                                        <DataTemplate>
                                                            <TextBlock Style="{StaticResource TooltipBaseTextStyle}">
													<Run Text="{Binding Source=h1e22d5f2gf22eg43bfg801eg912372d7e23f, Converter={StaticResource TranslatedStringConverter}}"/>
													<Run Text=" ["/>
													<Run Foreground="{DynamicResource LS_accent100TxtColor}" Text="{Binding Shortcut}"/>
													<Run Text="]"/>
                                                            </TextBlock>
                                                        </DataTemplate>
                                                    </ls:LSTooltip.ContentTemplate>
                                                </ls:LSTooltip>
                                            </ls:LSRadioButton.ToolTip>
                                            <ls:LSRadioButton.Resources>
                                                <BitmapImage x:Key="WeaponSetIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_ranged.png"/>
                                                <BitmapImage x:Key="WeaponSetIconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_ranged_disabled.png"/>

                                                <BitmapImage x:Key="WeaponSetBgHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_unselected_h.png"/>
                                                <BitmapImage x:Key="WeaponSetBgPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_unselected_p.png"/>

                                                <BitmapImage x:Key="WeaponSetBgNormalActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_selected.png"/>
                                                <BitmapImage x:Key="WeaponSetBgHoverActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_selected.png"/>
                                                <BitmapImage x:Key="WeaponSetBgPressedActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_selected.png"/>

                                                <TextBlock x:Key="WeaponSetTooltipContent" Style="{StaticResource TooltipBaseTextStyle}">
                                    <Run Text="{Binding Source=h1e22d5f2gf22eg43bfg801eg912372d7e23f, Converter={StaticResource TranslatedStringConverter}}"/>
                                    <Run Text=" ["/>
                                    <Run Foreground="{DynamicResource LS_accent100TxtColor}" Text="{Binding Shortcut}" DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents,  RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},  Converter={StaticResource FindInputEventConverter},  ConverterParameter='ToggleWeaponSet'}"/>
                                    <Run Text="]"/>
                                                </TextBlock>
                                            </ls:LSRadioButton.Resources>
                                        </ls:LSRadioButton>

                                    </StackPanel>

                                    <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,8,0,-40" VerticalAlignment="Top">

                                        <!--DUAL WIELD-->
                                        <ls:LSToggleButton IsEnabled="{Binding DataContext.CurrentPlayer.SelectedCharacter.IsDualWieldingAllowed, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
                                     Command="{Binding DataContext.ToggleDualWieldingCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
                                     DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='ToggleDualWielding'}"
                                     BoundEvent="ToggleDualWielding">
                                            <ls:LSToggleButton.Template>
                                                <ControlTemplate TargetType="ls:LSToggleButton">
                                                    <Grid ToolTip="{StaticResource ManagedTooltip}" HorizontalAlignment="Center" ToolTipService.Placement="Center" ToolTipService.VerticalOffset="-120" ToolTipService.ShowOnDisabled="True">
                                                        <Image x:Name="bg" Source="{StaticResource BtnWeaponsToggle}" Stretch="None"/>
                                                        <Image x:Name="icon" Source="{StaticResource IconDualwieldOff}" Stretch="None"/>
                                                    </Grid>
                                                    <ControlTemplate.Triggers>

                                                        <DataTrigger Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.IsDualWieldingToggledOn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True">
                                                            <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_dualwield_On.png"/>
                                                            <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_selected.png"/>
                                                        </DataTrigger>

                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_unselected_h.png"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_unselected_p.png"/>
                                                            <Setter TargetName="icon" Property="Margin" Value="0,2,0,-2"/>
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_disabled.png"/>
                                                        </Trigger>

                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.IsDualWieldingToggledOn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <MultiDataTrigger.Setters>
                                                                <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_dualwield_On_disabled.png"/>
                                                            </MultiDataTrigger.Setters>
                                                        </MultiDataTrigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.IsDualWieldingToggledOn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <MultiDataTrigger.Setters>
                                                                <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_dualwield_Off_disabled.png"/>
                                                            </MultiDataTrigger.Setters>
                                                        </MultiDataTrigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </ls:LSToggleButton.Template>
                                        </ls:LSToggleButton>

                                        <!-- Search inner button -->
                                        <ls:LSToggleButton x:Name="LightSourceToggle" Margin="2,0" Command="{Binding SwapLightSourceCommand}" Template="{StaticResource ToggleIconButtonTemplate}"
                                    IsEnabled="{Binding CurrentPlayer.SelectedCharacter.Equipment.LightSource.Item, Converter={StaticResource NullToBoolFalseConverter}}" ToolTipService.Placement="Center" ToolTipService.VerticalOffset="-120" ToolTipService.ShowOnDisabled="True" >
                                            <ls:LSToggleButton.Resources>
                                                <ImageSource x:Key="ButtonUncheckedNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_unselected_d.png</ImageSource>
                                                <ImageSource x:Key="ButtonUncheckedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_unselected_h.png</ImageSource>
                                                <ImageSource x:Key="ButtonUncheckedPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_unselected_p.png</ImageSource>
                                                <ImageSource x:Key="ButtonUncheckedDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_disabled.png</ImageSource>
                                                <ImageSource x:Key="ButtonCheckedNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_selected.png</ImageSource>
                                                <ImageSource x:Key="ButtonCheckedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_unselected_h.png</ImageSource>
                                                <ImageSource x:Key="ButtonCheckedPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_unselected_p.png</ImageSource>
                                                <ImageSource x:Key="ButtonCheckedDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_disabled.png</ImageSource>
                                                <ImageSource x:Key="IconUncheckedNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_torch_d.png</ImageSource>
                                                <ImageSource x:Key="IconUncheckedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_torch_h.png</ImageSource>
                                                <ImageSource x:Key="IconUncheckedPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_torch_h.png</ImageSource>
                                                <ImageSource x:Key="IconUncheckedDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_torch_disabled.png</ImageSource>
                                                <ImageSource x:Key="IconCheckedNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_torch_d.png</ImageSource>
                                                <ImageSource x:Key="IconCheckedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_torch_h.png</ImageSource>
                                                <ImageSource x:Key="IconCheckedPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_torch_h.png</ImageSource>
                                                <ImageSource x:Key="IconCheckedDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_torch_disabled.png</ImageSource>
                                                <System:Double x:Key="IconWidth">36</System:Double>
                                                <System:Double x:Key="IconHeight">36</System:Double>
                                            </ls:LSToggleButton.Resources>
                                            <ls:LSToggleButton.ToolTip>
                                                <ls:LSTooltip IsHitTestVisible="False">
                                                    <TextBlock Text="{Binding Source='h2e31637bgc0b9g498cg86fbg63290f36759d', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
                                                </ls:LSTooltip>
                                            </ls:LSToggleButton.ToolTip>
                                        </ls:LSToggleButton>
                                    </StackPanel>
                                    <Grid.Effect>
                                        <DropShadowEffect BlurRadius="5" ShadowDepth="1" Opacity="1" Color="{StaticResource tint00}"/>
                                    </Grid.Effect>
                                </Grid>
                            </Grid>

                            <!-- HOTBAR CENTRAL DECK AREA -->
                            <ls:LSNineSliceImage x:Name="HotbarsBg" ImageSource="{StaticResource BarBody}" Slices="100,100" VerticalAlignment="Bottom" Padding="0,0,0,0" >

                                <!--MAIN DECK-->
                                <Border x:Name="MainBars" Width="{StaticResource DeckWidth}" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="52,26,36,16">

                                    <!--ls:AttachedProperties.InheritedTag has the AutoIndex property for internal LSGrids-->
                                    <Grid x:Name="MainContent">
                                        <Grid.Resources>
                                            <Storyboard x:Key="TimeoutInputStoryboard">
                                                <BooleanAnimationUsingKeyFrames Storyboard.TargetName="Concertina" Storyboard.TargetProperty="IsEnabled">
                                                    <DiscreteBooleanKeyFrame KeyTime="0:0:0.0" Value="False"/>
                                                    <DiscreteBooleanKeyFrame KeyTime="0:0:0.3" Value="True" />
                                                </BooleanAnimationUsingKeyFrames>

                                                <BooleanAnimationUsingKeyFrames Storyboard.TargetName="CustomHotBar" Storyboard.TargetProperty="IsEnabled">
                                                    <DiscreteBooleanKeyFrame KeyTime="0:0:0.0" Value="False"/>
                                                    <DiscreteBooleanKeyFrame KeyTime="0:0:0.3" Value="True" />
                                                </BooleanAnimationUsingKeyFrames>

                                                <BooleanAnimationUsingKeyFrames Storyboard.TargetName="InputCooldown" Storyboard.TargetProperty="IsEnabled">
                                                    <DiscreteBooleanKeyFrame KeyTime="0:0:0.0" Value="False"/>
                                                    <DiscreteBooleanKeyFrame KeyTime="0:0:0.3" Value="True" />
                                                </BooleanAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </Grid.Resources>
                                        <Image x:Name="ShutterSlideRail" Margin="-12,0,-12,-2" Source="{StaticResource ShutterSlideBg}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom"/>

                                        <ls:LSInputBinding x:Name="InputCooldown" AnyKey="True" PlayerId="{Binding CurrentPlayer.PlayerId}" EatInput="False">
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="LSInputBindingPressed">
                                                    <b:ControlStoryboardAction Storyboard="{StaticResource TimeoutInputStoryboard}"/>
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>
                                        </ls:LSInputBinding>

                                        <!--CONCERTINA-->
                                        <ls:Concertina x:Name="Concertina" HorizontalAlignment="Stretch" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.HotBars}"
                                           AlternationCount="{Binding CurrentPlayer.SelectedCharacter.HotBars.Count}" AllowDrop="True"
                                           ItemTemplate="{StaticResource HotBarTemplate}" ls:AttachedProperties.InheritedTag="{StaticResource FalseValue}"
                                           ColumnWidth="{StaticResource HotbarSlotSize}"
                                           StopDragAnimationDuration="{StaticResource StopDragDuration}" ResizeFullDuration="{StaticResource DeckResizeDuration}"
                                           FullyResizedItem="{Binding CurrentShownDeck}" Opacity="1">
                                            <ls:Concertina.Resources>
                                                <ControlTemplate x:Key="ItemsControlDeckTemplate" TargetType="ListBox">
                                                    <Border VerticalAlignment="Bottom" x:Name="BorderC">
                                                        <Border.OpacityMask>
                                                            <LinearGradientBrush MappingMode="Absolute">
                                                                <LinearGradientBrush.StartPoint>
                                                                    <MultiBinding Converter="{StaticResource NumbersToPointConverter}">
                                                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}" Converter="{StaticResource AddConverter}" ConverterParameter="-10"/>
                                                                        <Binding Source="0"/>
                                                                    </MultiBinding>
                                                                </LinearGradientBrush.StartPoint>
                                                                <LinearGradientBrush.EndPoint>
                                                                    <MultiBinding Converter="{StaticResource NumbersToPointConverter}">
                                                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}" Converter="{StaticResource AddConverter}" ConverterParameter="10"/>
                                                                        <Binding Source="0"/>
                                                                    </MultiBinding>
                                                                </LinearGradientBrush.EndPoint>
                                                                <GradientStop Color="Black" Offset="0"/>
                                                                <GradientStop Color="Transparent" Offset="1"/>
                                                            </LinearGradientBrush>
                                                        </Border.OpacityMask>

                                                        <ScrollViewer x:Name="ContainerScroller" Template="{StaticResource NoForcedStyleScrollViewerTemplate}" ls:ScrollViewerHelper.MouseWheelScrollsHorizontally="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Focusable="False" VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Disabled"  CanContentScroll="{Binding CellColumns, Converter={StaticResource GreaterThanConverter}, ConverterParameter={StaticResource MaxDeckColumns}}">
                                                            <AdornerDecorator x:Name="DeckAdorner" Margin="-50,-50,-20,-50" ClipToBounds="True">
                                                                <ItemsPresenter Margin="50,50,20,50"/>
                                                            </AdornerDecorator>
                                                        </ScrollViewer>
                                                    </Border>

                                                    <ControlTemplate.Triggers>
                                                        <DataTrigger Binding="{Binding Tag,RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="HideScrollbar">
                                                            <Setter TargetName="ContainerScroller" Property="HorizontalScrollBarVisibility" Value="Disabled"/>
                                                        </DataTrigger>

                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding DataContext.CurrentShownDeck, RelativeSource={RelativeSource AncestorType=ls:UIWidget}, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                                                                <Condition Binding="{Binding Path=IsAnimatingFullyResizedItem, RelativeSource={RelativeSource AncestorType={x:Type ls:Concertina}}, FallbackValue=True}" Value="False"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter TargetName="ContainerScroller" Property="HorizontalScrollBarVisibility" Value="Auto"/>
                                                            <Setter TargetName="ContainerScroller" Property="Margin" Value="0,0,0,-28"/>
                                                        </MultiDataTrigger>

                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding Path=FullyResizedItem, RelativeSource={RelativeSource AncestorType=ls:Concertina}, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                                                                <Condition Value="False">
                                                                    <Condition.Binding>
                                                                        <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                            <Binding Path="FullyResizedItem" RelativeSource="{RelativeSource AncestorType=ls:Concertina}"/>
                                                                            <Binding Path="." />
                                                                        </MultiBinding>
                                                                    </Condition.Binding>
                                                                </Condition>
                                                            </MultiDataTrigger.Conditions>
                                                            <MultiDataTrigger.EnterActions>
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetName="DeckAdorner" Storyboard.TargetProperty="Opacity" To="0.0" BeginTime="0:0:0.2" Duration="{StaticResource ExtraDecksResizeDuration}">
                                                                            <DoubleAnimation.EasingFunction>
                                                                                <CubicEase EasingMode="EaseOut"/>
                                                                            </DoubleAnimation.EasingFunction>
                                                                        </DoubleAnimation>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </MultiDataTrigger.EnterActions>
                                                            <MultiDataTrigger.ExitActions>
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetName="DeckAdorner" Storyboard.TargetProperty="Opacity" To="1" BeginTime="0:0:0.0" Duration="{StaticResource ExtraDecksResizeDuration}">
                                                                            <DoubleAnimation.EasingFunction>
                                                                                <CubicEase EasingMode="EaseOut"/>
                                                                            </DoubleAnimation.EasingFunction>
                                                                        </DoubleAnimation>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </MultiDataTrigger.ExitActions>
                                                        </MultiDataTrigger>
                                                        <DataTrigger Binding="{Binding ActualWidth, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource LessThanConverter}, ConverterParameter=10}" Value="True">
                                                            <DataTrigger.EnterActions>
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetName="DeckAdorner" Storyboard.TargetProperty="Opacity" To="0.0" BeginTime="0:0:0" Duration="0:0:0.2">
                                                                            <DoubleAnimation.EasingFunction>
                                                                                <CubicEase EasingMode="EaseOut"/>
                                                                            </DoubleAnimation.EasingFunction>
                                                                        </DoubleAnimation>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </DataTrigger.EnterActions>
                                                            <DataTrigger.ExitActions>
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetName="DeckAdorner" Storyboard.TargetProperty="Opacity"  To="1" BeginTime="0:0:0" Duration="0:0:0.1">
                                                                            <DoubleAnimation.EasingFunction>
                                                                                <CubicEase EasingMode="EaseOut"/>
                                                                            </DoubleAnimation.EasingFunction>
                                                                        </DoubleAnimation>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </DataTrigger.ExitActions>
                                                        </DataTrigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </ls:Concertina.Resources>
                                            <ls:Concertina.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Orientation="Horizontal"/>
                                                </ItemsPanelTemplate>
                                            </ls:Concertina.ItemsPanel>
                                            <ls:Concertina.ItemContainerStyle>
                                                <Style TargetType="ls:ConcertinaItem">
                                                    <Setter Property="SavedWidth" Value="{Binding SavedCellColumns, Mode=OneWay, Converter={StaticResource MultiplierConverter}, ConverterParameter={StaticResource HotbarSlotSize}}"/>
                                                    <Setter Property="Template" Value="{StaticResource HotbarItemTemplate}"/>
                                                    <Setter Property="Margin" Value="0,0,0,12"/>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                    <Setter Property="noesis:StyleInteraction.Triggers">
                                                        <Setter.Value>
                                                            <noesis:StyleTriggerCollection>
                                                                <b:EventTrigger EventName="DragStopFinished">
                                                                    <b:InvokeCommandAction Command="{Binding DataContext.SaveColumnsCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                                                        <b:InvokeCommandAction.CommandParameter>
                                                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                                                <Binding Path="ActualWidth" Converter="{StaticResource DivideAndRoundConverter}" RelativeSource="{RelativeSource AncestorType=ls:ConcertinaItem}" ConverterParameter="{StaticResource HotbarSlotSize}" />
                                                                                <Binding Path="."/>
                                                                            </MultiBinding>
                                                                        </b:InvokeCommandAction.CommandParameter>
                                                                    </b:InvokeCommandAction>
                                                                </b:EventTrigger>
                                                                <b:EventTrigger EventName="ResizeFinished">
                                                                    <b:InvokeCommandAction Command="{Binding DataContext.SetColumnsCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                                                        <b:InvokeCommandAction.CommandParameter>
                                                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                                                <Binding Path="ActualWidth" Converter="{StaticResource DivideAndRoundConverter}" RelativeSource="{RelativeSource AncestorType=ls:ConcertinaItem}" ConverterParameter="{StaticResource HotbarSlotSize}" />
                                                                                <Binding Path="."/>
                                                                            </MultiBinding>
                                                                        </b:InvokeCommandAction.CommandParameter>
                                                                    </b:InvokeCommandAction>
                                                                </b:EventTrigger>
                                                                <b:PropertyChangedTrigger Binding="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ls:ConcertinaItem}}}">
                                                                    <b:Interaction.Behaviors>
                                                                        <b:ConditionBehavior>
                                                                            <b:ConditionalExpression>
                                                                                <b:ComparisonCondition LeftOperand="{Binding DataContext.CurrentPlayer.IsSelectingCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="True"/>
                                                                            </b:ConditionalExpression>
                                                                        </b:ConditionBehavior>
                                                                    </b:Interaction.Behaviors>
                                                                    <b:InvokeCommandAction Command="{Binding DataContext.SetColumnsCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                                                        <b:InvokeCommandAction.CommandParameter>
                                                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                                                <Binding Path="ActualWidth" Converter="{StaticResource DivideAndRoundConverter}" RelativeSource="{RelativeSource AncestorType=ls:ConcertinaItem}" ConverterParameter="{StaticResource HotbarSlotSize}" />
                                                                                <Binding Path="."/>
                                                                            </MultiBinding>
                                                                        </b:InvokeCommandAction.CommandParameter>
                                                                    </b:InvokeCommandAction>
                                                                </b:PropertyChangedTrigger>
                                                            </noesis:StyleTriggerCollection>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding ControllerType}" Value="Controller">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </DataTrigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.IsShapeShifted, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                                                <Condition Binding="{Binding HotBarType}" Value="ClassHotBar"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </MultiDataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ls:Concertina.ItemContainerStyle>
                                        </ls:Concertina>
                                        <!--EXTRA DECKS-->
                                        <AdornerDecorator Margin="-40,-40,-40,0" ClipToBounds="True">
                                            <Grid Margin="40,40,40,0">
                                                <AdornerDecorator x:Name="HotbarsBehindSingleHotbar" ClipToBounds="True"   Margin="-40,-40,-40, 0">
                                                    <Grid Margin="40,40,40,0">
                                                        <ContentControl x:Name="PassivesHotBar" Background="#30000000" HorizontalAlignment="Stretch" VerticalAlignment="Top" Tag="HideScrollbar" Margin="{StaticResource FixedHotbarHiddenMargin}" ContentTemplate="{StaticResource HotBarTemplate}" Height="{Binding ActualHeight, ElementName=Concertina, Converter={StaticResource AddConverter}, ConverterParameter=-14}" Content="{Binding CurrentPlayer.SelectedCharacter.PassivesHotBar}" Visibility="{Binding IsShowingPassivesDeck, Converter={StaticResource BoolToVisibleConverter}}" ls:AttachedProperties.InheritedTag="{StaticResource FalseValue}" AllowDrop="False"/>

                                                        <ContentControl x:Name="CustomHotBar" Background="{x:Null}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Tag="HideScrollbar" Margin="{StaticResource FixedHotbarHiddenMargin}" ContentTemplate="{StaticResource HotBarTemplate}" Height="{Binding ActualHeight, ElementName=Concertina, Converter={StaticResource AddConverter}, ConverterParameter=-14}" Content="{Binding CurrentPlayer.SelectedCharacter.CustomHotBar}" Visibility="{Binding IsShowingCustomDeck, Converter={StaticResource BoolToVisibleConverter}}" ls:AttachedProperties.InheritedTag="{StaticResource FalseValue}" AllowDrop="True"/>
                                                    </Grid>
                                                </AdornerDecorator>
                                                <Border ClipToBounds="True" >
                                                    <ContentControl x:Name="SummonHotBar" Background="{x:Null}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Tag="HideScrollbar" Margin="{StaticResource FixedHotbarMargin}" ContentTemplate="{StaticResource HotBarTemplate}" Height="{Binding ActualHeight, ElementName=Concertina, Converter={StaticResource AddConverter}, ConverterParameter=-14}" Content="{Binding SummonHotBar}" Visibility="{Binding SummonHotBar.SlotList.Count, Converter={StaticResource CountToVisibilityConverter}}" ls:AttachedProperties.InheritedTag="{StaticResource TrueValue}" AllowDrop="False"/>
                                                </Border>
                                                <Border ClipToBounds="True" >
                                                    <ContentControl x:Name="SingleHotBar" Background="{x:Null}"  HorizontalAlignment="Stretch" VerticalAlignment="Top" ContentTemplate="{StaticResource HotBarTemplate}" Height="{Binding ActualHeight, ElementName=Concertina, Converter={StaticResource AddConverter}, ConverterParameter=-14}"
                                                            Content="{Binding SingleHotBar}" Visibility="{Binding CurrentSingleHotbarFilter, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}"
                                                            ls:AttachedProperties.InheritedTag="{StaticResource TrueValue}" AllowDrop="False"/>
                                                </Border>
                                            </Grid>
                                        </AdornerDecorator>

                                        <!--MULTI TARGET VALIDATION-->
                                        <Grid x:Name="MultiTargetDashContainer" Visibility="Collapsed" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,24,24">
                                            <Grid.Resources>
                                                <BitmapImage x:Key="ExtraTargetRadialBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/extraTarget_radialBg.png" />
                                                <BitmapImage x:Key="ExtraTargetBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/extraTarget_bg.png" />
                                            </Grid.Resources>

                                            <Image Source="{StaticResource ExtraTargetBg}" Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Right"/>

                                            <ls:LSButton x:Name="ForceCastButton" IsEnabled="{Binding CurrentPlayer.UIData.ActiveTask.CanForceCast}" Command="{Binding Path=ForceCastCommand}" ToolTipService.ShowOnDisabled="True" HorizontalAlignment="Right" Margin="0,0,2,0">
                                                <ls:LSButton.ToolTip>
                                                    <ls:LSTooltip IsHitTestVisible="False" Placement="Center" VerticalOffset="-126">
                                                        <StackPanel>
                                                            <TextBlock x:Name="Title" Style="{StaticResource TooltipTitleStyle}" Margin="{StaticResource TitleWithoutSubtitleMargin}" Text="{Binding Source='h2bb01606gdea8g4ae9gbab7ge50b79a088dc', Converter={StaticResource TranslatedStringConverter}}"/>
                                                            <TextBlock Style="{StaticResource TooltipDefaultTextStyle}" Text="{Binding Source='h51aabbb7ga214g41e0ga817gcf00d25250d7', Converter={StaticResource TranslatedStringConverter}}" TextWrapping="Wrap" />
                                                        </StackPanel>
                                                    </ls:LSTooltip>
                                                </ls:LSButton.ToolTip>
                                                <ls:LSButton.Template>
                                                    <ControlTemplate TargetType="Button">
                                                        <ControlTemplate.Resources>
                                                            <BitmapImage x:Key="ButtonNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/box_resource_ready.png" />
                                                            <BitmapImage x:Key="ButtonIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_tick_d.png"/>
                                                        </ControlTemplate.Resources>
                                                        <Grid>
                                                            <Image x:Name="bg" Source="{StaticResource ButtonNormal}" Stretch="Uniform" Width="80">
                                                                <Image.Effect>
                                                                    <DropShadowEffect x:Name="glow" BlurRadius="20" ShadowDepth="0" Opacity="1" Color="{StaticResource bonusColor}"/>
                                                                </Image.Effect>
                                                            </Image>
                                                            <Image x:Name="icon" Source="{StaticResource ButtonIcon}" Stretch="None" Opacity="0.9"/>
                                                        </Grid>

                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/box_resource_ready.png"/>
                                                                <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_tick_h.png"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/box_resource_ready.png"/>
                                                                <Setter TargetName="bg" Property="Margin" Value="0,2,0,-2"/>
                                                                <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_tick_h.png"/>
                                                                <Setter TargetName="icon" Property="Margin" Value="0,2,0,-2"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/box_resource_disabled.png"/>
                                                                <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_tick_disabled.png"/>
                                                                <Setter TargetName="bg" Property="Effect" >
                                                                    <Setter.Value>
                                                                        <DropShadowEffect Color="{StaticResource darkRed}" />
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </ls:LSButton.Template>
                                            </ls:LSButton>

                                            <Grid HorizontalAlignment="Right" Margin="0,0,150,0">
                                                <Grid.Resources>
                                                    <Style x:Key="CursorDashPathStyle" TargetType="Path">
                                                        <Setter Property="StrokeThickness" Value="6"/>
                                                        <Setter Property="noesis:Element.PPAAIn" Value="0.3"/>
                                                        <Setter Property="noesis:Element.PPAAOut" Value="2.0"/>
                                                        <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor"/>
                                                        <Setter Property="UseLayoutRounding" Value="True"/>
                                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                        <Setter Property="Width" Value="120"/>
                                                        <Setter Property="Height" Value="120"/>
                                                        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                                                        <Setter Property="Data">
                                                            <Setter.Value>
                                                                <EllipseGeometry RadiusX="50" RadiusY="50" Center="60,60"/>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>

                                                    <Style x:Key="CursorDashTextStyle" TargetType="TextBlock">
                                                        <Setter Property="FontSize" Value="{StaticResource ScaledLargeFontSize}"/>
                                                        <Setter Property="Foreground" Value="{StaticResource LS_extraspecialTxtColor}"/>
                                                        <Setter Property="HorizontalAlignment" Value="Center"/>
                                                        <Setter Property="VerticalAlignment" Value="Center"/>
                                                        <Setter Property="FontWeight" Value="Bold"/>
                                                    </Style>

                                                    <Style x:Key="PieStyle" BasedOn="{StaticResource CursorDashPathStyle}"/>
                                                    <System:Double x:Key="BaseColorOpacity">1</System:Double>
                                                    <SolidColorBrush x:Key="BaseColor" Color="{Binding Source={StaticResource LS_HotbarTargetRadialBaseColor}, Path=Color}"/>
                                                    <SolidColorBrush x:Key="HighlightColor" Color="{Binding Source={StaticResource LS_HotbarTargetRadialHighlightColor}, Path=Color}"/>
                                                    <SolidColorBrush x:Key="GlowColor" Color="{Binding Source={StaticResource LS_HotbarTargetRadialGlowColor}, Path=Color}"/>
                                                </Grid.Resources>

                                                <Image Source="{StaticResource ExtraTargetRadialBg}" Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Center"/>

                                                <Control x:Name="InnerHitPointsDash" HorizontalAlignment="Center" VerticalAlignment="Center" Template="{StaticResource SimplifiedCursorDashTemplate}" DataContext="{Binding CurrentPlayer.UIData.ActiveTask.HPTargetValues}" Visibility="{Binding DataContext, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToCollapsedConverter}}">
                                                    <Control.Resources>
                                                        <System:Double x:Key="RelativeSegmentLength">0.75</System:Double>
                                                    </Control.Resources>
                                                </Control>

                                                <TextBlock Style="{StaticResource CursorDashTextStyle}" Text="{Binding CurrentPlayer.UIData.ActiveTask.HPTargetValues.Remaining}" Visibility="{Binding Visibility, ElementName=InnerHitPointsDash}"/>

                                                <Control x:Name="InnerProjectilesDash" HorizontalAlignment="Center" VerticalAlignment="Center" Template="{StaticResource SimplifiedCursorDashTemplate}" DataContext="{Binding CurrentPlayer.UIData.ActiveTask.TargetValues}" Visibility="{Binding DataContext, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToCollapsedConverter}}">
                                                    <Control.Resources>
                                                        <System:Double x:Key="RelativeSegmentLength">0.9</System:Double>
                                                    </Control.Resources>
                                                </Control>

                                                <TextBlock Style="{StaticResource CursorDashTextStyle}" Text="{Binding CurrentPlayer.UIData.ActiveTask.TargetValues.Remaining, Converter={StaticResource AddConverter}, ConverterParameter=1}" Visibility="{Binding Visibility, ElementName=InnerProjectilesDash}"/>
                                            </Grid>

                                            <TextBlock x:Name="MultiTargetPropertyName" FontSize="{StaticResource ScaledSmallFontSize}" Foreground="{StaticResource LS_extraspecialTxtColor}" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,28,94,-28" Width="234" TextAlignment="Center" FontStyle="Italic"/>
                                        </Grid>
                                    </Grid>
                                </Border>

                            </ls:LSNineSliceImage>

                            <!-- FIXED SIDE BAR -->
                            <ls:LSNineSliceImage x:Name="FixedSideBar" ImageSource="{StaticResource SideBarBody}" Slices="120,100" VerticalAlignment="Bottom" Visibility="{Binding CurrentPlayer.SelectedCharacter.FixedSideBar.SlotList.Count, Converter={StaticResource CountToVisibilityConverter}}" ls:TutorialProperties.TargetID="TUT_Metamagic" ls:TutorialProperties.Padding="0,0,0,6" ls:TutorialProperties.ModalType="Bottom" Height="{Binding ElementName=HotbarsBg, Path=ActualHeight}" HorizontalAlignment="Left" Margin="-28,0,0,0" MinWidth="232" MaxWidth="520">
                                <Border x:Name="SideBar" Margin="28,0,38,26" VerticalAlignment="Bottom" HorizontalAlignment="Stretch">
                                    <ContentControl x:Name="FixedSideBarContent" ContentTemplate="{StaticResource HotBarTemplate}" Content="{Binding CurrentPlayer.SelectedCharacter.FixedSideBar}" AllowDrop="False" ls:AttachedProperties.InheritedTag="{StaticResource FalseValue}">
                                    </ContentControl>
                                </Border>
                            </ls:LSNineSliceImage>
                        </StackPanel>

                        <!--DYNAMIC DECK CONTENT ALIGNMENT-->

                        <Grid Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Center">

                            <!--TWO STEP DECK-->
                            <Grid  x:Name="MinimalistContainer" Visibility="Collapsed">
                                <TextBlock x:Name="MinimalistContainerDescription" Text="{Binding Source='h79b6dc4egf450g4037gad34g8bfd57289b9a', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource HotbarGeneralDescriptionStyle}" HorizontalAlignment="Center" VerticalAlignment="Top" IsHitTestVisible="False" Margin="0,-40,0,0" Foreground="{StaticResource LS_baseTxtColor}"/>

                                <ItemsControl Width="Auto" HorizontalContentAlignment="Right" HorizontalAlignment="Center" VerticalAlignment="Center" ItemsSource="{Binding SingleHotBar.SlotList}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>

                                    <ItemsControl.Template>
                                        <ControlTemplate TargetType="ItemsControl">
                                            <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Margin="-24,0,0,0">
                                                <StackPanel Orientation="Horizontal">
                                                    <Image Width="{StaticResource HotbarSlotIconSize}" Height="{StaticResource HotbarSlotIconSize}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Margin="0,0,24,0" ls:TooltipExtender.Owner="{Binding DataContext.CurrentPlayer.SelectedCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" ToolTipService.Placement="Top">
                                                        <Image.Source>
                                                            <MultiBinding Converter="{StaticResource IconIdToSourceConverter}">
                                                                <Binding Source="Assets/Tooltips/Icons/"/>
                                                                <Binding Path="DataContext.CurrentActiveSlot.Spell.IconName" ElementName="HotBar"/>
                                                            </MultiBinding>
                                                        </Image.Source>

                                                        <Image.ToolTip>
                                                            <ls:LSTooltip Content="{Binding DataContext.CurrentActiveSlot.Spell, ElementName=HotBar}" VerticalOffset="-60"/>
                                                        </Image.ToolTip>
                                                    </Image>
                                                    <ItemsPresenter VerticalAlignment="Center"/>
                                                </StackPanel>
                                            </Border>
                                        </ControlTemplate>
                                    </ItemsControl.Template>

                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate DataType="ls:VMHotBarSlot">
                                            <Border x:Name="contentContainer" ToolTipService.IsEnabled="True" ToolTipService.Placement="Top" ls:TooltipExtender.Owner="{Binding DataContext.CurrentPlayer.SelectedCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"  Background="{StaticResource HotbarSlotBackground}" Width="{StaticResource MinimalistSlotSize}" Height="{StaticResource MinimalistSlotSize}">
                                                <Border.ToolTip>
                                                    <ls:LSTooltip Content="{Binding DataContext.Spell, RelativeSource={RelativeSource Mode=TemplatedParent}}" ls:TooltipExtender.Context="Hotbar" VerticalOffset="-60" ls:TooltipExtender.Owner="{Binding Path=(ls:TooltipExtender.Owner), ElementName=contentContainer}"/>
                                                </Border.ToolTip>
                                                <b:Interaction.Triggers>
                                                    <b:EventTrigger EventName="MouseEnter">
                                                        <b:InvokeCommandAction Command="{Binding DataContext.HighlightResourcesCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                                                    </b:EventTrigger>
                                                    <b:EventTrigger EventName="MouseLeave">
                                                        <b:InvokeCommandAction Command="{Binding DataContext.ClearResourceHighlightsCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                                                    </b:EventTrigger>
                                                </b:Interaction.Triggers>
                                                <ls:LSButton x:Name="HotbarslotBtn" Style="{StaticResource HotBarSlotStyle}" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding .}" Width="{StaticResource HotbarSlotIconSize}" Height="{StaticResource HotbarSlotIconSize}"/>
                                            </Border>
                                            <DataTemplate.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsActive}" Value="True"/>
                                                        <Condition Binding="{Binding SlotType}" Value="Spell"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Command" Value="{x:Null}" TargetName="HotbarslotBtn"/>
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsActive}" Value="True"/>
                                                        <Condition Binding="{Binding SlotType}" Value="Action"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Command" Value="{x:Null}" TargetName="HotbarslotBtn"/>
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsActive}" Value="True"/>
                                                        <Condition Binding="{Binding SlotType}" Value="Item"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Command" Value="{x:Null}" TargetName="HotbarslotBtn"/>
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                </MultiDataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </Grid>

                            <!-- UPCAST / MULTITARGET TWO STEP DECK -->
                            <StackPanel x:Name="UpcastSection" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" Background="{x:Null}">
                                <ItemsControl x:Name="ContainerItems" Width="Auto" HorizontalContentAlignment="Right" HorizontalAlignment="Center" VerticalAlignment="Center" ItemsSource="{Binding CurrentActiveSlot.Spell.SpellUpcast}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal" Background="{x:Null}"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>

                                    <ItemsControl.Template>
                                        <ControlTemplate TargetType="ItemsControl">
                                            <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                                                <StackPanel Orientation="Horizontal">
                                                    <!--Show SorceryPoint of the selected spell-->
                                                    <ItemsControl x:Name="CastingResource" ItemsSource="{Binding CurrentPlayer.UIData.ActiveTask.Upcast.CostSummary}" VerticalAlignment="Center">
                                                        <ItemsControl.ItemTemplate>
                                                            <DataTemplate DataType="ls:VMActionResource">
                                                                <Grid x:Name="resourceDisplay" Visibility="Collapsed" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.IsEnabled="True" ToolTipService.Placement="Right" Margin="0,0,30,0">
                                                                    <Image Stretch="None" Style="{StaticResource SectionImageStyle}" Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Top"/>
                                                                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" ls:TextBlockFormatter.SourceText="{Binding MaxValue}" Visibility="{Binding MaxValue, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter='1'}" Margin="0,24,0,0" TextAlignment="Center" noesis:Text.Stroke="Black" noesis:Text.StrokeThickness="4"/>
                                                                </Grid>
                                                                <DataTemplate.Triggers>
                                                                    <DataTrigger Binding="{Binding TypeId}" Value="SorceryPoint">
                                                                        <Setter Property="Visibility" Value="Visible" TargetName="resourceDisplay"/>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding IsHidden}" Value="True">
                                                                        <Setter Property="Visibility" Value="Collapsed" TargetName="resourceDisplay"/>
                                                                    </DataTrigger>
                                                                </DataTemplate.Triggers>
                                                            </DataTemplate>
                                                        </ItemsControl.ItemTemplate>
                                                    </ItemsControl>
                                                    <Grid x:Name="MainSpellIcon" Width="{StaticResource HotbarSlotIconSize}" Height="{StaticResource HotbarSlotIconSize}" VerticalAlignment="Center" Margin="0,0,24,0" Visibility="{Binding IsShowingAContainerWithVariants, Converter={StaticResource BoolToCollapsedConverter},FallbackValue=Collapsed}">
                                                        <Rectangle Fill="{Binding CurrentActiveSlot.Spell.Icon}" />
                                                        <Control x:Name="SpellModifiedGlow" Visibility="Collapsed" DataContext="{Binding CurrentActiveSlot}" Tag="True"  IsHitTestVisible="False" Template="{StaticResource HotbarSlotGlow}"/>

                                                    </Grid>
                                                    <Grid Width="{StaticResource HotbarSlotIconSize}" Height="{StaticResource HotbarSlotIconSize}" VerticalAlignment="Center" Margin="0,-8,0,8" Visibility="{Binding CurrentActiveSlot.GameObject.Icon, Converter={StaticResource NullToCollapsedConverter}, FallbackValue=Collapsed}">
                                                        <Rectangle Fill="{Binding CurrentActiveSlot.GameObject.Icon}"  />
                                                        <Control x:Name="ItemModifiedGlow" DataContext="{Binding CurrentActiveSlot}" Tag="True"  IsHitTestVisible="False" Visibility="Collapsed" Template="{StaticResource HotbarSlotGlow}"/>
                                                    </Grid>
                                                    <ItemsPresenter VerticalAlignment="Center"/>
                                                </StackPanel>
                                            </Border>
                                            <ControlTemplate.Triggers>

                                                <DataTrigger Binding="{Binding CurrentActiveSlot.GameObject.IsModified}" Value="True" >
                                                    <Setter TargetName="ItemModifiedGlow" Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding CurrentActiveSlot.Spell.IsModified}" Value="True" >
                                                    <Setter TargetName="SpellModifiedGlow" Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding CurrentActiveSlot.GameObject, Converter={StaticResource NullToBoolFalseConverter}}" Value="True" >
                                                    <Setter TargetName="MainSpellIcon" Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </ItemsControl.Template>

                                    <ItemsControl.ItemContainerStyle>
                                        <Style TargetType="ContentPresenter">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsActive}" Value="True">
                                                    <Setter  Property="Panel.ZIndex" Value="99"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ItemsControl.ItemContainerStyle>

                                    <ItemsControl.ItemTemplate>

                                        <DataTemplate DataType="ls:VMUpcast">
                                            <Border x:Name="contentContainer" VerticalAlignment="Center" Width="{StaticResource MinimalistSlotSize}" Height="{StaticResource MinimalistSlotSize}" Background="{StaticResource HotbarSlotBackground}">
                                                <b:Interaction.Triggers>
                                                    <b:EventTrigger EventName="MouseEnter">
                                                        <b:InvokeCommandAction Command="{Binding DataContext.HighlightResourcesCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                                                    </b:EventTrigger>
                                                    <b:EventTrigger EventName="MouseLeave">
                                                        <b:InvokeCommandAction Command="{Binding DataContext.ClearResourceHighlightsCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                                                    </b:EventTrigger>
                                                    <b:EventTrigger EventName="Unloaded">
                                                        <b:ChangePropertyAction TargetName="HotbarslotBtn" PropertyName="CommandParameter" Value="{x:Null}"/>
                                                    </b:EventTrigger>
                                                </b:Interaction.Triggers>

                                                <ls:LSButton x:Name="HotbarslotBtn" ToolTipService.IsEnabled="{Binding IsFake, Converter={StaticResource InvertBoolConverter}}" ToolTipService.Placement="Top" ls:TooltipExtender.Owner="{Binding DataContext.CurrentPlayer.SelectedCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Style="{StaticResource HotBarSlotStyle}" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.VerticalOffset="-110" ls:TooltipExtender.Context="Hotbar" CommandParameter="{Binding .}" IsEnabled="{Binding CanUse}" ToolTipService.ShowOnDisabled="True">
                                                    <ls:LSButton.Template>
                                                        <ControlTemplate TargetType="ls:LSButton">
                                                            <ControlTemplate.Resources>
                                                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CellTextStyle}">
                                                                    <Setter Property="FontWeight" Value="Bold" />
                                                                </Style>
                                                            </ControlTemplate.Resources>
                                                            <Grid Background="Transparent">
                                                                <Grid Width="{StaticResource HotbarSlotIconSize}" Height="{StaticResource HotbarSlotIconSize}">
                                                                    <Image x:Name="Background" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/slot_upcasting_d.png" Stretch="None"/>

                                                                    <TextBlock x:Name="SpellSlotLevel" Foreground="{StaticResource LS_accent100TxtColor}" VerticalAlignment="Top" HorizontalAlignment="Center" Height="35" Margin="0,8,0,0" FontSize="{StaticResource MediumFontSize}"  noesis:Text.StrokeThickness="5"/>

                                                                    <Image x:Name="ResourceImage" Stretch="Uniform" Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,18,0,-18"/>

                                                                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_upcasting.png" Stretch="None" IsHitTestVisible="False" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,-4,0,0" Visibility="{Binding IsUpcasted, Converter={StaticResource BoolToVisibleConverter}}"/>
                                                                </Grid>

                                                                <Border x:Name="SelectedMarker" BorderBrush="{StaticResource LS_tint100}" BorderThickness="2" Visibility="Collapsed" />
                                                                <Control x:Name="SelectedGlow" IsHitTestVisible="False" Visibility="Collapsed" Template="{StaticResource HotBarActiveSlotIndicator}"/>


                                                            </Grid>

                                                            <ControlTemplate.Triggers>
                                                                <DataTrigger Binding="{Binding IsActive}" Value="True">
                                                                    <Setter TargetName="SelectedGlow" Property="Visibility" Value="Visible"/>
                                                                </DataTrigger>

                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter TargetName="Background" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/slot_upcasting_h.png"/>
                                                                </Trigger>
                                                                <Trigger Property="IsPressed" Value="True">
                                                                    <Setter TargetName="Background" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/slot_upcasting_p.png"/>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter TargetName="Background" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/slot_upcasting_d.png"/>
                                                                    <Setter TargetName="SpellSlotLevel" Property="Opacity" Value="0.5"/>
                                                                </Trigger>
                                                                <DataTrigger Binding="{Binding IsFake}" Value="True">
                                                                    <Setter TargetName="ResourceImage" Property="Opacity" Value="0.5"/>
                                                                    <Setter TargetName="Background" Property="Opacity" Value="0.5"/>
                                                                </DataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="ActionPoint">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource IconActionPoint}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="ActionPoint"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource IconActionPointUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="BonusActionPoint">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource IconBonusActionPoint}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="BonusActionPoint"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource IconBonusActionPointUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="ReactionActionPoint">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource IconReactionPoint}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="IconReactionPoint"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource IconReactionPointUnavailable}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="Movement">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource IconMovement}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="Movement"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource IconMovementUnavailable}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="WarlockSpellSlot">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource IconWarlockSpellSlot}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="WarlockSpellSlot"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource IconWarlockSpellSlotUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="SpellSlot">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource IconSpellSlot}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="SpellSlot"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource IconSpellSlotUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="SorceryPoint">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource SorceryPoint}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="SorceryPoint"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource SorceryPointUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="KiPoint">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource KiPoint}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="KiPoint"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource KiPointUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="LayOnHandsCharge">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource LayOnHandsCharge}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="LayOnHandsCharge"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource LayOnHandsChargeUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="Rage">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource Rage}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="Rage"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource RageUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="BardicInspiration">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource BardicInspiration}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="BardicInspiration"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource BardicInspirationUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="ChannelDivinity">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource ChannelDivinity}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="ChannelDivinity"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource ChannelDivinityUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="ChannelOath">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource ChannelOath}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="ChannelOath"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource ChannelOathUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="SuperiorityDie">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource SuperiorityDie}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="SuperiorityDie"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource SuperiorityDieUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="ArcaneRecoveryPoint">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource ArcaneRecoveryPoint}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="ArcaneRecoveryPoint"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource ArcaneRecoveryPointUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="NaturalRecoveryPoint">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource NaturalRecovery}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="NaturalRecoveryPoint"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource NaturalRecoverySpent}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="WildShape">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource WildShape}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="WildShape"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource WildShapeSpent}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="TidesOfChaos">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource TidesOfChaos}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="TidesOfChaos"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource TidesOfChaosSpent}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="WarPriestActionPoint">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource WarPriestActionPoint}"/>
                                                                </DataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="LuckPoint">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource LuckPoint}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="LuckPoint"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource LuckPointSpent}"/>
                                                                </MultiDataTrigger>

                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="WarPriestActionPoint"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource WarPriestActionPointSpent}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="FungalInfestationCharge">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource FungalInfestationCharge}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="FungalInfestationCharge"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource FungalInfestationChargeSpent}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="PsiPoint">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource PsiPoint}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="PsiPoint"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource PsiPointUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding ResourceName}" Value="BladesongCharge">
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource BladesongCharge}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CanUse}" Value="False"/>
                                                                        <Condition Binding="{Binding IsFake}" Value="False"/>
                                                                        <Condition Binding="{Binding ResourceName}" Value="BladesongCharge"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="ResourceImage" Property="Source" Value="{StaticResource BladesongChargeUsed}"/>
                                                                </MultiDataTrigger>

                                                                <DataTrigger Binding="{Binding CastAbility}" Value="Strength">
                                                                    <Setter TargetName="SpellSlotLevel" Property="Text" Value="{Binding Source='h1579d774gdbcdg4a97gb3fage409138d104d', Converter={StaticResource TranslatedStringConverter}}"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding CastAbility}" Value="Dexterity">
                                                                    <Setter TargetName="SpellSlotLevel" Property="Text" Value="{Binding Source='h8d7356d7g4c37g41e4gb8a2gef3459e12b97', Converter={StaticResource TranslatedStringConverter}}"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding CastAbility}" Value="Constitution">
                                                                    <Setter TargetName="SpellSlotLevel" Property="Text" Value="{Binding Source='h20676a9ag9216g47dbgba3ag82bd734cfd53', Converter={StaticResource TranslatedStringConverter}}"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding CastAbility}" Value="Intelligence">
                                                                    <Setter TargetName="SpellSlotLevel" Property="Text" Value="{Binding Source='ha1a41e74g2804g4a70g9a85g6235163d41da', Converter={StaticResource TranslatedStringConverter}}"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding CastAbility}" Value="Wisdom">
                                                                    <Setter TargetName="SpellSlotLevel" Property="Text" Value="{Binding Source='h2e9f1067g2dceg4640g8816gc6394e9f0303', Converter={StaticResource TranslatedStringConverter}}"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding CastAbility}" Value="Charisma">
                                                                    <Setter TargetName="SpellSlotLevel" Property="Text" Value="{Binding Source='ha2fc9b3dg3305g404eg9256gf25a06d0b2aa', Converter={StaticResource TranslatedStringConverter}}"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding SlotLevel, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                                                                    <Setter TargetName="SpellSlotLevel" Property="Text" Value="{Binding SlotLevel, Converter={StaticResource DecimalToRomanConverter}}"/>
                                                                </DataTrigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </ls:LSButton.Template>
                                                </ls:LSButton>
                                            </Border>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                                <Grid x:Name="UpcastDescription" Grid.Column="1" Grid.ColumnSpan="3" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,8,0,-8" MaxWidth="1200">
                                    <Grid.Resources>
                                        <Style TargetType="TextBlock" BasedOn="{StaticResource HotbarGeneralDescriptionStyle}"/>
                                    </Grid.Resources>

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Image x:Name="UpcastIcon" Grid.Column="0" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_upcasting.png" Stretch="None" IsHitTestVisible="False" VerticalAlignment="Center" Margin="0,-8,0,8"/>

                                    <TextBlock x:Name="UpcastTitle" Grid.Column="1">
                                        <TextBlock.ToolTip>
                                            <ls:LSTooltip IsHitTestVisible="False" Placement="Top" VerticalOffset="50">
                                                <TextBlock Text="{Binding Source='hd91a3907gcb08g4a23g8262gd64018de7e15', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
                                            </ls:LSTooltip>
                                        </TextBlock.ToolTip>
                            <Run Text="{Binding Source='h0f8acaadgd1f6g4a7ega71ageda041426536', Converter={StaticResource TranslatedStringConverter}}"/><Run 
                                Text="{Binding Source='hb897c56egaa6fg460bg8676g8ebfa0340954', Converter={StaticResource TranslatedStringConverter}}"/>
                        </TextBlock>

                                    <TextBlock x:Name="DefaultUpcastText" Grid.Column="2" Text="{Binding Source='ha2469e2agb7b2g4458ga4cfga39870149940', Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_baseTxtColor}"/>
                                    <TextBlock x:Name="UpcastText" Grid.Column="2" Foreground="{StaticResource LS_baseTxtColor}" Visibility="Collapsed" TextTrimming="CharacterEllipsis" ls:TextTrimmedProperties.CheckTrim="True" ToolTipService.IsEnabled="{Binding (ls:TextTrimmedProperties.IsWidthTrimmed), ElementName=UpcastText}">
                            <b:Interaction.Behaviors>
                                <ls:CtxTransStringRunGeneratorBehavior Source="{Binding UpcastGeneralDescription}" ParamRunStyle="{StaticResource TooltipUnitParamRun}"/>
                            </b:Interaction.Behaviors>
                                        <TextBlock.ToolTip>
                                            <ls:LSTooltip IsHitTestVisible="False" Placement="Top" VerticalOffset="50">
                                                <TextBlock Style="{StaticResource TooltipBaseTextStyle}">
                                        <b:Interaction.Behaviors>
                                            <ls:CtxTransStringRunGeneratorBehavior Source="{Binding DataContext.UpcastGeneralDescription, ElementName=HotBar}" ParamRunStyle="{StaticResource TooltipUnitParamRun}"/>
                                        </b:Interaction.Behaviors>
                                                </TextBlock>
                                            </ls:LSTooltip>
                                        </TextBlock.ToolTip>
                        </TextBlock>
                                </Grid>
                            </StackPanel>

                            <!-- CUSTOM DECK (EMPTY) -->
                            <ls:LSNineSliceImage x:Name="EmptyDeckMessage" HorizontalAlignment="Center" VerticalAlignment="Center" ImageSource="{StaticResource OverlayMessageBackground}"  Slices="110,0,110,0" MinHeight="112" IsHitTestVisible="False">
                                <ls:LSNineSliceImage.Style>
                                    <Style TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsShowingCustomDeck}" Value="{StaticResource TrueValue}"/>
                                                    <Condition Binding="{Binding Path=Margin.Left, ElementName=CustomHotBar}" Value="0"/>
                                                    <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.CustomHotBar.SlotList.Count}" Value="0"/>
                                                    <Condition Binding="{Binding Visibility, ElementName=SingleHotBar}" Value="Collapsed"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.IsShapeShifted, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                                    <Condition Binding="{Binding SingleHotBar.SlotList.Count}" Value="0"/>
                                                    <Condition Binding="{Binding Visibility, ElementName=SingleHotBar}" Value="Visible"/>
                                                    <Condition Binding="{Binding Margin.Bottom, ElementName=SingleHotBar, Converter={StaticResource GreaterThanConverter}, ConverterParameter=-1}" Value="True"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ls:LSNineSliceImage.Style>
                                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" Margin="100,0" FontSize="{StaticResource SmallFontSize}" Foreground="{StaticResource LS_specialTxtColor}">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="Text" Value="{Binding Source='h42f34118g2a84g4231ga835gae999a28f073', Converter={StaticResource TranslatedStringConverter}}"/>
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.IsShapeShifted, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                                        <Condition Binding="{Binding SingleHotBar.SlotList.Count}" Value="0"/>
                                                        <Condition Binding="{Binding Visibility, ElementName=SingleHotBar}" Value="Visible"/>
                                                        <Condition Binding="{Binding Margin.Bottom, ElementName=SingleHotBar, Converter={StaticResource GreaterThanConverter}, ConverterParameter=-1}" Value="True"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Text" Value="{Binding Source='ha726741fg9519g4141ga6cageee7348046d0', Converter={StaticResource TranslatedStringConverter}}"/>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </ls:LSNineSliceImage>
                        </Grid>

                        <!-- ===== RESOURCE BAR & TOP LINE COMPONENTS ===== -->
                        <Grid Grid.Row="0" Margin="0,0,0,-25" HorizontalAlignment="Stretch" MaxWidth="{Binding ActualWidth, ElementName=HotbarDynamicContent}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="1*"/>
                            </Grid.ColumnDefinitions>

                            <!-- Action Resources -->
                            <Grid x:Name="ActionResourcesContainer" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Bottom" >
                                <ls:LSNineSliceImage x:Name="HotbarBodyResourcesBg" HorizontalAlignment="Center" VerticalAlignment="Bottom" Height="64" MinWidth="208"
                                         Width="{Binding ActualWidth, ElementName=ActionResources, Converter={StaticResource AddConverter}, ConverterParameter=208}"
                                         ImageSource="{StaticResource BarResources}" Slices="104,0"/>

                                <StackPanel x:Name="ActionResources" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Bottom">
                                    <ItemsControl ItemsSource="{Binding CurrentPlayer.UIData.ActionResourcesCostPreview}" HorizontalAlignment="Center" VerticalAlignment="Bottom" >
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate DataType="ls:VMActionResourceCostPreview">
                                                <ls:LSButton Padding="0" Margin="4,-10,4,10">
                                                    <Grid x:Name="Root" Width="72">
                                                        <Image x:Name="BgBg" Source="{StaticResource BoxResourceBg}"/>
                                                        <Image x:Name="Bg" VerticalAlignment="Center" HorizontalAlignment="Center" Source="{StaticResource BoxResource}" Margin="{StaticResource ResourceBackgroundMargin}"/>
                                                        <Image x:Name="BgHL" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center" Source="{StaticResource BoxResourceH}" Margin="{StaticResource ResourceBackgroundMargin}"/>
                                                        <Image x:Name="BgDisabled" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center" Source="{StaticResource BoxResourceDisabled}" Margin="{StaticResource ResourceBackgroundMargin}"/>
                                                        <Border Background="Transparent" Width="72" Height="72" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                    ToolTipService.IsEnabled="True" ToolTipService.Placement="Top" >
                                                            <Border.ToolTip>
                                                                <ls:LSTooltip IsHitTestVisible="False" Style="{StaticResource ManagedTooltipStyle}" Content="{Binding ElementName=Root,Path=DataContext}"/>
                                                            </Border.ToolTip>
                                                            <ls:LSActionPointResources x:Name="ResourcePoints"
                                                               Background="Transparent"
                                                               HorizontalAlignment="Center"
                                                               MaxActionPoints="{Binding MaxValue}"
                                                               AvailableActionPoints="{Binding Value}"
                                                               HighlightedActionPoints="{Binding DataContext.Cost, ElementName=Root}"
                                                               DataContext="{Binding ActionResource}"
                                                               MaxActionPointGroups="0"
                                                               SmallActionPointSize="24"
                                                               ActionPointGroupSize="56"
                                                               Style="{StaticResource ActionResourcesTemplateSelector}">
                                                            </ls:LSActionPointResources>
                                                        </Border>

                                                        <Image x:Name="SpellSlotLevels" Stretch="None" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,-10,0,0" IsHitTestVisible="False"
                                                   Style="{StaticResource RomanNumeralLevelImage}" Visibility="Hidden" DataContext="{Binding ActionResource}"/>
                                                        <TextBlock x:Name="ResourcesNumeralDisplay" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,25,0,0"
                                                       Foreground="{Binding Foreground, ElementName=ResourcePoints}" IsHitTestVisible="False"
                                                       FontSize="{DynamicResource MediumFontSize}" Text="{Binding ActionResource.Value}"
                                                       noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" noesis:Text.StrokeThickness="4">
                                                <b:Interaction.Triggers>
                                                    <b:PropertyChangedTrigger Binding="{Binding Path=ActionResource.Value}">
                                                        <b:Interaction.Behaviors>
                                                            <b:ConditionBehavior>
                                                                <b:ConditionalExpression>
                                                                    <b:ComparisonCondition LeftOperand="{Binding ActionResource.MaxValue}" Operator="GreaterThan" RightOperand="{Binding MaxGroupActionPoints, ElementName=ResourcePoints}"/>
                                                                    <b:ComparisonCondition LeftOperand="{Binding ActionResource.Value}" Operator="GreaterThan" RightOperand="1"/>
                                                                </b:ConditionalExpression>
                                                            </b:ConditionBehavior>
                                                        </b:Interaction.Behaviors>
                                                        <b:ChangePropertyAction PropertyName="Visibility" Value="Visible"/>
                                                    </b:PropertyChangedTrigger>
                                                    
                                                    <b:PropertyChangedTrigger Binding="{Binding Path=ActionResource.Value}">
                                                        <b:Interaction.Behaviors>
                                                            <b:ConditionBehavior>
                                                                <b:ConditionalExpression>
                                                                    <b:ComparisonCondition LeftOperand="{Binding ActionResource.Value}" Operator="LessThanOrEqual" RightOperand="1"/>
                                                                </b:ConditionalExpression>
                                                            </b:ConditionBehavior>
                                                        </b:Interaction.Behaviors>
                                                        <b:ChangePropertyAction PropertyName="Visibility" Value="Collapsed"/>
                                                    </b:PropertyChangedTrigger>
                                                    <b:PropertyChangedTrigger Binding="{Binding Path=ActionResource.Value}">
                                                        <b:Interaction.Behaviors>
                                                            <b:ConditionBehavior>
                                                                <b:ConditionalExpression>
                                                                    <b:ComparisonCondition LeftOperand="{Binding ActionResource.MaxValue}" Operator="LessThanOrEqual" RightOperand="{Binding MaxGroupActionPoints, ElementName=ResourcePoints}"/>
                                                                </b:ConditionalExpression>
                                                            </b:ConditionBehavior>
                                                        </b:Interaction.Behaviors>
                                                        <b:ChangePropertyAction PropertyName="Visibility" Value="Collapsed"/>
                                                    </b:PropertyChangedTrigger>
                                                </b:Interaction.Triggers>
                                                        </TextBlock>
                                                    </Grid>
                                                    <b:Interaction.Triggers>

                                                        <b:EventTrigger EventName="Click">
                                                            <b:Interaction.Behaviors>
                                                                <b:ConditionBehavior>
                                                                    <b:ConditionalExpression>
                                                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.CurrentSingleHotbarFilter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="NotEqual" RightOperand="{Binding ActionResource.Name}" />
                                                                    </b:ConditionalExpression>
                                                                </b:ConditionBehavior>
                                                            </b:Interaction.Behaviors>
                                                            <b:ChangePropertyAction TargetName="HotBar" PropertyName="Tag" Value="{x:Null}"/>
                                                            <b:InvokeCommandAction Command="{Binding DataContext.FilterActionResourceCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                                                        </b:EventTrigger>

                                                        <b:EventTrigger EventName="Click">
                                                            <b:Interaction.Behaviors>
                                                                <b:ConditionBehavior>
                                                                    <b:ConditionalExpression>
                                                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.CurrentSingleHotbarFilter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="{Binding ActionResource.Name}" />
                                                                    </b:ConditionalExpression>
                                                                </b:ConditionBehavior>
                                                            </b:Interaction.Behaviors>
                                                            <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource HideSingleHotBar}"/>
                                                        </b:EventTrigger>

                                                        <b:EventTrigger EventName="Click">
                                                            <b:Interaction.Behaviors>
                                                                <b:ConditionBehavior>
                                                                    <b:ConditionalExpression>
                                                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.CurrentSingleHotbarFilter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="NotEqual" RightOperand="{Binding ActionResource.Name}" />
                                                                        <b:ComparisonCondition LeftOperand="{Binding ActionResource.TypeId}" Operator="Equal" RightOperand="ActionPoint" />
                                                                    </b:ConditionalExpression>
                                                                </b:ConditionBehavior>
                                                            </b:Interaction.Behaviors>
                                                            <!-- Tutorial UI Event - Action Filtered-->
                                                            <b:InvokeCommandAction Command="{Binding DataContext.TutorialEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="7864a83b-11f9-452d-a4ee-544791b87dae"/>
                                                        </b:EventTrigger>

                                                        <b:EventTrigger EventName="Click">
                                                            <b:Interaction.Behaviors>
                                                                <b:ConditionBehavior>
                                                                    <b:ConditionalExpression>
                                                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.CurrentSingleHotbarFilter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="NotEqual" RightOperand="{Binding ActionResource.Name}" />
                                                                        <b:ComparisonCondition LeftOperand="{Binding ActionResource.TypeId}" Operator="Equal" RightOperand="BonusActionPoint" />
                                                                    </b:ConditionalExpression>
                                                                </b:ConditionBehavior>
                                                            </b:Interaction.Behaviors>
                                                            <!-- Tutorial UI Event - Bonus Action Filtered-->
                                                            <b:InvokeCommandAction Command="{Binding DataContext.TutorialEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="59b6139c-65de-43ee-a56b-78537484fd3f"/>
                                                        </b:EventTrigger>
                                                    </b:Interaction.Triggers>
                                                </ls:LSButton>

                                                <DataTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding Path=Tag, ElementName=Root}" Value="SpellSlot" >
                                                        <Setter TargetName="BgBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/box_resourceNumBG.png"/>
                                                        <Setter TargetName="Bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/box_resourceNum_d.png"/>
                                                        <Setter TargetName="BgHL" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/box_resourceNum_h.png"/>
                                                        <Setter TargetName="BgDisabled" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/box_resourceNum_disabled.png"/>
                                                        <Setter TargetName="BgBg" Property="Margin" Value="0,-8,0,0"/>
                                                        <Setter TargetName="Bg" Property="Margin" Value="0,-8,0,0"/>
                                                        <Setter TargetName="BgHL" Property="Margin" Value="0,-8,0,0"/>
                                                        <Setter TargetName="BgDisabled" Property="Margin" Value="0,-8,0,0"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="SpellSlot">
                                                        <Setter TargetName="SpellSlotLevels" Property="Visibility" Value="Visible"/>
                                                        <Setter TargetName="Root" Property="Tag" Value="SpellSlot"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="WarlockSpellSlot">
                                                        <Setter TargetName="SpellSlotLevels" Property="Visibility" Value="Visible"/>
                                                        <Setter TargetName="Root" Property="Tag" Value="SpellSlot"/>
                                                    </DataTrigger>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="Bg" Property="Visibility" Value="Collapsed"/>
                                                        <Setter TargetName="BgHL" Property="Visibility" Value="Visible"/>
                                                        <Setter TargetName="BgDisabled" Property="Visibility" Value="Collapsed"/>
                                                    </Trigger>
                                                    <DataTrigger Binding="{Binding ActionResource.Value}" Value="0">
                                                        <Setter TargetName="Bg" Property="Visibility" Value="Collapsed"/>
                                                        <Setter TargetName="BgHL" Property="Visibility" Value="Collapsed"/>
                                                        <Setter TargetName="BgDisabled" Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="ActionPoint">
                                                        <Setter Property="ls:TutorialProperties.ModalType" Value="Bottom"/>
                                                        <Setter Property="ls:TutorialProperties.TargetStep" Value="2"/>
                                                        <Setter Property="ls:TutorialProperties.TargetID" Value="TUT_Combat"/>
                                                        <Setter Property="ls:TutorialProperties.Padding" Value="6,18,6,0"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="BonusActionPoint">
                                                        <Setter Property="ls:TutorialProperties.ModalType" Value="Bottom"/>
                                                        <Setter Property="ls:TutorialProperties.TargetStep" Value="3"/>
                                                        <Setter Property="ls:TutorialProperties.TargetID" Value="TUT_Combat"/>
                                                        <Setter Property="ls:TutorialProperties.Padding" Value="6,18,6,0"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="BardicInspiration">
                                                        <Setter TargetName="ResourcesNumeralDisplay" Property="Margin" Value="0,22,0,-22"/>
                                                        <Setter TargetName="ResourcesNumeralDisplay" Property="FontSize" Value="{DynamicResource SmallFontSize}"/>
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemContainerStyle>
                                            <Style TargetType="ContentPresenter">
                                                <Setter Property="Margin" Value="-4,0,-4,0"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding ActionResource.MaxValue}" Value="0">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ItemsControl.ItemContainerStyle>
                                    </ItemsControl>

                                    <ls:LSButton Padding="0" Margin="0,-10,0,10" ToolTipService.IsEnabled="True" ToolTipService.Placement="Top" Visibility="{Binding CurrentPlayer.SelectedCharacter.HasCantrips, Converter={StaticResource BoolToVisibleConverter}}">
                                        <ls:LSButton.ToolTip>
                                            <ls:LSTooltip IsHitTestVisible="False" ContentTemplate="{StaticResource CantripTooltipContentTemplate}" Style="{StaticResource ManagedTooltipStyle}"/>
                                        </ls:LSButton.ToolTip>

                                        <Grid x:Name="Root" Width="72">
                                            <Image x:Name="BgBg" Source="{StaticResource BoxResourceBg}"/>

                                            <Image x:Name="Bg" VerticalAlignment="Center" HorizontalAlignment="Center" Source="{StaticResource BoxResource}" Margin="{StaticResource ResourceBackgroundMargin}"/>

                                            <Image x:Name="image" Stretch="None" Source="{StaticResource IconMiniCantrip}" Width="72" Height="72" VerticalAlignment="Center" HorizontalAlignment="Center">
                                                <Image.RenderTransform>
                                                    <TransformGroup>
                                                        <SkewTransform/>
                                                        <ScaleTransform CenterX="12" CenterY="12"/>
                                                        <RotateTransform/>
                                                        <TranslateTransform/>
                                                    </TransformGroup>
                                                </Image.RenderTransform>

                                                <Image.Style>
                                                    <Style TargetType="Image">
                                                        <Style.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.PreviewCantrips, ElementName=HotBar}" Value="True"/>
                                                                    <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.PreviewCantripsState, ElementName=HotBar}" Value="Hover"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <MultiDataTrigger.EnterActions>
                                                                    <BeginStoryboard x:Name="previewAnim" Storyboard="{DynamicResource ActionResources.ActionGroup.ActionPoint.PreviewAnimation}"/>
                                                                </MultiDataTrigger.EnterActions>
                                                                <MultiDataTrigger.ExitActions>
                                                                    <StopStoryboard BeginStoryboardName="previewAnim"/>
                                                                </MultiDataTrigger.ExitActions>
                                                            </MultiDataTrigger>

                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.PreviewCantrips, ElementName=HotBar}" Value="False"/>
                                                                    <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.PreviewCantripsState, ElementName=HotBar}" Value="Inactive"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Opacity" Value="0.5"/>
                                                            </MultiDataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Image.Style>
                                            </Image>
                                        </Grid>

                                        <b:Interaction.Triggers>
                                            <b:EventTrigger EventName="MouseEnter">
                                                <b:ChangePropertyAction TargetName="Bg" PropertyName="Source" Value="{StaticResource BoxResourceH}"/>
                                            </b:EventTrigger>

                                            <b:EventTrigger EventName="MouseLeave">
                                                <b:ChangePropertyAction TargetName="Bg" PropertyName="Source" Value="{StaticResource BoxResource}"/>
                                            </b:EventTrigger>

                                            <b:EventTrigger EventName="Click">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding DataContext.CurrentSingleHotbarFilter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="NotEqual" RightOperand="{Binding Source='h7d02199dg44ecg4a1egbcacg9cc1cec197b3', Converter={StaticResource TranslatedStringConverter}}" />
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="HotBar" PropertyName="Tag" Value="{x:Null}"/>
                                                <b:InvokeCommandAction Command="{Binding DataContext.FilterCantripsCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="h7d02199dg44ecg4a1egbcacg9cc1cec197b3"/>
                                            </b:EventTrigger>

                                            <b:EventTrigger EventName="Click">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding DataContext.CurrentSingleHotbarFilter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="{Binding Source='h7d02199dg44ecg4a1egbcacg9cc1cec197b3', Converter={StaticResource TranslatedStringConverter}}" />
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource HideSingleHotBar}"/>
                                            </b:EventTrigger>
                                        </b:Interaction.Triggers>
                                    </ls:LSButton>
                                </StackPanel>
                            </Grid>

                            <!--REACTIONS/INTERRUPTS-->
                            <Grid x:Name="ActiveInterruptList" Grid.Column="2" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,0,32,12" ls:TutorialProperties.TargetID="TUT_Reactions" ls:TutorialProperties.ModalType="BottomRight">
                                <Grid.Resources>
                                    <System:Double x:Key="InterruptIconSize">48</System:Double>
                                    <System:Double x:Key="InterruptQuestionSize">34</System:Double>
                                    <System:Double x:Key="InterruptNumberFontSize">24</System:Double>
                                    <Style x:Key="InterruptIconRootStyle" TargetType="Grid">
                                        <Setter Property="ToolTipService.Placement" Value="Top"/>
                                    </Style>
                                </Grid.Resources>
                                <Viewbox Height="60" VerticalAlignment="Bottom">                                
                                <ls:LSButton x:Name="ReactionsLineBtn" Command="{Binding CustomEvent}" BoundEvent="ToggleReactions" CommandParameter="ToggleInterrupts" ls:TutorialProperties.TargetID="TUT_BardicInspiration" ls:TutorialProperties.ModalType="BottomRight" IsHitTestVisible="True" >
                                    <b:Interaction.Behaviors>
                                        <ls:CollectionFilterBehavior x:Name="CharacterInterruptsFilter" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.Interrupts}" Predicate="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.CharacterInterruptsFilterPredicate}"/>
                                    </b:Interaction.Behaviors>
                                    <ItemsControl ItemsSource="{Binding FilteredItems, ElementName=CharacterInterruptsFilter}" HorizontalAlignment="Center" Background="Transparent">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal" VerticalAlignment="Bottom"/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemContainerStyle>
                                            <Style TargetType="ContentPresenter">
                                                <Setter Property="Margin" Value="2"/>
                                                <Setter Property="ContentTemplate" Value="{StaticResource InterruptIcon}"/>
                                                <Setter Property="Visibility" Value="{Binding Enabled , Converter={StaticResource BoolToVisibleConverter}}"/>
                                                <Setter Property="IsHitTestVisible" Value="True"/>
                                            </Style>
                                        </ItemsControl.ItemContainerStyle>
                                       </ItemsControl>
                                 </ls:LSButton>
                                </Viewbox>
                            </Grid>

                            <!--EXTRA STATUS NOTIFICATIONS-->                         
                            <!--As per CursorText - however differnt strings, differnt location-->
                            <ItemsControl Grid.Column="0" Grid.ColumnSpan="3" x:Name="CapabilitiesErrors" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.ModifiedCapabilities}" AlternationCount="{Binding ItemsSource.Count, RelativeSource={RelativeSource Self}}" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,88" Height="{Binding Path=ActualHeight, ElementName=Message}">
                                <b:Interaction.Behaviors>
                                    <ls:CapabilityListSelectorBehavior x:Name="CapabilityListSelectorBehavior" 
                                                                       CapabilitiesCollection="{Binding CurrentPlayer.SelectedCharacter.ModifiedCapabilities}"
                                                                       CharacterIsInTurnBasedMode="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}"
                                                                       CharacterIsShapeshifted="{Binding CurrentPlayer.SelectedCharacter.IsShapeShifted}"
                                                                       PlayerCurrentTaskType="{Binding CurrentPlayer.UIData.ActiveTask.PreviewType}"/>
                                </b:Interaction.Behaviors>

                                <ItemsControl.ItemContainerStyle>
                                    <Style TargetType="ContentPresenter">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <!-- Show only the first one -->
                                            <DataTrigger Value="True">
                                                <DataTrigger.Binding>
                                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                                        <Binding Path="."/>
                                                        <Binding Path="FirstVisibleElement" ElementName="CapabilityListSelectorBehavior"/>
                                                    </MultiBinding>
                                                </DataTrigger.Binding>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ItemsControl.ItemContainerStyle>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate DataType="{x:Type ls:VMCapabilityModifier}">
                                        <DataTemplate.Resources>
                                            <BitmapImage x:Key="CastBarBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/target_bar_cast.png"/>
                                            <Style x:Key="CursorErrorTextStyle" TargetType="TextBlock">
                                                <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
                                                <Setter Property="FontSize" Value="{StaticResource IntermediateFontSize}"/>
                                                <Setter Property="noesis:Text.StrokeThickness" Value="6"/>
                                                <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_TextOutlineColor}"/>
                                            </Style>
                                        </DataTemplate.Resources>

                                        <ls:LSNineSliceImage x:Name="MessageBlock" HorizontalAlignment="Center" Height="84" Width="{Binding ActualWidth, ElementName=Message, Converter={StaticResource AddConverter}, ConverterParameter=140}" MinWidth="720"
                                         ImageSource="{StaticResource CastBarBackground}" Slices="90,0,90,0" IconWidth="500" Visibility="Collapsed">

                                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{StaticResource HUD.DropShadow}">
                                                <TextBlock x:Name="Message" Style="{StaticResource CursorErrorTextStyle}"/>
                                                <TextBlock x:Name="Cause" Style="{StaticResource CursorErrorTextStyle}" Visibility="{Binding Cause, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}">
                                                    <TextBlock.Text>
                                                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                            <Binding Source="hb19f530dgfeb2g4d13g8d64ga8216f364f67"/>
                                                            <Binding  Path="Cause"/>
                                                        </MultiBinding>
                                                    </TextBlock.Text>
                                                </TextBlock>
                                            </StackPanel>
                                            
                                        </ls:LSNineSliceImage>

                                        <DataTemplate.Triggers>

                                            <DataTrigger Binding="{Binding Type}" Value="LostControl">
                                                <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding Type}" Value="ActionsBlocked">
                                                <Setter TargetName="Message" Property="Text" Value="{Binding Source='hc26b3ee1g8586g4fc5gbc1dg14711bc21a4b', Converter={StaticResource TranslatedStringConverter}}"/>
                                                <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Type}" Value="BonusActionsBlocked">
                                                <Setter TargetName="Message" Property="Text" Value="{Binding Source='hc9c9197cg997fg4dcagad83g7fd70e8c645e', Converter={StaticResource TranslatedStringConverter}}"/>
                                                <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding Type}" Value="SpellcastingBlocked">
                                                <Setter TargetName="Message" Property="Text" Value="{Binding Source='h016d4e05g4042g42c9g8e4cg351088deddf5', Converter={StaticResource TranslatedStringConverter}}"/>
                                                <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding Type}" Value="MovementBlocked">
                                                <Setter TargetName="Message" Property="Text" Value="{Binding Source='h7760a99cg8a58g4555gb0f1g0e3e2b872f66', Converter={StaticResource TranslatedStringConverter}}"/>
                                                <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                            </DataTrigger>

                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Type}" Value="LostControl"/>
                                                    <Condition Binding="{Binding Value}" Value="Incapacitated"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="Message" Property="Text" Value="{Binding Source='h5f3c3defgdf33g4bbbgafc5g487ca817cda4', Converter={StaticResource TranslatedStringConverter}}"/>
                                            </MultiDataTrigger>
                                            
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Type}" Value="LostControl"/>
                                                    <Condition Binding="{Binding Value}" Value="KnockedDown"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="Message" Property="Text" Value="{Binding Source='h296f3937g9cdcg4613ga574g5e9f11dbd095', Converter={StaticResource TranslatedStringConverter}}"/>
                                            </MultiDataTrigger>
                                            
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Type}" Value="LostControl"/>
                                                    <Condition Binding="{Binding Value}" Value="Downed"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="Message" Property="Text" Value="{Binding Source='hbf29ef1cg54b7g4c65g9879g2a15e7090487', Converter={StaticResource TranslatedStringConverter}}"/>
                                            </MultiDataTrigger>
                                            
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Type}" Value="LostControl"/>
                                                    <Condition Binding="{Binding Value}" Value="Dying"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="Message" Property="Text" Value="{Binding Source='hbadf852cgd385g4b95g9ae5ga4af93905815', Converter={StaticResource TranslatedStringConverter}}"/>
                                            </MultiDataTrigger>
                                            
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Type}" Value="LostControl"/>
                                                    <Condition Binding="{Binding Value}" Value="StoryFrozen"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="Message" Property="Text" Value="{Binding Source='hbd5803f1g480cg4eb4g820fg242124c08ea9', Converter={StaticResource TranslatedStringConverter}}"/>
                                            </MultiDataTrigger>
                                            
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Type}" Value="LostControl"/>
                                                    <Condition Binding="{Binding Value}" Value="LostControl"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="Message" Property="Text" Value="{Binding Source='hd870788dg1d5dg42f3ga261g8580eec92784', Converter={StaticResource TranslatedStringConverter}}"/>
                                            </MultiDataTrigger>

                                            <DataTrigger Binding="{Binding Type}" Value="ReactionsBlocked">
                                                <Setter TargetName="Message" Property="Text" Value="{Binding Source='hae26bac2g2e14g4cccg8c47gd19467e488c6', Converter={StaticResource TranslatedStringConverter}}"/>
                                                <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                            
                                            <DataTrigger Binding="{Binding Type}" Value="ResurrectedInThisTurn">
                                                <Setter TargetName="Message" Property="Text" Value="{Binding Source='h1ac301b7gce0ag4693gbba2gb912e5abe10e', Converter={StaticResource TranslatedStringConverter}}"/>
                                                <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                            
                                            <DataTrigger Binding="{Binding Type}" Value="DisarmedInThisTurn">
                                                <Setter TargetName="Message" Property="Text" Value="{Binding Source='he4c05e4ag7e4eg46edgbc22g77fab2bddc2d', Converter={StaticResource TranslatedStringConverter}}"/>
                                                <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                            </DataTrigger>

                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>

                        </Grid>

                        <!-- ===== DECKTAB BAR ===== -->
                        <Grid Grid.Row="2" Margin="0,-8,0,0" Background="Transparent">
                            <Grid x:Name="BottomFeatures" HorizontalAlignment="Center" VerticalAlignment="Bottom" MaxHeight="88" Margin="0,0,0,9">
                                <Grid.MaxWidth>
                                    <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                                        <Binding Path="ActualWidth" ElementName="WeaponSlots"/>
                                        <Binding Path="ActualWidth" ElementName="MainBars"/>
                                        <Binding Path="ActualWidth" ElementName="FixedSideBar"/>
                                        <Binding Source="-88"/>
                                    </MultiBinding>
                                </Grid.MaxWidth>

                                <!-- Bottom buttons -->
                                <ls:LSNineSliceImage x:Name="BottomLinksBg" HorizontalAlignment="Center" Height="84" Width="{Binding ActualWidth, ElementName=BottomLinks, Converter={StaticResource AddConverter}, ConverterParameter=240}"
                                         ImageSource="{StaticResource BarBottom}" Slices="170,0, 170, 0" Visibility="{Binding Visibility, ElementName=BottomLinks}"/>

                                <ListBox x:Name="BottomLinks" HorizontalAlignment="Center" AlternationCount="6" Visibility="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource BoolToVisibleConverter}, ConverterParameter={StaticResource TrueValue}}">
                                    <ListBox.Tag>
                                        <MultiBinding Converter="{StaticResource BoolAndConverter}">
                                            <Binding Path="IsVisible" ElementName="SingleHotBar" Converter="{StaticResource InvertBoolConverter}"/>
                                            <Binding Path="IsVisible" ElementName="SummonHotBar" Converter="{StaticResource InvertBoolConverter}"/>
                                        </MultiBinding>
                                    </ListBox.Tag>

                                    <ListBox.Resources>
                                        <System:Int16 x:Key="DoingAnimation">8</System:Int16>
                                    </ListBox.Resources>

                                    <ListBox.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ListBox.ItemsPanel>
                                    <!--DECK TABS-->
                                    <ListBox.ItemContainerStyle>
                                        <Style TargetType="{x:Type ListBoxItem}">
                                            <Setter Property="Margin" Value="0"/>
                                            <Setter Property="VerticalAlignment" Value="Center"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                        <StackPanel Orientation="Horizontal">
                                                            <Image x:Name="Separator" Style="{StaticResource BottomDividerImageStyle}" Visibility="{Binding }"/>
                                                            <ContentPresenter>
                                                                <ContentPresenter.MaxWidth>
                                                                    <MultiBinding Converter="{StaticResource DivideMultiConverter}">
                                                                        <Binding Path="MaxWidth" ElementName="BottomFeatures"/>
                                                                        <Binding Path="AlternationCount" ElementName="BottomLinks"/>
                                                                    </MultiBinding>
                                                                </ContentPresenter.MaxWidth>
                                                            </ContentPresenter>
                                                        </StackPanel>

                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                                                                <Setter TargetName="Separator" Property="Visibility" Value="Collapsed"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ListBox.ItemContainerStyle>

                                    <ListBoxItem>
                                        <ls:LSButton x:Name="InvalidHotBar" Margin="0,0,-4,0" OverwriteClickSound="UI_HUD_Hotbar_Filter_Click">
                                            <ls:LSButton.Content>
                                                <Image Source="{StaticResource IconConcertina}" Stretch="None" Margin="10,0"/>
                                            </ls:LSButton.Content>
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="Click">
                                                    <b:InvokeCommandAction Command="{Binding SetCurrentShownDeckCommand}" CommandParameter="InvalidHotBar"/>
                                                    <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource ShowConcertina}" />
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>
                                            <ls:LSButton.Style>
                                                <Style TargetType="{x:Type ls:LSButton}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="ls:LSButton">
                                                                <ls:LSNineSliceImage x:Name="bg" ImageSource="{StaticResource BtnConcertina}" Slices="36" Padding="10">
                                                                    <ContentPresenter x:Name="Content" Margin="10, 5" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                                                </ls:LSNineSliceImage>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="ImageSource" TargetName="bg" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_concertina_h.png"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter Property="ImageSource" TargetName="bg" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_concertina_p.png"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled"  Value="False">
                                                                        <Setter Property="ImageSource" TargetName="bg" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_concertina_disabled.png"/>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Style.Triggers>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding CurrentShownDeck, Converter={StaticResource NullToBoolFalseConverter}}" Value="False"/>
                                                                <Condition Binding="{Binding IsShowingPassivesDeck}" Value="False"/>
                                                                <Condition Binding="{Binding IsShowingCustomDeck}" Value="False"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <MultiDataTrigger.Setters>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="ls:LSButton">
                                                                            <Grid>
                                                                                <ls:LSNineSliceImage x:Name="bg" ImageSource="{StaticResource BtnConcertinaActive}" Slices="36" Padding="10">
                                                                                    <ContentPresenter x:Name="Content" Margin="10, 5" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                                                                </ls:LSNineSliceImage>

                                                                                <ls:LSNineSliceImage x:Name="Marker" Style="{StaticResource BottomLinksMarkerStyle}" Visibility="Visible"
                                                                        Width="{Binding ActualWidth, ElementName=Content, Converter={StaticResource AddConverter}, ConverterParameter=-20}">
                                                                                    <Image Source="{StaticResource BtnActiveModArrowRed}" Stretch="None" VerticalAlignment="Center" Margin="0,4,0,-4"/>
                                                                                </ls:LSNineSliceImage>
                                                                            </Grid>
                                                                            <ControlTemplate.Triggers>
                                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                                    <Setter Property="ImageSource" TargetName="bg" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_concertina_active_h.png"/>
                                                                                </Trigger>
                                                                                <Trigger Property="IsPressed" Value="True">
                                                                                    <Setter Property="ImageSource" TargetName="bg" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_concertina_active_p.png"/>
                                                                                </Trigger>
                                                                                <Trigger Property="IsEnabled"  Value="False">
                                                                                    <Setter Property="ImageSource" TargetName="bg" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_concertina_active_disabled.png"/>
                                                                                </Trigger>
                                                                            </ControlTemplate.Triggers>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </MultiDataTrigger.Setters>
                                                        </MultiDataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ls:LSButton.Style>
                                        </ls:LSButton>
                                    </ListBoxItem>

                                    <ListBoxItem>
                                        <ls:LSButton Content="{Binding Source='haf48b625gb2f0g449egb3aegfddfa1be81c2',Converter={StaticResource TranslatedStringConverter}}" OverwriteClickSound="UI_HUD_Hotbar_Filter_Click">
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="Click">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding CurrentShownDeck.HotBarType}" Operator="NotEqual" RightOperand="CommonHotBar" />
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <b:InvokeCommandAction Command="{Binding SetCurrentShownDeckCommand}" CommandParameter="CommonHotBar"/>
                                                    <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource ShowConcertina}" />
                                                </b:EventTrigger>
                                                <b:EventTrigger EventName="Click">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding CurrentShownDeck.HotBarType}" Operator="Equal" RightOperand="CommonHotBar" />
                                                                <b:ComparisonCondition LeftOperand="{Binding Path=IsAnimatingFullyResizedItem, ElementName=Concertina}" Operator="NotEqual" RightOperand="{StaticResource TrueValue}" />
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <b:InvokeCommandAction Command="{Binding SetCurrentShownDeckCommand}" CommandParameter="InvalidHotBar"/>
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>

                                            <ls:LSButton.Style>
                                                <Style TargetType="{x:Type ls:LSButton}" BasedOn="{StaticResource BottomLinksStyle}">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding CurrentShownDeck.HotBarType}" Value="CommonHotBar">
                                                            <Setter Property="Template" Value="{StaticResource ActiveFilterButton}"/>                                                            
                                                        </DataTrigger>

                                                        <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.CommonHotBar.HasNewContent}" Value="True">
                                                            <Setter Property="Tag" Value="NewContent"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ls:LSButton.Style>

                                        </ls:LSButton>
                                    </ListBoxItem>

                                    <!--CLASS PLATE-->
                                    <ListBoxItem Visibility="{Binding DataContext.CurrentPlayer.SelectedCharacter.IsShapeShifted, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource BoolToCollapsedConverter}}">

                                        <ls:LSButton Content="{Binding CurrentPlayer.SelectedCharacter.Stats.ClassList[0].ClassDisplayName}" OverwriteClickSound="UI_HUD_Hotbar_Filter_Click">
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="Click">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding CurrentShownDeck.HotBarType}" Operator="NotEqual" RightOperand="ClassHotBar" />
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <b:InvokeCommandAction Command="{Binding SetCurrentShownDeckCommand}" CommandParameter="ClassHotBar"/>
                                                    <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource ShowConcertina}" />
                                                </b:EventTrigger>
                                                <b:EventTrigger EventName="Click">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding CurrentShownDeck.HotBarType}" Operator="Equal" RightOperand="ClassHotBar" />
                                                                <b:ComparisonCondition LeftOperand="{Binding Path=IsAnimatingFullyResizedItem, ElementName=Concertina}" Operator="NotEqual" RightOperand="{StaticResource TrueValue}" />
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <b:InvokeCommandAction Command="{Binding SetCurrentShownDeckCommand}" CommandParameter="InvalidHotBar"/>
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>

                                            <ls:LSButton.Style>
                                                <Style TargetType="{x:Type ls:LSButton}" BasedOn="{StaticResource BottomLinksStyle}">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding CurrentShownDeck.HotBarType}" Value="ClassHotBar">
                                                            <Setter Property="Template" Value="{StaticResource ActiveFilterButton}"/>
                                                        </DataTrigger>

                                                        <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.ClassHotBar.HasNewContent}" Value="True">
                                                            <Setter Property="Tag" Value="NewContent"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ls:LSButton.Style>
                                        </ls:LSButton>
                                    </ListBoxItem>

                                    <!--ITEMS PLATE-->
                                    <ListBoxItem>
                                        <ls:LSButton Content="{Binding Source='h9dc5cd87g62b9g452ag8b97gdb226aa037d8',Converter={StaticResource TranslatedStringConverter}}" OverwriteClickSound="UI_HUD_Hotbar_Filter_Click">
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="Click">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding CurrentShownDeck.HotBarType}" Operator="NotEqual" RightOperand="ItemHotBar" />
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <b:InvokeCommandAction Command="{Binding SetCurrentShownDeckCommand}" CommandParameter="ItemHotBar"/>
                                                    <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource ShowConcertina}" />
                                                </b:EventTrigger>
                                                <b:EventTrigger EventName="Click">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding CurrentShownDeck.HotBarType}" Operator="Equal" RightOperand="ItemHotBar" />
                                                                <b:ComparisonCondition LeftOperand="{Binding Path=IsAnimatingFullyResizedItem, ElementName=Concertina}" Operator="NotEqual" RightOperand="{StaticResource TrueValue}" />
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <b:InvokeCommandAction Command="{Binding SetCurrentShownDeckCommand}" CommandParameter="InvalidHotBar"/>
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>

                                            <ls:LSButton.Style>
                                                <Style TargetType="{x:Type ls:LSButton}" BasedOn="{StaticResource BottomLinksStyle}">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding CurrentShownDeck.HotBarType}" Value="ItemHotBar">
                                                            <Setter Property="Template" Value="{StaticResource ActiveFilterButton}"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ls:LSButton.Style>

                                        </ls:LSButton>
                                    </ListBoxItem>

                                    <!--PASSIVES DECK-->
                                    <ListBoxItem>
                                        <ls:LSButton Content="{Binding Source='hccb74959ga789g46f6g8cc2g73edf1536b6a',Converter={StaticResource TranslatedStringConverter}}" OverwriteClickSound="UI_HUD_Hotbar_Filter_Click">
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="Click">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding Path=IsShowingPassivesDeck}" Operator="Equal" RightOperand="{StaticResource FalseValue}" />
                                                                <b:ComparisonCondition LeftOperand="{Binding Path=Tag, ElementName=BottomFeatures}" Operator="NotEqual" RightOperand="{StaticResource DoingAnimation}" />
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <b:ChangePropertyAction PropertyName="Tag" TargetName="BottomFeatures" Value="{StaticResource DoingAnimation}" />
                                                    <b:InvokeCommandAction Command="{Binding SetIsShowingPassivesDeckCommand}" CommandParameter="{StaticResource TrueValue}"/>
                                                    <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource ShowPassivesHotBar}"/>
                                                </b:EventTrigger>
                                                <b:StoryboardCompletedTrigger Storyboard="{StaticResource ShowPassivesHotBar}">
                                                    <b:ChangePropertyAction PropertyName="Tag" TargetName="BottomFeatures" Value="{x:Null}" />
                                                </b:StoryboardCompletedTrigger>
                                                <b:EventTrigger EventName="Click">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding Path=IsShowingPassivesDeck}" Operator="Equal" RightOperand="{StaticResource TrueValue}" />
                                                                <b:ComparisonCondition LeftOperand="{Binding Path=Tag, ElementName=BottomFeatures}" Operator="NotEqual" RightOperand="{StaticResource DoingAnimation}" />
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <b:ChangePropertyAction PropertyName="Tag" TargetName="BottomFeatures" Value="{StaticResource DoingAnimation}" />
                                                    <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource HidePassivesHotBar}"/>
                                                </b:EventTrigger>
                                                <b:StoryboardCompletedTrigger Storyboard="{StaticResource HidePassivesHotBar}">
                                                    <b:InvokeCommandAction Command="{Binding SetIsShowingPassivesDeckCommand}" CommandParameter="{StaticResource FalseValue}"/>
                                                    <b:ChangePropertyAction PropertyName="Tag" TargetName="BottomFeatures" Value="{x:Null}" />
                                                </b:StoryboardCompletedTrigger>
                                            </b:Interaction.Triggers>

                                            <ls:LSButton.Style>
                                                <Style TargetType="{x:Type ls:LSButton}" BasedOn="{StaticResource BottomLinksStyle}">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsShowingPassivesDeck}" Value="True">
                                                            <Setter Property="Template" Value="{StaticResource ActiveFilterButton}"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ls:LSButton.Style>
                                        </ls:LSButton>
                                    </ListBoxItem>

                                    <!--CUSTOM DECK-->
                                    <ListBoxItem>
                                        <ls:LSButton Content="{Binding Source='he8bcb230g4306g4c9cg9e7eg60623c783f61',Converter={StaticResource TranslatedStringConverter}}" Margin="-4,0,0,0" OverwriteClickSound="UI_HUD_Hotbar_Filter_Click">
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="Click">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding Path=IsShowingCustomDeck}" Operator="Equal" RightOperand="{StaticResource FalseValue}" />
                                                                <b:ComparisonCondition LeftOperand="{Binding Path=Tag, ElementName=BottomFeatures}" Operator="NotEqual" RightOperand="{StaticResource DoingAnimation}" />
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <b:ChangePropertyAction PropertyName="Tag" TargetName="BottomFeatures" Value="{StaticResource DoingAnimation}" />
                                                    <b:InvokeCommandAction Command="{Binding SetIsShowingCustomDeckCommand}" CommandParameter="{StaticResource TrueValue}"/>
                                                    <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource ShowCustomHotBar}"/>
                                                </b:EventTrigger>
                                                <b:StoryboardCompletedTrigger Storyboard="{StaticResource ShowCustomHotBar}">
                                                    <b:ChangePropertyAction PropertyName="Tag" TargetName="BottomFeatures" Value="{x:Null}" />
                                                </b:StoryboardCompletedTrigger>
                                                <b:EventTrigger EventName="Click">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding Path=IsShowingCustomDeck}" Operator="Equal" RightOperand="{StaticResource TrueValue}" />
                                                                <b:ComparisonCondition LeftOperand="{Binding Path=Tag, ElementName=BottomFeatures}" Operator="NotEqual" RightOperand="{StaticResource DoingAnimation}" />
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <b:ChangePropertyAction PropertyName="Tag" TargetName="BottomFeatures" Value="{StaticResource DoingAnimation}" />
                                                    <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource HideCustomHotBar}"/>
                                                </b:EventTrigger>
                                                <b:StoryboardCompletedTrigger Storyboard="{StaticResource HideCustomHotBar}">
                                                    <b:InvokeCommandAction Command="{Binding SetIsShowingCustomDeckCommand}" CommandParameter="{StaticResource FalseValue}"/>
                                                    <b:ChangePropertyAction PropertyName="Tag" TargetName="BottomFeatures" Value="{x:Null}" />
                                                </b:StoryboardCompletedTrigger>
                                            </b:Interaction.Triggers>

                                            <ls:LSButton.Style>
                                                <Style TargetType="{x:Type ls:LSButton}" BasedOn="{StaticResource BottomLinksStyle}">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsShowingCustomDeck}" Value="True">
                                                            <Setter Property="Template" Value="{StaticResource ActiveFilterButton}"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ls:LSButton.Style>
                                        </ls:LSButton>
                                    </ListBoxItem>
                                </ListBox>

                                <!-- Hotbar bottom tabs -->
                                <Grid HorizontalAlignment="Center" Visibility="{Binding Visibility, ElementName=TabsBg}" IsHitTestVisible="False" >
                                    <ls:LSNineSliceImage x:Name="TabsBg" HorizontalAlignment="Center" VerticalAlignment="Center" Height="84" ImageSource="{StaticResource BarBottom}" Slices="170,0, 170, 0" MinWidth="340">
                                        <ls:LSNineSliceImage.Style>
                                            <Style TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                <Setter Property="Width" Value="0"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=Visibility, ElementName=SummonBarBottomGrid}" Value="Visible">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                        <Setter Property="Width" Value="{Binding ActualWidth, ElementName=SummonBarBottomContent, Converter={StaticResource AddConverter}, ConverterParameter=340}"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Path=Visibility, ElementName=SingleHotBarBottomGrid}" Value="Visible">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                        <Setter Property="Width" Value="{Binding ActualWidth, ElementName=SingleHotBarBottomGrid, Converter={StaticResource AddConverter}, ConverterParameter=340}"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ls:LSNineSliceImage.Style>
                                    </ls:LSNineSliceImage>

                                    <ls:LSNineSliceImage HorizontalAlignment="Center" VerticalAlignment="Top" ImageSource="{StaticResource BtnActiveMod}" Slices="12, 0" MinWidth="44" Height="18" 
                                             Width="{Binding ActualWidth, ElementName=TabsBg, Converter={StaticResource AddConverter}, ConverterParameter=-380}" Margin="0,-10,0,0">
                                        <Image Source="{StaticResource ActiveModArrow}" Stretch="UniformToFill" VerticalAlignment="Center" Width="40"/>
                                    </ls:LSNineSliceImage>
                                </Grid>

                                <Grid x:Name="SummonBarBottomGrid" HorizontalAlignment="Center">
                                    <Grid.Style>
                                        <Style TargetType="Grid">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Path=Visibility, ElementName=SummonHotBar}" Value="Visible"/>
                                                        <Condition Binding="{Binding Path=Visibility, ElementName=SingleHotBarBottomGrid}" Value="Collapsed"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <MultiDataTrigger.Setters>
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </MultiDataTrigger.Setters>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>
                                    <TextBlock x:Name="SummonBarBottomContent" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" Text="{Binding CurrentPlayer.SelectedCharacter.Name}"/>
                                </Grid>

                                <!--NAMEPLATE FOR SINGLE DECKS-->
                                <StackPanel x:Name="SingleHotBarBottomGrid" Orientation="Horizontal" HorizontalAlignment="Center"  Visibility="{Binding Path=Visibility, ElementName=SingleHotBar}">
                                    <TextBlock x:Name="SingleHotBarBottomContent" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center">
                            <Run x:Name="SingleHotbarResourceFilterText" Text="{Binding ResourceFilter.Name, StringFormat='{}{0} - '}"/>
                            <Run x:Name="SingleHotbarFilterText" Text="{Binding CurrentSingleHotbarFilter}"/>
                                    </TextBlock>

                                    <StackPanel Orientation="Horizontal" Visibility="{Binding IsShowingItemsToThrow, Converter={StaticResource BoolToVisibleConverter}}" VerticalAlignment="Center" Margin="16,0,0,0">
                                        <ls:LSRadioButton x:Name="AllButton" GroupName="ThrowFilter" VerticalAlignment="Center" Template="{StaticResource ThrowFilterToggleIconButtonTemplate}" Command="{Binding ChangeThrowFilter}" CommandParameter="None" SoundID="UI_HUD_Options_Default" IsChecked="True">
                                            <ls:LSRadioButton.ToolTip>
                                                <ls:LSTooltip IsHitTestVisible="False" Placement="Top">
                                                    <TextBlock VerticalAlignment="Center" Text="{Binding Source='h6675c3a8gbf70g4dc8gb7a5gef27b366fc6c', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipDefaultTextStyle}" />
                                                </ls:LSTooltip>
                                            </ls:LSRadioButton.ToolTip>
                                            <ls:LSRadioButton.Resources>
                                                <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_tab_all.png</ImageSource>
                                                <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_tab_all_active.png</ImageSource>
                                            </ls:LSRadioButton.Resources>
                                        </ls:LSRadioButton>

                                        <ls:LSRadioButton x:Name="WeaponsButton" GroupName="ThrowFilter" VerticalAlignment="Center" Template="{StaticResource ThrowFilterToggleIconButtonTemplate}" Command="{Binding ChangeThrowFilter}" CommandParameter="Weapons" SoundID="UI_HUD_Options_Default" Margin="-16,0">
                                            <ls:LSRadioButton.ToolTip>
                                                <ls:LSTooltip IsHitTestVisible="False" Placement="Top">
                                                    <TextBlock VerticalAlignment="Center" Text="{Binding Source='h813aa7e0g1398g4c7dg9f50g5c1669738c72', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipDefaultTextStyle}" />
                                                </ls:LSTooltip>
                                            </ls:LSRadioButton.ToolTip>
                                            <ls:LSRadioButton.Resources>
                                                <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_tab_EQ.png</ImageSource>
                                                <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_tab_EQ_active.png</ImageSource>
                                            </ls:LSRadioButton.Resources>
                                        </ls:LSRadioButton>

                                        <ls:LSRadioButton x:Name="GrenadesPotionsButton" GroupName="ThrowFilter" VerticalAlignment="Center" Template="{StaticResource ThrowFilterToggleIconButtonTemplate}" Command="{Binding ChangeThrowFilter}" CommandParameter="GrenadesAndPotions" SoundID="UI_HUD_Options_Default">
                                            <ls:LSRadioButton.ToolTip>
                                                <ls:LSTooltip IsHitTestVisible="False" Placement="Top">
                                                    <TextBlock VerticalAlignment="Center" Style="{StaticResource TooltipDefaultTextStyle}" Visibility="Visible">
                                            <Run Text="{Binding Source='hd51768e9g4666g46ffg88c5gef09745da53e', Converter={StaticResource TranslatedStringConverter}}"/>
                                            <Run Text="{Binding Source='hd64bfe4cgadadg4468g8b0ag70330ffc717c', Converter={StaticResource TranslatedStringConverter}}"/>
                                            <Run Text="{Binding Source='h7f9eb342ge980g4848gbd7dgb8f61667c6a7', Converter={StaticResource TranslatedStringConverter}}"/>
                                                    </TextBlock>
                                                </ls:LSTooltip>
                                            </ls:LSRadioButton.ToolTip>
                                            <ls:LSRadioButton.Resources>
                                                <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_tab_pots.png</ImageSource>
                                                <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_tab_pots_active.png</ImageSource>
                                            </ls:LSRadioButton.Resources>
                                        </ls:LSRadioButton>
                                    </StackPanel>

                                    <ls:LSButton x:Name="CloseFilterBtn" Style="{StaticResource SmallCloseButton}" HorizontalAlignment="Right" VerticalAlignment="Stretch" Margin="32,0,-32,0">
                                        <b:Interaction.Triggers>
                                            <b:EventTrigger EventName="Click">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding Path=Tag, ElementName=HotBar}" Operator="Equal" RightOperand="Left" />
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource HideSingleHotBarToLeft}"/>
                                                <b:ChangePropertyAction TargetName="CloseFilterBtn" PropertyName="IsEnabled" Value="False"/>
                                                <b:InvokeCommandAction Command="{Binding Path=DataContext.CancelTaskCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"/>
                                            </b:EventTrigger>
                                            <b:EventTrigger EventName="Click">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding Path=Tag, ElementName=HotBar}" Operator="NotEqual" RightOperand="Left" />
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource HideSingleHotBar}"/>
                                                <b:ChangePropertyAction TargetName="CloseFilterBtn" PropertyName="IsEnabled" Value="False"/>
                                                <b:InvokeCommandAction Command="{Binding Path=DataContext.CancelTaskCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"/>
                                            </b:EventTrigger>
                                            <b:StoryboardCompletedTrigger Storyboard="{StaticResource HideSingleHotBar}">
                                                <b:InvokeCommandAction Command="{Binding ClearSingleHotbarCommand}"/>
                                                <b:ChangePropertyAction TargetName="CloseFilterBtn" PropertyName="IsEnabled" Value="True"/>
                                            </b:StoryboardCompletedTrigger>
                                            <b:StoryboardCompletedTrigger Storyboard="{StaticResource HideSingleHotBarToLeft}">
                                                <b:InvokeCommandAction Command="{Binding ClearSingleHotbarCommand}"/>
                                                <b:ChangePropertyAction TargetName="HotBar" PropertyName="Tag" Value="{x:Null}"/>
                                                <b:ChangePropertyAction TargetName="CloseFilterBtn" PropertyName="IsEnabled" Value="True"/>
                                            </b:StoryboardCompletedTrigger>
                                        </b:Interaction.Triggers>
                                    </ls:LSButton>
                                </StackPanel>
                            </Grid>
                        </Grid>
                    </Grid>

                    <!-- ========= RIGHT HOTBAR CONTENT ========= -->

                    <Grid Grid.Column="2" x:Name="RightPart" IsEnabled="{Binding DataContext.CurrentPlayer.UIData.AllowInteraction, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" VerticalAlignment="Bottom" Margin="0,0,0,16">

                        <Image Source="{StaticResource BarBodyBtnGroup}" Stretch="None" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>

                        <ContentControl x:Name="MovementCircle" DataContext="{Binding CurrentPlayer.UIData.MovementResourceCostPreview}" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,0,154,13">
                            <ContentControl.Template>
                                <ControlTemplate>
                                    <ControlTemplate.Resources>
                                        <Storyboard x:Key="GlowMovementError">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="MovementErrorBar">
                                                <DiscreteDoubleKeyFrame KeyTime="0:0:0.0" Value="0.9"/>
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.68" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="MovementErrorBar">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>

                                        <BitmapImage x:Key="BarBodyBtnGroupInnerScaledDown" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_body_buttonGroup_inner_scaledDown.png" />
                                        <BitmapImage x:Key="BarSpeedFiller" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_speed_filler.png" />
                                        <BitmapImage x:Key="BarSpeed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_speed.png" />
                                        <BitmapImage x:Key="BarBodyBtnGroupInnerDefault" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_body_buttonGroup_inner_default.png" />
                                    </ControlTemplate.Resources>
                                    <Grid x:Name="CircleRoot" ToolTipService.Placement="Right" ToolTipService.IsEnabled="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}">
                                        <Grid.ToolTip>
                                            <ls:LSTooltip DataContext="{Binding DataContext.CurrentPlayer.SelectedCharacter.Stats.MovementResource, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                                <ls:LSTooltip.Content>
                                                    <TextBlock Style="{StaticResource TooltipBaseTextStyle}">
                                                        <Run>
                                                            <Run.Style>
                                                                <Style TargetType="Run">
                                                                    <Setter Property="Text" Value="{Binding Value, Converter={StaticResource UnitConverter}, ConverterParameter='Distance RoundUp N1'}"/>
                                                                    <Style.Triggers>
                                                                        <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter='1.5'}" Value="True">
                                                                            <Setter Property="Text" Value="{Binding Value, Converter={StaticResource UnitConverter}, ConverterParameter='Distance'}"/>
                                                                        </DataTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Run.Style>
                                                        </Run><Run Text="{Binding MaxValue, Converter={StaticResource UnitConverter}, ConverterParameter='Distance Short', StringFormat='/{0}'}"/>
                                                    </TextBlock>
                                                </ls:LSTooltip.Content>
                                            </ls:LSTooltip>
                                        </Grid.ToolTip>

                                        <Image x:Name="InnerBody" VerticalAlignment="Center" HorizontalAlignment="Center" Source="{StaticResource BarBodyBtnGroupInnerScaledDown}" Stretch="None"/>

                                        <ls:LSPie x:Name="HighlightPie" Style="{StaticResource MainPiesStyle}">
                                            <ls:LSPie.Value>
                                                <MultiBinding Converter="{StaticResource DivideMultiConverter}">
                                                    <Binding Path="ActionResource.Value"/>
                                                    <Binding Path="ActionResource.MaxValue"/>
                                                </MultiBinding>
                                            </ls:LSPie.Value>
                                            <Image x:Name="HighlightPieFiller" Source="{StaticResource BarSpeedFiller}" Stretch="None"/>
                                            <Ellipse Fill="#D0FFFFFF">
                                                <Ellipse.OpacityMask>
                                                    <ImageBrush ImageSource="{StaticResource BarSpeedFiller}"/>
                                                </Ellipse.OpacityMask>
                                            </Ellipse>
                                        </ls:LSPie>

                                        <ls:LSPie x:Name="MovementPie" Style="{StaticResource MainPiesStyle}">
                                            <ls:LSPie.Value>
                                                <MultiBinding Converter="{StaticResource DivideMultiConverter}">
                                                    <Binding Path="ValueAfterUse"/>
                                                    <Binding Path="ActionResource.MaxValue"/>
                                                </MultiBinding>
                                            </ls:LSPie.Value>
                                            <Image x:Name="MovementPieFiller" Source="{StaticResource BarSpeedFiller}" Stretch="None"/>
                                        </ls:LSPie>

                                        <ls:LSPie x:Name="UsagePie" Style="{StaticResource MainPiesStyle}" Visibility="Collapsed">
                                            <ls:LSPie.Value>
                                                <MultiBinding Converter="{StaticResource DivideMultiConverter}">
                                                    <Binding Path="ActionResource.Value"/>
                                                    <Binding Path="ActionResource.MaxValue"/>
                                                </MultiBinding>
                                            </ls:LSPie.Value>
                                            <Image x:Name="UsagePieFiller" Stretch="None">
                                                <Image.Style>
                                                    <Style TargetType="Image">
                                                        <Setter Property="Source" Value="{StaticResource BarSpeedFiller}"/>
                                                        <Style.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Value="True">
                                                                        <Condition.Binding>
                                                                            <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                                                                                <Binding Path="Cost" Converter="{StaticResource AddConverter}" ConverterParameter="0.001"/>
                                                                                <Binding Path="ActionResource.Value"/>
                                                                            </MultiBinding>
                                                                        </Condition.Binding>
                                                                    </Condition>
                                                                    <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.Moving, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                                                                    <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.IsCasting, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_speed_filler_missing.png"/>
                                                            </MultiDataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Image.Style>
                                            </Image>
                                        </ls:LSPie>

                                        <Image x:Name="MovementErrorBar" VerticalAlignment="Center" HorizontalAlignment="Center" Visibility="Collapsed" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_speed_filler_missing.png" Stretch="None"/>

                                        <Image x:Name="SpeedBar" VerticalAlignment="Center" HorizontalAlignment="Center" Source="{StaticResource BarSpeed}" Stretch="None"
                                               ls:TutorialProperties.TargetID="TUT_Combat" ls:TutorialProperties.TargetStep="4" ls:TutorialProperties.ModalType="Bottom" ls:TutorialProperties.Padding="6"/>

                                        <Image x:Name="FullInnerBody" VerticalAlignment="Center" HorizontalAlignment="Center" Source="{StaticResource BarBodyBtnGroupInnerDefault}" Stretch="Uniform" Width="234"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.CanEndTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False">
                                            <Setter TargetName="SpeedBar" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_speed_disabled.png"/>
                                            <Setter TargetName="HighlightPieFiller" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_speed_disabled_filler.png"/>
                                            <Setter TargetName="MovementPieFiller" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_speed_disabled_filler.png"/>
                                            <Setter TargetName="UsagePieFiller" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_speed_disabled_filler.png"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.Moving, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True">
                                            <Setter TargetName="MovementPie" Property="Visibility" Value="Collapsed"/>
                                            <Setter TargetName="HighlightPie" Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ActionResource.Value}" Value="0">
                                            <Setter TargetName="MovementPie" Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Value="True">
                                                    <Condition.Binding>
                                                        <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                                                            <Binding Path="Cost" Converter="{StaticResource AddConverter}" ConverterParameter="0.001"/>
                                                            <Binding Path="ActionResource.Value"/>
                                                        </MultiBinding>
                                                    </Condition.Binding>
                                                </Condition>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.IsCasting, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="MovementPie" Property="Visibility" Value="Collapsed"/>
                                            <Setter TargetName="HighlightPie" Property="Visibility" Value="Collapsed"/>
                                        </MultiDataTrigger>
                                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetName="FullInnerBody" Storyboard.TargetProperty="Width" From="234" To="272" Duration="0:0:0.2"/>
                                                        <DoubleAnimation Storyboard.TargetName="MovementPie" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.2"/>
                                                        <DoubleAnimation Storyboard.TargetName="HighlightPie" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.2"/>
                                                        <DoubleAnimation Storyboard.TargetName="UsagePie" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.2"/>
                                                        <DoubleAnimation Storyboard.TargetName="SpeedBar" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.2"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.EnterActions>
                                            <DataTrigger.ExitActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetName="FullInnerBody" Storyboard.TargetProperty="Width" To="234" Duration="0:0:0.2"/>
                                                        <DoubleAnimation Storyboard.TargetName="MovementPie" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2"/>
                                                        <DoubleAnimation Storyboard.TargetName="HighlightPie" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2"/>
                                                        <DoubleAnimation Storyboard.TargetName="UsagePie" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2"/>
                                                        <DoubleAnimation Storyboard.TargetName="SpeedBar" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.ExitActions>
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.Moving, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="UsagePie" Property="Visibility" Value="Visible"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Value="True">
                                                    <Condition.Binding>
                                                        <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                                                            <Binding Path="Cost" Converter="{StaticResource AddConverter}" ConverterParameter="0.001"/>
                                                            <Binding Path="ActionResource.Value"/>
                                                        </MultiBinding>
                                                    </Condition.Binding>
                                                </Condition>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.IsCasting, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="UsagePie" Property="Visibility" Value="Visible"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.UIData.MovementResourceCostPreview.ActionResource.Value, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="0"/>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.TryingToMove, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <MultiDataTrigger.EnterActions>
                                                <BeginStoryboard x:Name="GlowMovementError" Storyboard="{StaticResource GlowMovementError}"/>
                                            </MultiDataTrigger.EnterActions>
                                        </MultiDataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ContentControl.Template>
                        </ContentControl>

                        <ls:LSButton x:Name="EnterFTBButton" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="{StaticResource TurnButtonMargin}" ls:TutorialProperties.TargetID="TUT_FTB" ls:TutorialProperties.ModalType="Bottom" ls:TutorialProperties.Padding="10">
                            <ls:LSButton.Resources>
                                <KeyTime x:Key="PathStrokeGlowAnimTime">0:0:0.1</KeyTime>

                                <System:Double x:Key="PSAnimVal1a" >-0.9</System:Double>
                                <System:Double x:Key="PSAnimVal2a" >-0.45</System:Double>
                                <System:Double x:Key="PSAnimVal3a" >0.0</System:Double>
                                <System:Double x:Key="PSAnimVal1b" >1.0</System:Double>
                                <System:Double x:Key="PSAnimVal2b" >1.45</System:Double>
                                <System:Double x:Key="PSAnimVal3b" >1.9</System:Double>
                            </ls:LSButton.Resources>
                            <ls:LSButton.Style>
                                <Style TargetType="ls:LSButton">
                                    <Setter Property="Command" Value="{Binding Path=DataContext.ToggleTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"/>
                                    <Setter Property="DataContext" Value="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIEnterTurnBased'}"/>
                                    <Setter Property="BoundEvent" Value="UIEnterTurnBased"/>
                                    <Setter Property="Template" Value="{StaticResource EnterFTBTemplate}"/>
                                    <Setter Property="SoundID" Value="UI_HUD_Hotbar_EnterFTB"/>
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ls:LSButton.Style>
                        </ls:LSButton>

                        <ls:LSButton x:Name="EndTurnButton" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="{StaticResource EndTurnButtonMargin}" ls:TutorialProperties.TargetID="TUT_EndTurn" ls:TutorialProperties.ModalType="Bottom" ls:TutorialProperties.Padding="10">
                            <ls:LSButton.Resources>
                                <KeyTime x:Key="PathStrokeGlowAnimTime">0:0:0.1</KeyTime>

                                <System:Double x:Key="PSAnimVal1a" >-0.9</System:Double>
                                <System:Double x:Key="PSAnimVal2a" >-0.45</System:Double>
                                <System:Double x:Key="PSAnimVal3a" >0.0</System:Double>
                                <System:Double x:Key="PSAnimVal1b" >1.0</System:Double>
                                <System:Double x:Key="PSAnimVal2b" >1.45</System:Double>
                                <System:Double x:Key="PSAnimVal3b" >1.9</System:Double>
                            </ls:LSButton.Resources>
                            <ls:LSButton.Style>
                                <Style TargetType="ls:LSButton">
                                    <Setter Property="Command" Value="{Binding Path=DataContext.EndTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"/>
                                    <Setter Property="DataContext" Value="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIEndTurn'}"/>
                                    <Setter Property="BoundEvent" Value="UIEndTurn"/>
                                    <Setter Property="Template" Value="{StaticResource EndTurnTemplate}"/>
                                    <Setter Property="Margin" Value="0,0,0,0"/>
                                    <Setter Property="SoundID" Value="UI_HUD_Hotbar_EndTurn"/>
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Setter Property="IsEnabled" Value="False"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ls:LSButton.Style>
                            <ls:LSButton.Clip>
                                <EllipseGeometry Center="112,112" RadiusX="112" RadiusY="112" />
                            </ls:LSButton.Clip>
                        </ls:LSButton>

                        <Image x:Name="MovementIcon" Stretch="None" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,268,0" IsHitTestVisible="False">
                            <Image.Style>
                                <Style TargetType="Image">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_speed.png"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding CurrentPlayer.UIData.MovementResourceCostPreview.ActionResource.Value}" Value="0">
                                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_speed_missing.png"/>
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Value="True">
                                                    <Condition.Binding>
                                                        <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                                                            <Binding Path="CurrentPlayer.UIData.MovementResourceCostPreview.Cost" Converter="{StaticResource AddConverter}" ConverterParameter="0.001"/>
                                                            <Binding Path="CurrentPlayer.UIData.MovementResourceCostPreview.ActionResource.Value"/>
                                                        </MultiBinding>
                                                    </Condition.Binding>
                                                </Condition>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.Moving, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.IsCasting, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_speed_missing.png"/>
                                        </MultiDataTrigger>
                                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.CanEndTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>

                        <ls:LSButton x:Name="FleeButton" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="{StaticResource FleeButtonMargin}"
                                     Command="{Binding DataContext.Flee, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
                                     DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIFleeFromCombat'}"
                                     BoundEvent="UIFleeFromCombat" SoundID="UI_HUD_Hotbar_ExitFTB" ToolTipService.Placement="Top" ToolTipService.ShowOnDisabled="True" 
                                     IsEnabled="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.CanFlee, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}">
                            <ls:LSButton.ToolTip>
                                <ls:LSTooltip Content="{Binding Path=DataContext, ElementName=HotBar}">
                                    <ls:LSTooltip.ContentTemplate>
                                        <DataTemplate>
                                            <StackPanel MaxWidth="{StaticResource MaxTooltipContentWidth}" >
                                                <TextBlock Style="{StaticResource TooltipTitleStyle}" Text="{Binding Source='h4f3e940eg341bg4f48gb10eg417fcfff1064',Converter={StaticResource TranslatedStringConverter}}"/>

                                                <TextBlock Style="{StaticResource TooltipSubTitleNoCollapseStyle}">
                                                    <Run Text="{Binding DataContext.Caption, ElementName=FleeButton}"/>
                                                    <Run Text=" ["/>
                                                    <Run Text="{Binding DataContext.Shortcut, ElementName=FleeButton}" Foreground="{DynamicResource TooltipColor.Secondary}"/>
                                                    <Run Text="]"/>
                                                </TextBlock>

                                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h6ec208f3g63e7g4eb0g8c22g5e6f893da306', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>

                                                <StackPanel Orientation="Horizontal" Visibility="{Binding Path=CurrentPlayer.SelectedCharacter.FleeBlockCause, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}" Margin="0,8,0,0">
                                                    <Image Source="{StaticResource IconWarning}" VerticalAlignment="Center"/>

                                                    <StackPanel Orientation="Horizontal"  VerticalAlignment="Center" MaxWidth="{StaticResource DetailSectionWidth}" Margin="8,0,0,0">
                                                        <TextBlock Foreground="{StaticResource TooltipColor.Warning}" Text="{Binding Path=CurrentPlayer.SelectedCharacter.FleeBlockCause}" Style="{StaticResource TooltipStringBodyStyle}"/>
                                                        <TextBlock Foreground="{StaticResource TooltipColor.Warning}" Visibility="{Binding CurrentPlayer.SelectedCharacter.FleeDistance.IsValid, Converter={StaticResource BoolToVisibleConverter}}" Style="{StaticResource TooltipStringBodyStyle}">
                                                            <Run Text="{Binding CurrentPlayer.SelectedCharacter.FleeDistance.Value, Converter={StaticResource UnitConverter}, ConverterParameter='Distance N1', StringFormat=' ({0}'}"/><Run
                                                                Text="{Binding CurrentPlayer.SelectedCharacter.FleeDistance.Max, Converter={StaticResource UnitConverter}, ConverterParameter='Distance Short N1', StringFormat='/{0})'}"/>
                                                        </TextBlock>
                                                    </StackPanel>
                                                </StackPanel>
                                            </StackPanel>
                                        </DataTemplate>
                                    </ls:LSTooltip.ContentTemplate>
                                </ls:LSTooltip>
                            </ls:LSButton.ToolTip>
                            <ls:LSButton.Template>
                                <ControlTemplate TargetType="ls:LSButton">
                                    <Grid x:Name="buttonPanel">
                                        <Image x:Name="img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_esc_d.png" Stretch="None"/>
                                        <Image x:Name="ico" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_flee.png" Stretch="None"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_esc_h.png"/>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_esc_p.png"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_esc_d.png"/>
                                            <Setter TargetName="ico" Property="Opacity" Value="0.75"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ls:LSButton.Template>
                            <ls:LSButton.Style>
                                <Style TargetType="ls:LSButton">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.CharacterMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="InCombat">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ls:LSButton.Style>
                        </ls:LSButton>

                        <ls:LSButton x:Name="ExitFTBButton" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="10,0,0,48"
                             IsEnabled="{Binding Path=DataContext.CurrentPlayer.IsCurrentTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
                             Command="{Binding DataContext.ToggleTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
                             DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UILeaveTurnBased'}"
                             BoundEvent="UILeaveTurnBased" SoundID="UI_HUD_Hotbar_ExitFTB">
                            <ls:LSButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </ls:LSButton.RenderTransform>
                            <ls:LSButton.Template>
                                <ControlTemplate TargetType="ls:LSButton">
                                    <Grid ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Center" ToolTipService.VerticalOffset="-84">
                                        <Image x:Name="ExitFTButtonBg" Source="{StaticResource ExitFTBBg}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="None" Margin="0,0,-220,0"/>
                                        <Border x:Name="ExitFTBText" Width="184" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,0,-300,0">
                                            <TextBlock Text="{Binding Source=h5afd053agafd1g4111gbea5gc7bccff65ffd, Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Center" HorizontalAlignment="Center" TextAlignment="Center" Foreground="{StaticResource LS_specialTxtColor}" FontSize="{StaticResource ScaledSmallFontSize}"/>
                                        </Border>
                                        <Image x:Name="img" Source="{StaticResource BtnSmallDefault}" Stretch="None"/>
                                        <Image x:Name="ico" Source="{StaticResource ExitFTBIcon}" Stretch="None"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_small_default_h.png"/>
                                            <Setter TargetName="ico" Property="Source" Value="{StaticResource ExitFTBIconHighlight}"/>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_small_default_p.png"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter TargetName="img" Property="Source" Value="{StaticResource BtnSmallDefault}"/>
                                            <Setter TargetName="ico" Property="Opacity" Value="0.75"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ls:LSButton.Template>
                            <ls:LSButton.Style>
                                <Style TargetType="ls:LSButton">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.CharacterMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="InFTB">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ls:LSButton.Style>
                        </ls:LSButton>

                        <ls:LSInputBinding x:Name="ShortRestShortcut" BoundEvent="ShortRest" PlayerId="{Binding CurrentPlayer.PlayerId}" Command="{Binding ShortRest}" IsEnabled="{Binding CurrentPlayer.SelectedCharacter.IsShortRestAvailable}" />

                        <Menu x:Name="RestMenu" Background="Transparent" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,0,26,78" ls:TooltipExtender.Owner="{Binding DataContext.CurrentPlayer.SelectedCharacter, ElementName=HotBar}"
                              IsEnabled="{Binding Data.LongRest.IsActive, Converter={StaticResource InvertBoolConverter}}">
                            <!-- Container Item -->
                            <MenuItem x:Name="RestItem">
                                <MenuItem.Template>
                                    <ControlTemplate TargetType="MenuItem">
                                        <Grid Margin="-16" ClipToBounds="False">
                                            <Grid x:Name="RestSubButtons" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,50" Height="0" Visibility="{Binding Visibility, ElementName=RestMenu}" IsHitTestVisible="{TemplateBinding IsSubmenuOpen}" >
                                                <ItemsPresenter />
                                            </Grid>

                                            <Grid x:Name="RestButton" HorizontalAlignment="Center" VerticalAlignment="Bottom" ToolTipService.Placement="Right">
                                                <Grid.ToolTip>
                                                    <ls:LSTooltip IsHitTestVisible="False" Placement="Right">
                                                        <TextBlock Text="{Binding Source='hedd2ea0cgc98cg4faega9b6g72105a66f28b', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
                                                    </ls:LSTooltip>
                                                </Grid.ToolTip>

                                                <Image x:Name="RestButtonBg" Source="{StaticResource BtnSmallDefault}" Stretch="None"/>
                                                <Image x:Name="RestButtonIcon" Source="{StaticResource IconCamp}" Stretch="None"/>

                                                <b:Interaction.Triggers>
                                                    <b:EventTrigger EventName="MouseEnter">
                                                        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                                    </b:EventTrigger>

                                                    <b:EventTrigger EventName="MouseDown">
                                                        <ls:LSPlaySound Sound="UI_HUD_RestMenu_Open_Click"/>
                                                    </b:EventTrigger>

                                                    <b:PropertyChangedTrigger Binding="{Binding IsSubmenuOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                                        <b:Interaction.Behaviors>
                                                            <b:ConditionBehavior>
                                                                <b:ConditionalExpression>
                                                                    <b:ComparisonCondition LeftOperand="{Binding IsSubmenuOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}" Operator="Equal" RightOperand="True"/>
                                                                </b:ConditionalExpression>
                                                            </b:ConditionBehavior>
                                                        </b:Interaction.Behaviors>
                                                        <!-- Tutorial UI Event - Rest Menu Opened-->
                                                        <b:InvokeCommandAction Command="{Binding TutorialEvent}" CommandParameter="394c5454-28a2-433d-9dca-02a663e93cd1"/>
                                                    </b:PropertyChangedTrigger>

                                                    <b:PropertyChangedTrigger Binding="{Binding IsSubmenuOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                                        <b:Interaction.Behaviors>
                                                            <b:ConditionBehavior>
                                                                <b:ConditionalExpression>
                                                                    <b:ComparisonCondition LeftOperand="{Binding IsSubmenuOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}" Operator="Equal" RightOperand="False"/>
                                                                </b:ConditionalExpression>
                                                            </b:ConditionBehavior>
                                                        </b:Interaction.Behaviors>
                                                    </b:PropertyChangedTrigger>
                                                </b:Interaction.Triggers>
                                            </Grid>
                                        </Grid>

                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="RestButtonBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_small_default_h.png"/>
                                                <Setter TargetName="RestButtonIcon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_camp_h.png"/>
                                            </Trigger>

                                            <Trigger Property="IsSubmenuOpen" Value="True">
                                                <Setter TargetName="RestButtonBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_small_default_h.png"/>

                                                <Trigger.EnterActions>
                                                    <BeginStoryboard Storyboard="{StaticResource ShowRestButtonsAnimation}"/>
                                                </Trigger.EnterActions>
                                                <Trigger.ExitActions>
                                                    <BeginStoryboard Storyboard="{StaticResource HideRestButtonsAnimation}"/>
                                                </Trigger.ExitActions>
                                            </Trigger>

                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}" />
                                            </Trigger>

                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter TargetName="RestButtonBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_small_default_p.png"/>
                                            </Trigger>

                                            <!-- Tutorial checks -->
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsSubmenuOpen, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                                                    <Condition Binding="{Binding Tag, ElementName=ShortRestItem}" Value="True"/>
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.EnterActions>
                                                    <BeginStoryboard Storyboard="{StaticResource ShowRestButtonsAnimation}"/>
                                                </MultiDataTrigger.EnterActions>
                                                <MultiDataTrigger.ExitActions>
                                                    <BeginStoryboard Storyboard="{StaticResource HideRestButtonsAnimation}"/>
                                                </MultiDataTrigger.ExitActions>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsSubmenuOpen, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                                                    <Condition Binding="{Binding Tag, ElementName=LongRestItem}" Value="True"/>
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.EnterActions>
                                                    <BeginStoryboard Storyboard="{StaticResource ShowRestButtonsAnimation}"/>
                                                </MultiDataTrigger.EnterActions>
                                                <MultiDataTrigger.ExitActions>
                                                    <BeginStoryboard Storyboard="{StaticResource HideRestButtonsAnimation}"/>
                                                </MultiDataTrigger.ExitActions>
                                            </MultiDataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </MenuItem.Template>

                                <!-- Target for 2 tutorials (one attached to the MenuItem, the other to the inner Grid) -->
                                <!-- Tag is used to expose if this subitem is showing any tutorial -->
                                <!-- We need to manually reflect IsAnimating since inheritance is somehow broken and it doesn't reach this point -->
                                <MenuItem x:Name="ShortRestItem" Style="{StaticResource SubMenuItemStyle}" Command="{Binding ShortRest}" IsEnabled="{Binding CurrentPlayer.SelectedCharacter.IsShortRestAvailable}" ls:TutorialProperties.TargetID="TUT_ShortRestDowned" ls:TutorialProperties.ModalType="RightBottom" ls:TutorialProperties.IsAnimating="{Binding (ls:TutorialProperties.IsAnimating), RelativeSource={RelativeSource AncestorType={x:Type ItemsPresenter}}}">
                                    <MenuItem.ToolTip>
                                        <ls:LSTooltip IsHitTestVisible="False" Placement="Right" VerticalOffset="-16" ls:TooltipExtender.Owner="{Binding DataContext.CurrentPlayer.SelectedCharacter, ElementName=HotBar}">
                                            <ls:LSTooltip.ContentTemplate>
                                                <DataTemplate>
                                                    <StackPanel MaxWidth="{StaticResource MaxTooltipContentWidth}" >
                                                        <TextBlock Style="{StaticResource TooltipTitleStyle}" Text="{Binding Source='h199b711fg12f1g49c1ga68dg576a864a1fc2',Converter={StaticResource TranslatedStringConverter}}"/>

                                                        <TextBlock Style="{StaticResource TooltipSubTitleNoCollapseStyle}">
                                                            <TextBlock.Text>
                                                                <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                                    <Binding Source="h06b622ccg2ab1g4647g8339g6ea9f40583bc"/>
                                                                    <Binding Path="(ls:TooltipExtender.Owner).Stats.ShortRestPointsResource.Value" RelativeSource="{RelativeSource Mode=TemplatedParent}"/>
                                                                    <Binding Path="(ls:TooltipExtender.Owner).Stats.ShortRestPointsResource.MaxValue" RelativeSource="{RelativeSource Mode=TemplatedParent}"/>
                                                                </MultiBinding>
                                                            </TextBlock.Text>
                                                        </TextBlock>

                                                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h5f8707edgc150g4445gaefeg8fe0236fca03', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
                                                    </StackPanel>
                                                </DataTemplate>
                                            </ls:LSTooltip.ContentTemplate>
                                        </ls:LSTooltip>
                                    </MenuItem.ToolTip>
                                    <MenuItem.Template>
                                        <ControlTemplate TargetType="MenuItem">
                                            <Grid x:Name="ShortRestGrid" HorizontalAlignment="Center" VerticalAlignment="Bottom" ls:TutorialProperties.TargetID="TUT_ShortRest" ls:TutorialProperties.ModalType="RightBottom">
                                                <Image x:Name="bgImg" Source="{StaticResource BtnPop}" Stretch="None"/>
                                                <Image x:Name="ico" Source="{StaticResource IconShortRest}" Stretch="None"/>
                                                <StackPanel x:Name="DotsPanel" Orientation="Horizontal"  Margin="34,0,0,-28">
                                                    <Image x:Name="dot1" Source="{StaticResource IconShortRestNode}" Stretch="None" Margin="-8,-12,-8,-8"/>
                                                    <Image x:Name="dot2" Source="{StaticResource IconShortRestNode}" Stretch="None" Margin="-10,-12,-8,-8"/>
                                                </StackPanel>

                                                <b:Interaction.Triggers>
                                                    <b:EventTrigger EventName="MouseEnter">
                                                        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                                    </b:EventTrigger>

                                                    <b:EventTrigger EventName="MouseDown">
                                                        <ls:LSPlaySound Sound="UI_HUD_ShortRest_Press"/>
                                                    </b:EventTrigger>
                                                    <b:EventTrigger EventName="MouseUp">
                                                        <ls:LSPlaySound Sound="UI_HUD_ShortRest_Click"/>
                                                    </b:EventTrigger>
                                                </b:Interaction.Triggers>
                                            </Grid>

                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pop_h.png" TargetName="bgImg"/>
                                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_shortRest_h.png" TargetName="ico"/>
                                                </Trigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pop_p.png" TargetName="bgImg"/>
                                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_shortRest_h.png" TargetName="ico"/>
                                                </Trigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pop_disabled.png" TargetName="bgImg"/>
                                                    <Setter Property="Source" Value="{StaticResource IconShortRest}" TargetName="ico"/>
                                                    <Setter Property="Opacity" Value="0.5" TargetName="ico"/>
                                                    <Setter Property="Opacity" Value="0.7" TargetName="DotsPanel" />
                                                </Trigger>

                                                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.Stats.ShortRestPointsResource.Value}" Value="0">
                                                    <Setter TargetName="dot1" Property="Visibility" Value="Collapsed"/>
                                                    <Setter TargetName="dot2" Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.Stats.ShortRestPointsResource.Value}" Value="1">
                                                    <Setter TargetName="dot2" Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding (ls:TutorialProperties.IsShowingTutorial), RelativeSource={RelativeSource Mode=Self}}" Value="True">
                                                    <Setter Property="Tag" Value="True"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding (ls:TutorialProperties.IsShowingTutorial), ElementName=ShortRestGrid}" Value="True">
                                                    <Setter Property="Tag" Value="True"/>
                                                </DataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </MenuItem.Template>
                                </MenuItem>

                                <!-- Target for 2 tutorials (one attached to the MenuItem, the other to the inner Grid) -->
                                <!-- Tag is used to expose if this subitem is showing any tutorial -->
                                <!-- We need to manually reflect IsAnimating since inheritance is somehow broken and it doesn't reach this point -->
                                <MenuItem x:Name="LongRestItem" Style="{StaticResource SubMenuItemStyle}" Command="{Binding CampTravel}" ls:TutorialProperties.TargetID="TUT_LongRest" ls:TutorialProperties.ModalType="RightBottom" ls:TutorialProperties.IsAnimating="{Binding (ls:TutorialProperties.IsAnimating), RelativeSource={RelativeSource AncestorType={x:Type ItemsPresenter}}}">
                                    <MenuItem.ToolTip>
                                        <ls:LSTooltip IsHitTestVisible="False" Placement="Right" VerticalOffset="-16" ls:AttachedProperties.InheritedTag="{Binding DataContext.CurrentPlayer, ElementName=HotBar}">
                                            <ls:LSTooltip.ContentTemplate>
                                                <DataTemplate>
                                                    <StackPanel MaxWidth="{StaticResource MaxTooltipContentWidth}" >
                                                        <TextBlock Style="{StaticResource TooltipTitleStyle}" Text="{Binding Source='h54a9edbag9cf2g4f2egb188g1431d56c3159',Converter={StaticResource TranslatedStringConverter}}"/>

                                                        <TextBlock Style="{StaticResource TooltipSubTitleNoCollapseStyle}">
                                                            <Run Text="{Binding Source='h3cef439fg92cdg4b5bgb3fdg5fd5db63d33a', Converter={StaticResource TranslatedStringConverter}}"/><Run
                                                                Text="{Binding Source='hb897c56egaa6fg460bg8676g8ebfa0340954', Converter={StaticResource TranslatedStringConverter}}"/><Run 
                                                                Text="{Binding (ls:AttachedProperties.InheritedTag).PartySupplies, RelativeSource={RelativeSource Mode=Self}}"/><Run
                                                                Text="{Binding Source='hd64bfe4cgadadg4468g8b0ag70330ffc717c', Converter={StaticResource TranslatedStringConverter}}"/><Run
                                                                Text="{Binding (ls:AttachedProperties.InheritedTag).RequiredPartySupplies, RelativeSource={RelativeSource Mode=Self}}"/>
                                                        </TextBlock>

                                                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h5c980d92gdc9bg4a6dg998bg74dca19575e1', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
                                                    </StackPanel>
                                                </DataTemplate>
                                            </ls:LSTooltip.ContentTemplate>
                                        </ls:LSTooltip>
                                    </MenuItem.ToolTip>
                                    <MenuItem.Template>
                                        <ControlTemplate TargetType="MenuItem">
                                            <Grid x:Name="LongRestGrid" HorizontalAlignment="Center" VerticalAlignment="Bottom" ls:TutorialProperties.TargetID="TUT_Camp" ls:TutorialProperties.ModalType="RightBottom">
                                                <Image x:Name="BtnBg" Source="{StaticResource BtnPop}" Stretch="None"/>
                                                <Image x:Name="icon" Source="{StaticResource IconLongRest}" Stretch="None"/>

                                                <b:Interaction.Triggers>
                                                    <b:EventTrigger EventName="MouseEnter">
                                                        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                                    </b:EventTrigger>

                                                    <b:EventTrigger EventName="MouseDown">
                                                        <ls:LSPlaySound Sound="UI_HUD_Party_Campsite"/>
                                                    </b:EventTrigger>
                                                </b:Interaction.Triggers>
                                            </Grid>

                                            <ControlTemplate.Triggers>
                                                <DataTrigger Binding="{Binding CurrentPlayer.EndTheDayState}" Value="Disabled">
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding CurrentPlayer.EndTheDayState}" Value="Unavailable">
                                                    <Setter Property="IsEnabled" Value="False"/>
                                                </DataTrigger>

                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="BtnBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pop_h.png"/>
                                                    <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_longRest_h.png" />
                                                </Trigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter TargetName="BtnBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pop_p.png" />
                                                    <Setter TargetName="icon" Property="Source" Value="{StaticResource IconLongRest}" />
                                                    <Setter TargetName="icon" Property="Margin" Value="0,4,0,0" />
                                                </Trigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter TargetName="BtnBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pop_disabled.png" />
                                                    <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_longRest_disabled.png" />
                                                    <Setter TargetName="icon" Property="Opacity" Value="0.5" />
                                                </Trigger>

                                                <DataTrigger Binding="{Binding (ls:TutorialProperties.IsShowingTutorial), RelativeSource={RelativeSource Mode=Self}}" Value="True">
                                                    <Setter Property="Tag" Value="True"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding (ls:TutorialProperties.IsShowingTutorial), ElementName=LongRestGrid}" Value="True">
                                                    <Setter Property="Tag" Value="True"/>
                                                </DataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </MenuItem.Template>
                                </MenuItem>

                                <MenuItem x:Name="GoToCampItem" Style="{StaticResource SubMenuItemStyle}" Command="{Binding GoToCamp}" IsEnabled="False">
                                    <MenuItem.ToolTip>
                                        <ls:LSTooltip x:Name="GoToCampTooltip" IsHitTestVisible="False" Placement="Right" VerticalOffset="-16" ls:TooltipExtender.Owner="{Binding DataContext.CurrentPlayer.SelectedCharacter, ElementName=HotBar}">
                                            <ls:LSTooltip.ContentTemplate>
                                                <DataTemplate>
                                                    <StackPanel MaxWidth="{StaticResource MaxTooltipContentWidth}" >
                                                        <TextBlock Style="{StaticResource TooltipTitleStyle}" Text="{Binding Source='hc7281314gd545g490fgbfc8g1be95db0df3b',Converter={StaticResource TranslatedStringConverter}}"/>
                                                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h4d8321bdg8abfg4ab4g8077g9e691472f7ad', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
                                                    </StackPanel>
                                                </DataTemplate>
                                            </ls:LSTooltip.ContentTemplate>
                                        </ls:LSTooltip>
                                    </MenuItem.ToolTip>
                                    <MenuItem.Template>
                                        <ControlTemplate TargetType="MenuItem">
                                            <Grid x:Name="LongRestGrid" HorizontalAlignment="Center" VerticalAlignment="Bottom">
                                                <Image x:Name="BtnBg" Source="{StaticResource BtnPop}" Stretch="None"/>
                                                <Image x:Name="icon" Source="{StaticResource IconCamp}" Stretch="None"/>

                                                <b:Interaction.Triggers>
                                                    <b:EventTrigger EventName="MouseEnter">
                                                        <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                                    </b:EventTrigger>

                                                    <b:EventTrigger EventName="MouseDown">
                                                        <ls:LSPlaySound Sound="UI_HUD_Party_Campsite_Confirm_Click"/>
                                                    </b:EventTrigger>
                                                </b:Interaction.Triggers>
                                            </Grid>

                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="BtnBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pop_h.png"/>
                                                    <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_camp_h.png" />
                                                </Trigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter TargetName="BtnBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pop_p.png" />
                                                    <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_camp_h.png" />
                                                    <Setter TargetName="icon" Property="Margin" Value="0,4,0,0" />
                                                </Trigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter TargetName="BtnBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pop_disabled.png" />
                                                    <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_camp_disabled.png" />
                                                    <Setter TargetName="icon" Property="Opacity" Value="0.4" />
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </MenuItem.Template>
                                </MenuItem>
                            </MenuItem>
                        </Menu>

                        <ls:LSButton x:Name="BackToPlayableCombatantButton" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="98,-140,0,0" Template="{StaticResource FloatingFrameButton}"
                                     Command="{Binding SelectActiveCharacterCombatant}">
                            <ls:LSButton.ToolTip>
                                <ls:LSTooltip IsHitTestVisible="False" Placement="Right" VerticalOffset="-16">
                                    <TextBlock Text="{Binding Source='hc2461743gdd3eg49fegbeddgd62c3ab303a1', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
                                </ls:LSTooltip>
                            </ls:LSButton.ToolTip>
                            <ls:LSButton.Style>
                                <Style TargetType="ls:LSButton">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.IsCurrentTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.CanEndTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                                <Condition Binding="{Binding  Path=DataContext.CurrentPlayer.SelectedCharacter.CharacterMode, ElementName=ClassIcon}" Value="InCombat"/>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.CanEndTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Visible" />
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ls:LSButton.Style>
                            <ls:LSButton.ContentTemplate>
                                <DataTemplate>
                                    <DataTemplate.Resources>
                                        <BitmapImage x:Key="IconFocus" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_focus_d.png" />
                                    </DataTemplate.Resources>
                                    <Image x:Name="ico" Source="{StaticResource IconFocus}" Stretch="None" Margin="-4,0,4,0"/>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:LSButton}}" Value="True">
                                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_focus_h.png" TargetName="ico"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:LSButton}}" Value="True">
                                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_focus_h.png" TargetName="ico"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ls:LSButton.ContentTemplate>
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click">
                                    <ls:LSPlaySound Sound="UI_Shared_Selected"/>
                                </b:EventTrigger>
                                <b:EventTrigger EventName="MouseEnter">
                                    <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>

                        <Grid x:Name="EndTurnRecap" Width="852" MinHeight="320" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="-426,0,-296,330" >
                            <Grid.Style>
                                <Style TargetType="Grid">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding ElementName=EndTurnButton, Path=IsMouseOver}" Value="True"/>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <MultiDataTrigger.Setters>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger.Setters>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.EndTurnRequested, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                                <Condition Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.IsCurrentTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <MultiDataTrigger.Setters>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger.Setters>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            <ls:LSNineSliceImage Margin="0,0,0,0"
								        x:Name="EndTurnPanelBackgroundImage"
								        ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/endTurn_bg.png"
								        IconWidth="150"
								        Slices="0 200 0 100"
								        Width="723">

                                <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="20,46,20,26">

                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="112"/>
                                        </Grid.RowDefinitions>

                                        <Image x:Name="CenterHourglass" Grid.Row="0" HorizontalAlignment="Center" Stretch="None" RenderTransformOrigin="0.5,0.5" Margin="-1,-114,0,0"
										        Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_headerHourglass_start.png">
                                            <Image.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Image.RenderTransform>
                                        </Image>

                                        <StackPanel Grid.Row="0" Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Bottom">
                                            <StackPanel  Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,0">
                                                <Grid HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,-8,0,0">
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition/>
                                                    </Grid.RowDefinitions>

                                                    <Image x:Name="EndTurnClock" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/timer_frame.png"
										        Stretch="None" VerticalAlignment="Bottom" HorizontalAlignment="Center" Visibility="Collapsed" />

                                                    <ls:LSPie Value="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.CancelEndTurnTimeout, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
										        SweepDirection="Clockwise"
										        Margin="0,8,0,0"
										        x:Name="EndTurnTimerPie"
										        Visibility="Collapsed">
                                                        <Ellipse HorizontalAlignment="Center" Width="24" Height="24" Fill="{StaticResource LS_extraspecialTxtColor}"/>
                                                    </ls:LSPie>

                                                </Grid>

                                                <TextBlock x:Name="CenterTitle" TextAlignment="Center"
                                                   VerticalAlignment="Bottom"
                                                   FontSize="{StaticResource MediumFontSize}"
                                                   Foreground="{StaticResource LS_extraspecialTxtColor}" Margin="0,0,0,0"
                                                   Text="{Binding Source='h917f2b48g8735g4f9fgb529ga520b53eb2ed', Converter={StaticResource TranslatedStringConverter}}"/>
                                            </StackPanel>
                                            <Rectangle HorizontalAlignment="Center" VerticalAlignment="Bottom" Height="20" Width="50"/>
                                        </StackPanel>
                                    </Grid>
                                    <ItemsControl VerticalAlignment="Center" 
										        ItemsSource="{Binding Path=DataContext.CurrentPlayer.UIData.CurrentPartyCharactersInTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
										        Margin="0,0,0,0">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemContainerStyle>
                                            <Style TargetType="ContentPresenter">
                                                <Setter Property="Margin" Value="0,0,0,6"/>
                                                <Setter Property="Visibility" Value="Visible"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding CanAct}" Value="False">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ItemsControl.ItemContainerStyle>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <Grid Height="Auto" Width="Auto">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="104"/>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition Width="Auto"/>
                                                    </Grid.ColumnDefinitions>

                                                    <!-- Hourglass before the portrait-->
                                                    <Image Grid.Column="0" VerticalAlignment="Center" Stretch="None" Margin="27,0,0,0">
                                                        <Image.Style>
                                                            <Style TargetType="Image">
                                                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_turnHourglass_active.png"/>
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding EndTurnRequested}" Value="False">
                                                                        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_turnHourglass_inactive.png"/>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Image.Style>
                                                    </Image>

                                                    <!-- Character portrait-->
                                                    <Rectangle Grid.Column="1" Width="49" Height="74" Fill="{Binding Icon}" VerticalAlignment="Bottom" Margin="0,0,0,0">
                                                        <Rectangle.Style>
                                                            <Style TargetType="Rectangle">
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding HasAnyAction}" Value="False">
                                                                        <Setter Property="Opacity" Value=".75"/>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Rectangle.Style>
                                                    </Rectangle>

                                                    <!--Name + Movement bar-->
                                                    <Grid x:Name="FakeGrid">
                                                        <Grid.Tag>
                                                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer.UserId"/>
                                                                <Binding Path="OwnerUserID"/>
                                                            </MultiBinding>
                                                        </Grid.Tag>
                                                    </Grid>
                                                    <StackPanel Grid.Column="2" Orientation="Vertical"  Margin="13,0,0,0" VerticalAlignment="Bottom">
                                                        <TextBlock Text="{Binding Name}" FontSize="{StaticResource MediumFontSize}" VerticalAlignment="Top">
                                                            <TextBlock.Style>
                                                                <Style TargetType="TextBlock">
                                                                    <Setter Property="Foreground" Value="{StaticResource LS_guestTxtColor}"/>
                                                                    <Setter Property="Opacity" Value="1"/>
                                                                    <Style.Triggers>

                                                                        <DataTrigger Binding="{Binding HasAnyAction}" Value="False">
                                                                            <Setter Property="Opacity" Value=".75"/>
                                                                        </DataTrigger>

                                                                        <DataTrigger Binding="{Binding IsSelectedCharacter}" Value="True">
                                                                            <Setter Property="Foreground" Value="{StaticResource LS_extraspecialTxtColor}"/>
                                                                        </DataTrigger>

                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding IsSelectedCharacter}" Value="False"/>
                                                                                <Condition Binding="{Binding ElementName=FakeGrid, Path=Tag}" Value="True"/>
                                                                            </MultiDataTrigger.Conditions>
                                                                            <MultiDataTrigger.Setters>
                                                                                <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}"/>
                                                                            </MultiDataTrigger.Setters>
                                                                        </MultiDataTrigger>

                                                                    </Style.Triggers>
                                                                </Style>
                                                            </TextBlock.Style>
                                                        </TextBlock>
                                                        <Grid Height="20" DataContext="{Binding Stats.MovementResource}" VerticalAlignment="Bottom">
                                                            <ls:LSProgressBar Value="{Binding Value, Mode=OneWay}" Maximum="{Binding MaxValue}"
                                                                                      Minimum="0" Background="#E0000000"
                                                                                      Width="325" Height="18" Margin="2,1">
                                                                <ls:LSProgressBar.Foreground>
                                                                    <LinearGradientBrush EndPoint="424,22" MappingMode="Absolute" >
                                                                        <LinearGradientBrush.RelativeTransform>
                                                                            <TransformGroup>
                                                                                <ScaleTransform CenterY="0.5" CenterX="0.5"/>
                                                                                <SkewTransform CenterY="0.5" CenterX="0.5"/>
                                                                                <RotateTransform Angle="3" CenterY="0.5" CenterX="0.5"/>
                                                                                <TranslateTransform/>
                                                                            </TransformGroup>
                                                                        </LinearGradientBrush.RelativeTransform>
                                                                        <GradientStop Color="{StaticResource StaminaCol1}" Offset="-0.2"/>
                                                                        <GradientStop Color="{StaticResource StaminaCol2}" Offset="-0.1"/>
                                                                        <GradientStop Color="{StaticResource StaminaCol1}" Offset="0.0"/>
                                                                    </LinearGradientBrush>
                                                                </ls:LSProgressBar.Foreground>
                                                            </ls:LSProgressBar>
                                                            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/endTurn_movementBar.png" Stretch="None" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
                                                        </Grid>
                                                    </StackPanel>

                                                    <!-- Actions and Bonus actions -->
                                                    <StackPanel Grid.Column="3" Orientation="Horizontal" Margin="32,0,0,0" VerticalAlignment="Bottom" HorizontalAlignment="Left">
                                                        <ItemsControl ItemsSource="{Binding Stats.ActionResources}" HorizontalAlignment="Left">
                                                            <ItemsControl.ItemTemplate>
                                                                <DataTemplate DataType="ls:VMActionResource">
                                                                    <ls:LSActionPointResources x:Name="ResourcePoints" Background="Transparent"
                                                                                                       VerticalAlignment="Bottom" HorizontalAlignment="Left" 
                                                                                                       MaxActionPoints="{Binding MaxValue}"
                                                                                                       AvailableActionPoints="{Binding Value}"
                                                                                                       HighlightedActionPoints="0"
                                                                                                       MaxGroupActionPoints="4"
                                                                                                       MaxActionPointGroups="0"
                                                                                                       ActionPointSize="28"
                                                                                                       SmallActionPointSize="20"
                                                                                                       ActionPointGroupSize="56"
                                                                                                       Margin="0,0,12,0">
                                                                        <ls:LSActionPointResources.Style>
                                                                            <Style TargetType="ls:LSActionPointResources" BasedOn="{StaticResource {x:Type ls:LSActionPointResources}}">
                                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                                                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.DefaultActionPointGroup}"/>

                                                                                <Style.Triggers>
                                                                                    <DataTrigger Binding="{Binding TypeId}" Value="ActionPoint">
                                                                                        <Setter Property="Visibility" Value="Visible"/>
                                                                                    </DataTrigger>

                                                                                    <DataTrigger Binding="{Binding TypeId}" Value="BonusActionPoint">
                                                                                        <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.BonusActionPointGroup}"/>
                                                                                        <Setter Property="Visibility" Value="Visible"/>
                                                                                    </DataTrigger>
                                                                                </Style.Triggers>
                                                                            </Style>
                                                                        </ls:LSActionPointResources.Style>
                                                                    </ls:LSActionPointResources>
                                                                </DataTemplate>
                                                            </ItemsControl.ItemTemplate>
                                                            <ItemsControl.Style>
                                                                <Style TargetType="ItemsControl">
                                                                    <Setter Property="ItemsPanel">
                                                                        <Setter.Value>
                                                                            <ItemsPanelTemplate>
                                                                                <StackPanel Orientation="Horizontal"/>
                                                                            </ItemsPanelTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Style>
                                                            </ItemsControl.Style>
                                                        </ItemsControl>
                                                    </StackPanel>

                                                </Grid>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>

                                    <Grid Margin="0,9,0,30" VerticalAlignment="Bottom">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Image Stretch="None" Grid.Row="0" Height="102" Width="555" VerticalAlignment="Bottom"
											        HorizontalAlignment="Center" Panel.ZIndex="1" Margin="0,0,0,-17"
										        Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/endTurn_listItem.png">
                                            <Image.Style>
                                                <Style TargetType="Image">
                                                    <Setter Property="Opacity" Value="0.5"/>
                                                    <Style.Triggers>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding ElementName=CancelEndTurnButton, Path=IsMouseOver}" Value="True"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <MultiDataTrigger.Setters>
                                                                <Setter Property="Opacity" Value="1"/>
                                                            </MultiDataTrigger.Setters>
                                                        </MultiDataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Image.Style>
                                        </Image>
                                        <!-- Cancel end turn button -->
                                        <ls:LSButton x:Name="CancelEndTurnButton" Grid.Row="0" HorizontalAlignment="Center" VerticalAlignment="Bottom" Panel.ZIndex="2"
												        Command="{Binding Path=DataContext.CancelEndTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
												        DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancelEndTurn'}"
												        BoundEvent="UICancelEndTurn"
												        SoundID="UI_HUD_Hotbar_EndTurn">
                                            <ls:LSButton.Template>
                                                <ControlTemplate TargetType="ls:LSButton">
                                                    <Grid>
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="Auto"/>
                                                            <ColumnDefinition Width="Auto"/>
                                                        </Grid.ColumnDefinitions>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="50"/>
                                                        </Grid.RowDefinitions>
                                                        <Image x:Name="ico" Grid.Column="0" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/popin_closeIco_d.png"/>
                                                        <TextBlock x:Name="CancelEndTurnButtonText" Grid.Column="1" FontSize="{StaticResource MediumFontSize}"
															        Text="{Binding Source='h22faeb36g83adg4a12g97d5g2dfe7deb4b35', Converter={StaticResource TranslatedStringConverter}}" 
															        HorizontalAlignment="Left" Foreground="{StaticResource LS_extraspecialTxtColor}">
                                                        </TextBlock>
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter TargetName="ico" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/popin_closeIco_p.png"/>
                                                        </Trigger>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter TargetName="ico" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/popin_closeIco_h.png"/>
                                                            <Setter TargetName="CancelEndTurnButtonText" Property="Foreground" Value="{DynamicResource LS_tint100}"/>
                                                        </Trigger>
                                                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.EndTurnRequested, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.CanAct, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </DataTrigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </ls:LSButton.Template>
                                        </ls:LSButton>
                                    </Grid>
                                </StackPanel>
                            </ls:LSNineSliceImage>
                        </Grid>


                        <!-- ==== OPTIONS STACK ===== -->
                        <Grid Name="hotbarOptions"  Margin="-48,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Bottom">

                            <!--PADLOCK-->
                            <ls:LSButton x:Name="LockHotbarButton" VerticalAlignment="Bottom" HorizontalAlignment="Right" Command="{Binding DataContext.LockHotBarCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding }" ToolTipService.Placement="Top" ToolTipService.VerticalOffset="4" Margin="0,0,0,204">
                                <ls:LSButton.ToolTip>
                                    <ls:LSTooltip IsHitTestVisible="False">
                                        <TextBlock Text="{Binding Source='h6fed2e67g5cc1g4834gaf05ga5c1af5ede0c', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
                                    </ls:LSTooltip>
                                </ls:LSButton.ToolTip>
                                <ls:LSButton.Style>
                                    <Style TargetType="ls:LSButton">
                                        <Setter Property="Template" Value="{StaticResource LockHotbarButtonUnlocked}"/>
                                        <Setter Property="SoundID" Value="UI_HUD_Hotbar_Unlocked"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.HotBarUnlocked}" Value="False">
                                                <Setter Property="Template" Value="{StaticResource LockHotbarButtonLocked}"/>
                                                <Setter Property="SoundID" Value="UI_HUD_Hotbar_Locked"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterType}" Value="Follower">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterType}" Value="Summon">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ls:LSButton.Style>
                            </ls:LSButton>

                            <StackPanel VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,72">
                                <!--RESIZE ROWS-->
                                <ls:LSButton Template="{StaticResource IconButtonTemplate}" Command="{Binding IncreaseRowsCommand}">
                                    <ls:LSButton.Resources>
                                        <BitmapImage x:Key="ButtonNormal" UriSource="{Binding UriSource, Source={StaticResource BtnSmallRound}}"/>
                                        <ImageSource x:Key="ButtonHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_h.png</ImageSource>
                                        <ImageSource x:Key="ButtonPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_p.png</ImageSource>
                                        <ImageSource x:Key="ButtonDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_disabled.png</ImageSource>
                                        <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/ico_plus_d.png</ImageSource>
                                        <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/ico_plus_h.png</ImageSource>
                                        <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/ico_plus_h.png</ImageSource>
                                        <ImageSource x:Key="IconDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/ico_plus_disabled.png</ImageSource>
                                        <System:Double x:Key="IconWidth">32</System:Double>
                                        <System:Double x:Key="IconHeight">32</System:Double>
                                    </ls:LSButton.Resources>
                                    <ls:LSButton.ToolTip>
                                        <ls:LSTooltip IsHitTestVisible="False">
                                            <TextBlock Text="{Binding Source='ha8ff798ag50e4g49f7g9d0bg4a22f0e6ed13', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
                                        </ls:LSTooltip>
                                    </ls:LSButton.ToolTip>
                                </ls:LSButton>
                                <ls:LSButton Template="{StaticResource IconButtonTemplate}" Command="{Binding DecreaseRowsCommand}">
                                    <ls:LSButton.Resources>
                                        <BitmapImage x:Key="ButtonNormal" UriSource="{Binding UriSource, Source={StaticResource BtnSmallRound}}"/>
                                        <ImageSource x:Key="ButtonHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_h.png</ImageSource>
                                        <ImageSource x:Key="ButtonPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_p.png</ImageSource>
                                        <ImageSource x:Key="ButtonDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_disabled.png</ImageSource>
                                        <ImageSource x:Key="IconNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/ico_minus_d.png</ImageSource>
                                        <ImageSource x:Key="IconHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/ico_minus_h.png</ImageSource>
                                        <ImageSource x:Key="IconPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/ico_minus_h.png</ImageSource>
                                        <ImageSource x:Key="IconDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/ico_minus_disabled.png</ImageSource>
                                        <System:Double x:Key="IconWidth">32</System:Double>
                                        <System:Double x:Key="IconHeight">32</System:Double>
                                    </ls:LSButton.Resources>
                                    <ls:LSButton.ToolTip>
                                        <ls:LSTooltip IsHitTestVisible="False">
                                            <TextBlock Text="{Binding Source='h51c66f89g3ffcg460egb9c2gb93afd73558e', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
                                        </ls:LSTooltip>
                                    </ls:LSButton.ToolTip>
                                </ls:LSButton>
                            </StackPanel>
                        </Grid>

                    </Grid>


                </Grid>

                <!--OUTSIDE OF MAIN GRID-->
                <!-- Level up button -->
                <ls:LSNineSliceImage x:Name="LevelUpHolder" VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="292,0,0,8" ImageSource="{StaticResource LevelUPFrame}" Slices="130,0" Padding="44,0" MinHeight="78">

                    <ls:LSButton HorizontalAlignment="Center" VerticalAlignment="Center" Margin="16,0" Command="{Binding StartLevelUp}" CommandParameter="{Binding CurrentPlayer.SelectedCharacter}" ls:TutorialProperties.TargetID="TUT_LevelUp" ls:TutorialProperties.ModalType="Bottom" RenderTransformOrigin="0.5,0.5">
                        <ls:LSButton.Template>
                            <ControlTemplate TargetType="{x:Type ls:LSButton}">
                                <ls:LSNineSliceImage x:Name="bg" ImageSource="{StaticResource FilterButtonBackground}" Slices="36" Padding="10" MinWidth="{Binding MaxWidth, RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}}">
                                    <Grid Margin="10,0" Height="60">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="60"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Image x:Name="Icon" Grid.Column="0" Source="{StaticResource IconLevelUpArrow}" Stretch="Uniform" VerticalAlignment="Center" Width="60" Margin="-14" HorizontalAlignment="Center"/>
                                        <TextBlock x:Name="Text" Grid.Column="1" Style="{StaticResource BtnTextGlow}" Text="{Binding Source='he3ccedd0gceaeg4b1fg8e74g9dfc6da58cd2', Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_specialTxtColor}" FontSize="{StaticResource ScaledSmallFontSize}" VerticalAlignment="Center" HorizontalAlignment="Stretch" TextAlignment="Center" Margin="0,0,12,0"/>
                                    </Grid>
                                </ls:LSNineSliceImage>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="ImageSource" TargetName="bg" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_h.png"/>
                                        <Setter Property="Source" TargetName="Icon" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_levelUp_h.png"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="ImageSource" TargetName="bg" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_p.png"/>
                                    </Trigger>

                                    <DataTrigger Binding="{Binding IsVisible, ElementName=LevelUpHolder}" Value="True">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard x:Name="IconBounce">
                                                <BeginStoryboard.Storyboard>
                                                    <Storyboard>
                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="Icon" RepeatBehavior="Forever">
                                                            <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame1}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                                            <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame2}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                                            <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame3}" Value="{StaticResource LevelUpArrowAnimationFrameBigSize}"/>
                                                            <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame4}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard.Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>
                                        <DataTrigger.ExitActions>
                                            <StopStoryboard BeginStoryboardName="IconBounce"/>
                                        </DataTrigger.ExitActions>
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ls:LSButton.Template>
                    </ls:LSButton>

                    <ls:LSNineSliceImage.RenderTransform>
                        <TransformGroup>
                            <TranslateTransform X="{Binding ActualWidth, ElementName=LevelUpHolder, Converter={StaticResource DivideConverter}, ConverterParameter=-2}"/>
                        </TransformGroup>
                    </ls:LSNineSliceImage.RenderTransform>
                </ls:LSNineSliceImage>


                <!--Concentration-->
                <Grid x:Name="ConcentrationHolder" VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="104,0,0,-4"
                      ToolTipService.Placement="Right" ToolTipService.IsEnabled="True" 
                      Visibility="{Binding CurrentPlayer.SelectedCharacter.ConcentrationSpell, Converter={StaticResource NullToCollapsedConverter}}">

                    <Grid.ToolTip>
                        <ls:LSTooltip x:Name="ConcentrationTooltip" ls:TooltipExtender.Owner="{Binding DataContext.CurrentPlayer.SelectedCharacter, ElementName=ConcentrationHolder}">
                            <ls:LSTooltip.Content>
                                <MultiBinding Converter="{StaticResource TooltipContextMultiConverter}">
                                    <Binding Source="Spell" />
                                    <Binding Path="(ls:TooltipExtender.Owner).ConcentrationSpell.PrototypeID" ElementName="ConcentrationTooltip"/>
                                </MultiBinding>
                            </ls:LSTooltip.Content>
                        </ls:LSTooltip>
                    </Grid.ToolTip>
                    <Ellipse Fill="{Binding CurrentPlayer.SelectedCharacter.ConcentrationSpell.Icon}" Width="42" Height="42"/>
                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/concentration_character_small.png" Stretch="None"/>
                    <ls:LSButton Template="{DynamicResource ButtonTemplate}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,2,8,0" SoundID="UI_HUD_ReleaseConcentration"
                            Command="{Binding DataContext.ReleaseConcentrationCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                            CommandParameter="{Binding CurrentPlayer.SelectedCharacter}">
                        <ls:LSButton.Resources>
                            <ImageSource x:Key="ButtonNormal">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_closeCross.png</ImageSource>
                            <ImageSource x:Key="ButtonHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_closeCross_h.png</ImageSource>
                            <ImageSource x:Key="ButtonPressed">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_closeCross_h.png</ImageSource>
                            <ImageSource x:Key="ButtonDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_closeCross.png</ImageSource>
                        </ls:LSButton.Resources>
                        <ls:LSButton.Style>
                            <Style TargetType="ls:LSButton" >
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.ClientCanBreakConcentration}" Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ls:LSButton.Style>
                    </ls:LSButton>
                </Grid>

                <!--Call Forth Allies-->
                <StackPanel x:Name="CallForthAllies" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="420,0,0,320"
                            Visibility="{Binding CurrentPlayer.SelectedCharacter.CallAllies, Converter={StaticResource NullToCollapsedConverter}}">
                    <ls:LSButton x:Name="CallAlliesBtn" Template="{StaticResource FloatingFrameButton}" SoundID="UI_HUD_HotbarSlot"
                                 BoundEvent="{Binding CurrentPlayer.SelectedCharacter.CallAllies.BoundEvent}"
                                 Command="{Binding UseSlotCommand}" CommandParameter="{Binding CurrentPlayer.SelectedCharacter.CallAllies}"
                                 ContentTemplate="{StaticResource CallAlliesIcon}">
                        <ls:LSButton.Resources>
                            <System:Double x:Key="CallAlliesSize">80</System:Double>
                            <System:Double x:Key="CallAlliesHalfSize">40</System:Double>
                            <Point x:Key="CallAlliesCenter">40,40</Point>
                        </ls:LSButton.Resources>
                    </ls:LSButton>
                    <ls:LSButton Template="{StaticResource TabButton}" Margin="0,-40,0,0"
                                 Content="{Binding Source='h8e97fb57g8443g4904g884bge82dd9d40aa3',Converter={StaticResource TranslatedStringConverter}}"
                                 BoundEvent="{Binding CurrentPlayer.SelectedCharacter.CallAllies.BoundEvent}"
                                 Command="{Binding UseSlotCommand}" CommandParameter="{Binding CurrentPlayer.SelectedCharacter.CallAllies}"/>

                </StackPanel>

                <!--Clear active filter -->
                <ls:LSInputBinding x:Name="CancelBinding" BoundEvent="ActionCancel" IsEnabled="False">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="LSInputBindingPressed">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding Path=Tag, ElementName=HotBar}" Operator="Equal" RightOperand="Left" />
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource HideSingleHotBarToLeft}"/>
                            <b:ChangePropertyAction TargetName="CloseFilterBtn" PropertyName="IsEnabled" Value="False"/>
                            <b:InvokeCommandAction Command="{Binding CancelTaskCommand}"/>
                        </b:EventTrigger>
                        <b:EventTrigger EventName="LSInputBindingPressed">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding Path=Tag, ElementName=HotBar}" Operator="NotEqual" RightOperand="Left" />
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource HideSingleHotBar}"/>
                            <b:ChangePropertyAction TargetName="CloseFilterBtn" PropertyName="IsEnabled" Value="False"/>
                            <b:InvokeCommandAction Command="{Binding CancelTaskCommand}"/>
                        </b:EventTrigger>
                        <b:StoryboardCompletedTrigger Storyboard="{StaticResource HideSingleHotBar}">
                            <b:InvokeCommandAction Command="{Binding ClearSingleHotbarCommand}"/>
                            <b:ChangePropertyAction TargetName="CloseFilterBtn" PropertyName="IsEnabled" Value="True"/>
                        </b:StoryboardCompletedTrigger>
                        <b:StoryboardCompletedTrigger Storyboard="{StaticResource HideSingleHotBarToLeft}">
                            <b:InvokeCommandAction Command="{Binding ClearSingleHotbarCommand}"/>
                            <b:ChangePropertyAction TargetName="HotBar" PropertyName="Tag" Value="{x:Null}"/>
                            <b:ChangePropertyAction TargetName="CloseFilterBtn" PropertyName="IsEnabled" Value="True"/>
                        </b:StoryboardCompletedTrigger>
                    </b:Interaction.Triggers>
                </ls:LSInputBinding>


                <!-- ================================== -->
                <!-- ============ TRIGGERS ============ -->
                <!-- ================================== -->


                <b:Interaction.Triggers>
                    <b:PropertyChangedTrigger Binding="{Binding Path=CurrentPlayer.SelectedCharacter}">
                        <!-- Reset HotBar when SelectedCharacter is changed -->
                        <b:InvokeCommandAction Command="{Binding ClearSingleHotbarCommand}"/>
                        <b:ChangePropertyAction TargetName="HotBar" PropertyName="Tag" Value="{x:Null}"/>
                    </b:PropertyChangedTrigger>

                    <b:PropertyChangedTrigger Binding="{Binding SingleHotBar.SlotList.Count}">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding SingleHotBar.SlotList.Count}" Operator="Equal" RightOperand="0"/>
                                    <b:ComparisonCondition LeftOperand="{Binding IsVisible, ElementName=SingleHotBar}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding IsSelectingUpcastedSpell}" Operator="Equal" RightOperand="False"/>
                                    <b:ComparisonCondition LeftOperand="{Binding IsShowingAContainerWithVariants}" Operator="Equal" RightOperand="True"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <!-- Close single hotbar when it has no more options available (i.e. unequipping instrument) -->
                        <b:InvokeCommandAction Command="{Binding ClearSingleHotbarCommand}"/>
                        <b:ChangePropertyAction TargetName="HotBar" PropertyName="Tag" Value="{x:Null}"/>
                    </b:PropertyChangedTrigger>

                    <b:DataTrigger Binding="{Binding Path=Visibility, ElementName=SingleHotBar}" Comparison="Equal" Value="{x:Static Visibility.Visible}">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Path=Tag, ElementName=HotBar}" Operator="Equal" RightOperand="Left" />
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource ShowSingleHotBarFromLeft}"/>
                    </b:DataTrigger>
                    <b:DataTrigger Binding="{Binding Path=Visibility, ElementName=SingleHotBar}" Comparison="Equal" Value="{x:Static Visibility.Visible}">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Path=Tag, ElementName=HotBar}" Operator="NotEqual" RightOperand="Left" />
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource ShowSingleHotBar}"/>
                    </b:DataTrigger>
                    <b:DataTrigger Comparison="Equal" Value="{StaticResource TrueValue}">
                        <b:DataTrigger.Binding>
                            <MultiBinding Mode="OneWay" Converter="{StaticResource BoolAndConverter}">
                                <Binding Path="CurrentActiveSlot.IsActive" Converter="{StaticResource InvertBoolConverter}" FallbackValue="False"/>
                                <Binding Path="CanHideActiveSlotFilter"/>
                            </MultiBinding>
                        </b:DataTrigger.Binding>
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Path=Tag, ElementName=HotBar}" Operator="Equal" RightOperand="Left" />
                                    <b:ComparisonCondition LeftOperand="{Binding Path=CurrentActiveSlot}" Operator="NotEqual" RightOperand="{x:Null}" />
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource HideSingleHotBarToLeft}"/>
                    </b:DataTrigger>
                    <b:DataTrigger Comparison="Equal" Value="{StaticResource TrueValue}">
                        <b:DataTrigger.Binding>
                            <MultiBinding Mode="OneWay" Converter="{StaticResource BoolAndConverter}">
                                <Binding Path="CurrentPlayer.SelectedCharacter.CurrentSpellTask" Converter="{StaticResource NullToBoolTrueConverter}" FallbackValue="True"/>
                                <Binding Path="CanHideActiveSlotFilter"/>
                            </MultiBinding>
                        </b:DataTrigger.Binding>
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Path=Tag, ElementName=HotBar}" Operator="Equal" RightOperand="Left" />
                                    <b:ComparisonCondition LeftOperand="{Binding Path=CurrentActiveSlot}" Operator="Equal" RightOperand="{x:Null}" />
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource HideSingleHotBarToLeft}"/>
                    </b:DataTrigger>
                    <b:DataTrigger Comparison="Equal" Value="{StaticResource TrueValue}">
                        <b:DataTrigger.Binding>
                            <MultiBinding Mode="OneWay" Converter="{StaticResource BoolAndConverter}">
                                <Binding Path="CurrentActiveSlot.IsActive" Converter="{StaticResource InvertBoolConverter}" FallbackValue="True"/>
                                <Binding Path="CanHideActiveSlotFilter"/>
                                <Binding Path="IsSelectingUpcastedSpell" Converter="{StaticResource InvertBoolConverter}"/>
                                <Binding Path="CurrentPlayer.UIData.ActiveTask.TargetValues" Converter="{StaticResource NullToBoolTrueConverter}"/>
                                <Binding Path="CurrentPlayer.UIData.ActiveTask.HPTargetValues" Converter="{StaticResource NullToBoolTrueConverter}"/>
                                <Binding Path="CurrentSingleHotbarFilter" Converter="{StaticResource NullToBoolFalseConverter}"/>
                            </MultiBinding>
                        </b:DataTrigger.Binding>
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Path=Tag, ElementName=HotBar}" Operator="NotEqual" RightOperand="Left" />
                                    <b:ComparisonCondition LeftOperand="{Binding Path=CurrentActiveSlot}" Operator="NotEqual" RightOperand="{x:Null}" />
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource HideSingleHotBar}"/>
                    </b:DataTrigger>
                    <b:DataTrigger Comparison="Equal" Value="{StaticResource TrueValue}">
                        <b:DataTrigger.Binding>
                            <MultiBinding Mode="OneWay" Converter="{StaticResource BoolAndConverter}">
                                <Binding Path="CurrentPlayer.SelectedCharacter.CurrentSpellTask" Converter="{StaticResource NullToBoolTrueConverter}" FallbackValue="True"/>
                                <Binding Path="CanHideActiveSlotFilter"/>
                                <Binding Path="IsSelectingUpcastedSpell" Converter="{StaticResource InvertBoolConverter}"/>
                                <Binding Path="CurrentPlayer.UIData.ActiveTask.TargetValues" Converter="{StaticResource NullToBoolTrueConverter}"/>
                                <Binding Path="CurrentPlayer.UIData.ActiveTask.HPTargetValues" Converter="{StaticResource NullToBoolTrueConverter}"/>
                                <Binding Path="CurrentSingleHotbarFilter" Converter="{StaticResource NullToBoolFalseConverter}"/>
                            </MultiBinding>
                        </b:DataTrigger.Binding>
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Path=Tag, ElementName=HotBar}" Operator="NotEqual" RightOperand="Left" />
                                    <b:ComparisonCondition LeftOperand="{Binding Path=CurrentActiveSlot}" Operator="Equal" RightOperand="{x:Null}" />
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource HideSingleHotBar}"/>
                    </b:DataTrigger>

                    <b:PropertyChangedTrigger Binding="{Binding Visibility, ElementName=FixedSideBar}">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding (ls:TutorialProperties.IsShowingTutorial), ElementName=EndTurnButton}" Operator="Equal" RightOperand="True"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:InvokeCommandAction Command="{Binding DataContext.ForceTutorialReposition, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" />
                    </b:PropertyChangedTrigger>

                    <!-- Ensre the active spell slot UI loop sound is stopped when the hotbar is unloaded, in case it is unloaded while a spell is active -->
                    <b:EventTrigger EventName="Unloaded">
                        <ls:LSPlaySound Sound="UI_HUD_SkillSelect_Default_LoopOff"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </Grid>

            <ControlTemplate.Triggers>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.Stats.Health.PercentValue, Mode=OneWay, Converter={StaticResource LessThanConverter}, ConverterParameter='0.6'}" Value="True">
                    <Setter TargetName="HealthLabel" Property="Foreground" Value="{StaticResource LS_warning50TxtColor}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.Stats.Health.PercentValue, Mode=OneWay, Converter={StaticResource LessThanConverter}, ConverterParameter='0.3'}" Value="True">
                    <Setter TargetName="HealthLabel" Property="Foreground" Value="{StaticResource LS_alertTxtColor}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.Stats.Health.PercentValue, Mode=OneWay, Converter={StaticResource LessThanConverter}, ConverterParameter='0.1'}" Value="True">
                    <Setter TargetName="HealthLabel" Property="Foreground" Value="{StaticResource LS_tint60}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterType}" Value="Summon">
                    <Setter TargetName="ReactionsLineBtn"  Property="Command" Value="{x:Null}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.Equipment.MeleeMainHand.Item.EquippedAsTorch}" Value="ThisEquipped">
                    <Setter TargetName="LightSourceToggle" Property="IsChecked" Value="True"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.Equipment.MeleeMainHand.Item.MeleeOffHand}" Value="ThisEquipped">
                    <Setter TargetName="LightSourceToggle" Property="IsChecked" Value="True"/>
                </DataTrigger>
                <DataTrigger  Binding="{Binding CurrentPlayer.SelectedCharacter.HasRangedSetActive}" Value="True">
                    <Setter TargetName="RangedToggle" Property="IsChecked" Value="True"/>
                    <Setter TargetName="MeleeToggle" Property="Command" Value="{Binding DataContext.SwitchWeaponSetCommand, ElementName=HotBar}"/>
                </DataTrigger>
                <DataTrigger  Binding="{Binding CurrentPlayer.SelectedCharacter.HasMeleeSetActive}" Value="True">
                    <Setter TargetName="RangedToggle" Property="Command" Value="{Binding DataContext.SwitchWeaponSetCommand, ElementName=HotBar}"/>
                </DataTrigger>
                <Trigger SourceName="HotbarRoot"  Property="IsVisible" Value="True">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <BeginStoryboard.Storyboard>
                                <Storyboard>
                                    <DoubleAnimation
                                            Storyboard.TargetName="HotbarRoot"
                                            Storyboard.TargetProperty="Opacity"
                                            From="0"
                                            To="1"
                                            Duration="0:0:0.7">
                                        <DoubleAnimation.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>

                            </BeginStoryboard.Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                </Trigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=Visibility, ElementName=SingleHotBar}" Value="Visible"/>
                        <Condition Binding="{Binding Path=CurrentPlayer.SelectedCharacter.IsCasting}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter TargetName="CancelBinding" Property="IsEnabled" Value="True"/>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InFTB"/>
                        <Condition Binding="{Binding Path=CurrentPlayer.SelectedCharacter.IsCurrentTurn}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter TargetName="HotbarRoot" Property="Visibility" Value="Collapsed"/>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>

                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{StaticResource EqualConverter}">
                            <Binding Path="ResourceFilter.Name"/>
                            <Binding Path="CurrentSingleHotbarFilter"/>
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter TargetName="SingleHotbarResourceFilterText" Property="Text" Value=""/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.StatusEffects.Count}" Value="1">
                    <Setter TargetName="PaneConditionsBg" Property="Source" Value="{StaticResource PaneConditions1}"/>
                    <Setter TargetName="StatusPanel" Property="Margin" Value="3,-180,0,180"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.StatusEffects.Count}" Value="2">
                    <Setter TargetName="PaneConditionsBg" Property="Source" Value="{StaticResource PaneConditions2}"/>
                    <Setter TargetName="StatusPanel" Property="Margin" Value="-15,-180,0,180"/>
                </DataTrigger>

                <!--IS SHAPESHIFTED-->
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.IsShapeShifted}" Value="True">
                    <Setter TargetName="MainAttack" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="MainBars" Property="Width" Value="{StaticResource DeckWidthShapeshift}"/>
                    <Setter TargetName="MainBars" Property="Margin" Value="{StaticResource DeckMarginShapeshift}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.Equipment.MeleeMainHand.Item, Converter={StaticResource NullToBoolFalseConverter}}" Value="False">
                    <Setter TargetName="MainAttack" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsSelectingUpcastedSpell}" Value="True"/>
                        <Condition Binding="{Binding Visibility, ElementName=SingleHotBar}" Value="Visible"/>
                        <Condition Binding="{Binding Margin.Bottom, ElementName=SingleHotBar, Converter={StaticResource GreaterThanConverter}, ConverterParameter=-1}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="UpcastSection" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.ActiveTask.TargetValues, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                        <Condition Binding="{Binding Visibility, ElementName=SingleHotBar}" Value="Visible"/>
                        <Condition Binding="{Binding Margin.Bottom, ElementName=SingleHotBar, Converter={StaticResource GreaterThanConverter}, ConverterParameter=-1}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="UpcastSection" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.ActiveTask.HPTargetValues, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                        <Condition Binding="{Binding Visibility, ElementName=SingleHotBar}" Value="Visible"/>
                        <Condition Binding="{Binding Margin.Bottom, ElementName=SingleHotBar, Converter={StaticResource GreaterThanConverter}, ConverterParameter=-1}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="UpcastSection" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding CurrentActiveSlot.Spell.SpellSlotLevel}" Value="0">
                    <Setter TargetName="UpcastDescription" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="UpcastSection" Property="Margin" Value="0,0,0,14"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding IsSelectingUpcastedSpell}" Value="False">
                    <Setter TargetName="UpcastDescription" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="UpcastSection" Property="Margin" Value="0,0,0,14"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CurrentSpellTask.TargetingType}" Value="Projectile">
                    <Setter TargetName="MultiTargetPropertyName" Property="Text" Value="{Binding Source='hbb8e9b62gf09fg4568g89b3g1f63dafb5744',Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.CurrentSpellTask.TargetingType}" Value="Target"/>
                        <Condition Binding="{Binding CurrentPlayer.UIData.ActiveTask.TargetValues, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="MultiTargetPropertyName" Property="Text" Value="{Binding Source='hf0352edfg4106g4ed7g9964gcf8eaa164fbf',Converter={StaticResource TranslatedStringConverter}}"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.CurrentSpellTask.TargetingType}" Value="Target"/>
                        <Condition Binding="{Binding CurrentPlayer.UIData.ActiveTask.HPTargetValues, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="MultiTargetPropertyName" Property="Text" Value="{Binding Source='hc410bc67g130dg4ccdgbb36g42bb0a72c08e',Converter={StaticResource TranslatedStringConverter}}"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.ActiveTask.TargetValues, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                        <Condition Binding="{Binding Visibility, ElementName=SingleHotBar}" Value="Visible"/>
                        <Condition Binding="{Binding Margin.Bottom, ElementName=SingleHotBar, Converter={StaticResource GreaterThanConverter}, ConverterParameter=-1}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="MultiTargetDashContainer" Property="Visibility" Value="Visible" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.ActiveTask.HPTargetValues, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                        <Condition Binding="{Binding Visibility, ElementName=SingleHotBar}" Value="Visible"/>
                        <Condition Binding="{Binding Margin.Bottom, ElementName=SingleHotBar, Converter={StaticResource GreaterThanConverter}, ConverterParameter=-1}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="MultiTargetDashContainer" Property="Visibility" Value="Visible" />
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding Visibility, ElementName=InnerHitPointsDash}" Value="Visible">
                    <Setter TargetName="InnerProjectilesDash" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsShowingPassivesDeck}" Value="True"/>
                        <Condition Binding="{Binding Margin, ElementName=PassivesHotBar}" Value="{StaticResource FixedHotbarMargin}"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Concertina" Property="Opacity" Value="0"/>
                    <Setter TargetName="Concertina" Property="IsHitTestVisible" Value="False"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsShowingCustomDeck}" Value="True"/>
                        <Condition Binding="{Binding Margin, ElementName=CustomHotBar}" Value="{StaticResource FixedHotbarMargin}"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Concertina" Property="Opacity" Value="0"/>
                    <Setter TargetName="Concertina" Property="IsHitTestVisible" Value="False"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentSingleHotbarFilter, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                        <Condition Binding="{Binding Margin, ElementName=SingleHotBar}" Value="{StaticResource SingleHotbarMargin}"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Concertina" Property="Opacity" Value="0"/>
                    <Setter TargetName="Concertina" Property="IsHitTestVisible" Value="False"/>
                    <Setter TargetName="HotbarsBehindSingleHotbar" Property="Opacity" Value="0"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.IsSelectingCharacter}" Value="True">
                    <Setter TargetName="Concertina" Property="ResizeFullDuration" Value="0"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding UpcastGeneralDescription, Converter={StaticResource NullToBoolTrueConverter}}" Value="False">
                    <Setter TargetName="DefaultUpcastText" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="UpcastText" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsShowingAContainerWithVariants}" Value="True"/>
                        <Condition Binding="{Binding SingleHotBar.SlotList.Count, Converter={StaticResource LessThanConverter}, ConverterParameter={StaticResource MinimalistHotbarThreshold}}" Value="True"/>
                        <Condition Binding="{Binding Visibility, ElementName=SingleHotBar}" Value="Visible"/>
                        <Condition Binding="{Binding Margin.Bottom, ElementName=SingleHotBar, Converter={StaticResource GreaterThanConverter}, ConverterParameter=-1}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="MinimalistContainer" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding Visibility, ElementName=FleeButton}" Value="Visible">
                    <Setter TargetName="RestMenu" Property="Visibility" Value="Collapsed" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Visibility, ElementName=ExitFTBButton}" Value="Visible">
                    <Setter TargetName="RestMenu" Property="Visibility" Value="Collapsed" />
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentActiveSlot.Spell.WeaponActionType}" Value="Melee">
                    <Setter TargetName="MeleeWeapon" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentActiveSlot.Spell.WeaponActionType}" Value="Ranged">
                    <Setter TargetName="RangedWeapon" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentActiveSlot.GameObject.UseType}" Value="Arrow">
                    <Setter TargetName="RangedWeapon" Property="IsEnabled" Value="False"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.Stats.Level.LevelUpAvailable}" Value="False">
                    <Setter TargetName="LevelUpHolder" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InCombat">
                    <Setter TargetName="LevelUpHolder" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.DownedInfo.Active}" Value="True">
                    <Setter TargetName="LevelUpHolder" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.Stats.IsAlive}" Value="False">
                    <Setter TargetName="LevelUpHolder" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.UIData.AllowInteraction}" Value="False">
                    <Setter TargetName="LevelUpHolder" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="LevelUpHolder" Property="Opacity" Value="{StaticResource DisabledOpacity}" />
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Visibility, ElementName=LevelUpHolder}" Value="Visible"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.Stats.TemporaryHealth.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="TemporaryHealthAltLabel" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding Visibility, ElementName=FixedSideBar}" Value="Visible">
                    <Setter TargetName="MultiTargetDashContainer" Property="Width">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource SubtractionMultipleConverter}">
                                <Binding Path="ActualWidth" ElementName="SingleHotBar"/>
                                <Binding Path="ActualWidth" ElementName="FixedSideBar"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>

                <!-- Enables & Disables Weapon Toggle -->
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.IsCurrentTurn}" Value="True">
                    <Setter TargetName="MeleeToggle" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="RangedToggle" Property="IsEnabled" Value="True"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="Idle">
                    <Setter TargetName="MeleeToggle" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="RangedToggle" Property="IsEnabled" Value="True"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.HasRangedAttack}" Value="False">
                    <Setter TargetName="RangedToggle" Property="IsEnabled" Value="False"/>
                </DataTrigger>

                <!-- ==== Single player only: Hide when not your turn ===== -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.IsCurrentTurn}" Value="False"/>
                        <Condition Binding="{Binding CurrentPlayer.CanEndTurn}" Value="False"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InCombat"/>
                        <Condition Binding="{Binding Data.Players.Count}" Value="1"/>
                        <Condition Binding="{Binding Data.InterruptEvents.Count}" Value="0"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="HotbarRoot" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.TravelError}" Value="None">
                    <Setter TargetName="GoToCampItem" Property="IsEnabled" Value="True"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.IsInCamp}" Value="True">
                    <Setter TargetName="GoToCampTooltip" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <StackPanel MaxWidth="{StaticResource MaxTooltipContentWidth}" >
                                    <TextBlock Style="{StaticResource TooltipTitleStyle}" Text="{Binding Source='h2f70e122gdef6g4846g94e6ga12347e4ec83',Converter={StaticResource TranslatedStringConverter}}"/>

                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h865f0babg0e8ag40d8g8105gf3aed981a394', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
                                </StackPanel>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>
</ls:UIWidget> 