<ls:UIWidget  x:Name="CharacterLevelUp"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
	xmlns:System="clr-namespace:System;assembly=mscorlib"
	xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
	xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
	
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
	mc:Ignorable="d"
	d:DesignHeight="2160" d:DesignWidth="3840"
	ls:UIWidget.ContextName="CharacterLevelUp"
	ls:TooltipExtender.Owner="{Binding DummyCharacter}">

	<ls:UIWidget.Resources>
		<ResourceDictionary>

			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="../Library/CCLib_k.xaml"/>
			</ResourceDictionary.MergedDictionaries>

			<DataTemplate x:Key="HPTooltipTooltip">
				<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h5702bcfbg5b6bg4c6cga370gbabede69cf41, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
			</DataTemplate>
			
			<ControlTemplate x:Key="levelUpListBoxItemTemplate" TargetType="ListBoxItem">
				<ContentPresenter>
					<b:Interaction.Triggers>
						<b:DataTrigger Binding="{Binding Path=(ls:SequenceBehavior.PlayElement), RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="True">
							<!-- SelectItem to force scrolling into view -->
							<b:ChangePropertyAction TargetName="animatedLevelUpItems" PropertyName="SelectedItem" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}}"/>
							<ls:LSPlaySound  Sound="UI_LevelUp_Menu_Perks_Sequence"/>
						</b:DataTrigger>
						<b:DataTrigger Binding="{Binding Path=(ls:SequenceBehavior.PlayedLastElement), RelativeSource={RelativeSource AncestorType=ListBoxItem}}" Value="True">
							<ls:LSPlaySound  Sound="UI_LevelUp_Menu_SequenceEnds"/>
						</b:DataTrigger>
					</b:Interaction.Triggers>
				</ContentPresenter>
			</ControlTemplate>

			<Storyboard x:Key="LevelUpAppearStoryboard">
				<!-- Big "Level Up" text and banner -->
				<DoubleAnimation Storyboard.TargetName="LevelUpTextAndBanner" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="{StaticResource LevelUpTextAndBannerDuration}"/>
				<DoubleAnimation Storyboard.TargetName="LevelUpTextAndBanner" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" From="2" To="1" Duration="{StaticResource LevelUpTextAndBannerDuration}">
					<DoubleAnimation.EasingFunction>
						<BounceEase EasingMode="EaseOut" Bounces="1" Bounciness="10" />
					</DoubleAnimation.EasingFunction>
				</DoubleAnimation>
				<DoubleAnimation Storyboard.TargetName="LevelUpTextAndBanner" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" From="2" To="1" Duration="{StaticResource LevelUpTextAndBannerDuration}">
					<DoubleAnimation.EasingFunction>
						<BounceEase EasingMode="EaseOut" Bounces="1" Bounciness="10" />
					</DoubleAnimation.EasingFunction>
				</DoubleAnimation>
				<!-- VFX under Level Up! -->
				<ObjectAnimationUsingKeyFrames Storyboard.TargetName="LevelUpTrail" Storyboard.TargetProperty="Visibility">
					<DiscreteObjectKeyFrame KeyTime="0:0:0.5" Value="{x:Static Visibility.Visible}"/>
					<DiscreteObjectKeyFrame KeyTime="0:0:1.4" Value="{x:Static Visibility.Hidden}"/>
				</ObjectAnimationUsingKeyFrames>

				<!-- "Level N Class" text -->
				<DoubleAnimation Storyboard.TargetName="ClassText" Storyboard.TargetProperty="Opacity" BeginTime="0:0:0.4" From="0" To="1" Duration="0:0:0.2"/>
				<!-- Panel with big intro text -->
				<DoubleAnimation Storyboard.TargetName="LevelUpIntroPanel" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" BeginTime="0:0:1.3" From="0" To="-650" Duration="0:0:2">
					<DoubleAnimation.EasingFunction>
						<ElasticEase Oscillations="1" Springiness="15" EasingMode="EaseOut"/>
					</DoubleAnimation.EasingFunction>
				</DoubleAnimation>

			</Storyboard>

			<Storyboard x:Key="LevelUpAppearSkipStoryboard">
				<!-- Big "Level Up" text and banner -->
				<DoubleAnimation Storyboard.TargetName="LevelUpTextAndBanner" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource LevelUpSkipDuration}"/>
				<DoubleAnimation Storyboard.TargetName="LevelUpTextAndBanner" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" To="1" Duration="{StaticResource LevelUpSkipDuration}"/>
				<DoubleAnimation Storyboard.TargetName="LevelUpTextAndBanner" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" To="1" Duration="{StaticResource LevelUpSkipDuration}"/>

				<!-- VFX under Level Up! -->
				<ObjectAnimationUsingKeyFrames Storyboard.TargetName="LevelUpTrail" Storyboard.TargetProperty="Visibility">
					<DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Hidden}"/>
				</ObjectAnimationUsingKeyFrames>

				<!-- "Level N Class" text -->
				<DoubleAnimation Storyboard.TargetName="ClassText" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource LevelUpSkipDuration}"/>
				<!-- Panel with big intro text -->
				<DoubleAnimation Storyboard.TargetName="LevelUpIntroPanel" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" To="-650" Duration="{StaticResource LevelUpSkipDuration}"/>

			</Storyboard>

			<Storyboard x:Key="LevelUpAfterItemsStoryboard">

				<!-- Fade up panel background and top contents while intro text fades out (crossfade) -->
				<DoubleAnimation Storyboard.TargetName="LeftPanelsBackground" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="{StaticResource LevelUpAfterItemsDuration}"/>
				<DoubleAnimation Storyboard.TargetName="upperClassPanel" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="{StaticResource LevelUpAfterItemsDuration}"/>
				<DoubleAnimation Storyboard.TargetName="LevelUpIntroPanel" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="{StaticResource LevelUpAfterItemsDuration}"/>

				<DoubleAnimation Storyboard.TargetName="levelChangeIndicator" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource LevelUpAfterItemsDuration}"/>
				<DoubleAnimation Storyboard.TargetName="gameplayTabs" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource LevelUpAfterItemsDuration}"/>
				<DoubleAnimation Storyboard.TargetName="CloseLevelUpButton" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource LevelUpAfterItemsDuration}"/>
				<DoubleAnimation Storyboard.TargetName="worldFader" Storyboard.TargetProperty="Opacity" To="0" Duration="{StaticResource LevelUpAfterItemsDuration}"/>

				<!-- Move left side panel from center -->
				<DoubleAnimation Storyboard.TargetName="LeftPanels" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" BeginTime="0:0:0.2" To="0" Duration="0:0:0.5" AccelerationRatio="0.75" DecelerationRatio="0.25"/>

				<!-- Move right side panel onscreen -->
				<DoubleAnimation Storyboard.TargetName="summaryControls" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" BeginTime="0:0:0.25" To="0" Duration="0:0:0.5" AccelerationRatio="0.75" DecelerationRatio="0.25"/>

				<!-- fade up center bottom buttons -->
				<DoubleAnimation Storyboard.TargetName="PanelControls" Storyboard.TargetProperty="Opacity" BeginTime="0:0:0.2" From="0" To="1" Duration="{StaticResource LevelUpAfterItemsDuration}"/>

			</Storyboard>

			<Storyboard x:Key="LevelUpAfterItemsSkipStoryboard">

				<!-- Fade up panel background and top contents while intro text fades out (crossfade) -->
				<DoubleAnimation Storyboard.TargetName="LeftPanelsBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource LevelUpSkipDuration}"/>
				<DoubleAnimation Storyboard.TargetName="upperClassPanel" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource LevelUpSkipDuration}"/>
				<DoubleAnimation Storyboard.TargetName="LevelUpIntroPanel" Storyboard.TargetProperty="Opacity" To="0" Duration="{StaticResource LevelUpSkipDuration}"/>

				<DoubleAnimation Storyboard.TargetName="levelChangeIndicator" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource LevelUpSkipDuration}"/>
				<DoubleAnimation Storyboard.TargetName="gameplayTabs" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource LevelUpSkipDuration}"/>
				<DoubleAnimation Storyboard.TargetName="CloseLevelUpButton" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource LevelUpSkipDuration}"/>
				<DoubleAnimation Storyboard.TargetName="worldFader" Storyboard.TargetProperty="Opacity" To="0" Duration="{StaticResource LevelUpSkipDuration}"/>

				<!-- Move left side panel from center -->
				<DoubleAnimation Storyboard.TargetName="LeftPanels" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" To="0" Duration="{StaticResource LevelUpSkipDuration}" AccelerationRatio="0.75" DecelerationRatio="0.25"/>

				<!-- Move right side panel onscreen -->
				<DoubleAnimation Storyboard.TargetName="summaryControls" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" To="0" Duration="{StaticResource LevelUpSkipDuration}" AccelerationRatio="0.75" DecelerationRatio="0.25"/>

				<!-- fade up center bottom buttons -->
				<DoubleAnimation Storyboard.TargetName="PanelControls" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource LevelUpSkipDuration}"/>

			</Storyboard>
			
			<ControlTemplate x:Key="LevelUpFinishingTemplate">
				<Grid Background="Black" Opacity="0.5"/>
			</ControlTemplate>

			<ControlTemplate x:Key="LevelUpTemplate">

				<Grid x:Name="levelUp" IsEnabled="{Binding IsLocked, Converter={StaticResource InvertBoolConverter}}" IsHitTestVisible="False">

					<Grid x:Name="worldFader" Background="Black" IsHitTestVisible="False"/>

					<Control x:Name="summaryControls" Template="{StaticResource summaryPanelTemplate}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,150,20,0">
						<Control.RenderTransform>
							<TranslateTransform X="1000"/>
						</Control.RenderTransform>
					</Control>

					<Grid HorizontalAlignment="Left">
						<Grid.Background>
							<ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/vignette_left.png"/>
						</Grid.Background>

						<Control x:Name="levelChangeIndicator" Opacity="0" Template="{StaticResource LevelChangeIndicationTemplate}" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="50,50,0,0"/>

						<StackPanel x:Name="LeftPanels" Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="320,62,0,0">
							<StackPanel.RenderTransform>
								<!-- Offset to center panel under intro animation -->
								<TranslateTransform>
									<TranslateTransform.X>
										<MultiBinding Converter="{StaticResource AddMultipleConverter}">
											<Binding ElementName="CharacterLevelUp" Path="ActualWidth" Converter="{StaticResource MultiplierConverter}" ConverterParameter="0.5"/>
											<Binding ElementName="LeftPanels" Path="ActualWidth" Converter="{StaticResource MultiplierConverter}" ConverterParameter="-0.5"/>
											<!-- Subtract Margin.Left -->
											<Binding Source="-326"/>
										</MultiBinding>
									</TranslateTransform.X>
								</TranslateTransform>
							</StackPanel.RenderTransform>
							<Grid>
								<Image x:Name="LeftPanelsBackground" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/contentPane.png" Stretch="None" HorizontalAlignment="Left" Opacity="0"/>

								<ContentControl x:Name="gameplaySubPanel" Content="{Binding .}">
									<b:Interaction.Triggers>
										<b:PropertyChangedTrigger Binding="{Binding Path=SelectedIndex, ElementName=gameplayTabs}">
											<b:Interaction.Behaviors>
												<b:ConditionBehavior>
													<b:ConditionalExpression>
														<b:ComparisonCondition LeftOperand="{Binding Path=SelectedIndex, ElementName=gameplayTabs}" Operator="NotEqual" RightOperand="-1"/>
													</b:ConditionalExpression>
												</b:ConditionBehavior>
											</b:Interaction.Behaviors>
											<!-- clear subtab panel -->
											<b:ChangePropertyAction TargetName="gameplaySubPanel" PropertyName="DataContext" Value="{x:Null}"/>
										</b:PropertyChangedTrigger>
									</b:Interaction.Triggers>
								</ContentControl>

								<Control x:Name="gameplayPanel"/>
							</Grid>

							<ContentPresenter x:Name="DetailsSection" Content="{Binding .}" VerticalAlignment="Bottom" Margin="-70,0,0,0"/>
						</StackPanel>

						<!-- Tabs -->
						<ListBox x:Name="gameplayTabs" Opacity="0" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,176,0,0">
							<ListBox.ItemContainerStyle>
								<Style TargetType="ListBoxItem">
									<Setter Property="Template" Value="{StaticResource gameplayTabTemplate}"/>
								</Style>
							</ListBox.ItemContainerStyle>

							<ListBoxItem x:Name="levelupTab" Tag="levelup" IsSelected="True" Visibility="{Binding SelectedMultiClass.Level, Converter={StaticResource CountToVisibilityConverter}}">
								<ListBoxItem.Resources>
									<BitmapImage x:Key="tabIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_class.png"/>
									<BitmapImage x:Key="tabIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_class_h.png"/>
								</ListBoxItem.Resources>
							</ListBoxItem>

							<ListBoxItem x:Name="raceTab" Tag="race" Visibility="Collapsed">
								<ListBoxItem.Resources>
									<BitmapImage x:Key="tabIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_race.png"/>
									<BitmapImage x:Key="tabIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_race_h.png"/>
								</ListBoxItem.Resources>
							</ListBoxItem>

							<ListBoxItem x:Name="classTab" Tag="class" Visibility="{Binding Visibility, ElementName=levelupTab, Converter={StaticResource InvertVisibilityConverter}}" >
								<ListBoxItem.Resources>
									<BitmapImage x:Key="tabIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_class.png"/>
									<BitmapImage x:Key="tabIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_class_h.png"/>
								</ListBoxItem.Resources>
							</ListBoxItem>
							
							<ListBoxItem x:Name="subClassTab" Tag="subclass" Visibility="Collapsed">
								<ListBoxItem.Resources>
									<BitmapImage x:Key="tabIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_class.png"/>
									<BitmapImage x:Key="tabIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_class_h.png"/>
								</ListBoxItem.Resources>
							</ListBoxItem>

							<ListBoxItem x:Name="draconicTab" Tag="draconic" Visibility="{Binding Path=SelectedSubClass.IsDraconicSorcerer, Converter={StaticResource BoolToVisibleConverter}, FallbackValue=Collapsed}">
								<ListBoxItem.Resources>
									<BitmapImage x:Key="tabIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_class.png"/>
									<BitmapImage x:Key="tabIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_class_h.png"/>
								</ListBoxItem.Resources>
							</ListBoxItem>

							<ListBoxItem x:Name="deityTab" Tag="deity" Visibility="{Binding Path=SelectableDeities.Count, Converter={StaticResource CountToVisibilityConverter}}">
								<ListBoxItem.Resources>
									<BitmapImage x:Key="tabIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_class.png"/>
									<BitmapImage x:Key="tabIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_class_h.png"/>
								</ListBoxItem.Resources>
							</ListBoxItem>

							<ListBoxItem x:Name="abilityTab" Tag="ability" Visibility="Collapsed">
								<ListBoxItem.Resources>
									<BitmapImage x:Key="tabIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_abilities.png"/>
									<BitmapImage x:Key="tabIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_abilities_h.png"/>
								</ListBoxItem.Resources>
							</ListBoxItem>

							<ListBoxItem x:Name="spellReplaceTab" Tag="spellreplace" Visibility="{Binding ClassProgressionDetails.InSpellReplacement, Converter={StaticResource NullToCollapsedConverter}}">
								<ListBoxItem.Resources>
									<BitmapImage x:Key="tabIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_class.png"/>
									<BitmapImage x:Key="tabIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_class_h.png"/>
								</ListBoxItem.Resources>
							</ListBoxItem>

							<ListBoxItem x:Name="spellPrepTab" Tag="spellprep" Visibility="{Binding SpellPrepare.Preparable.Count, Converter={StaticResource CountToVisibilityConverter}}">
								<ListBoxItem.Resources>
									<BitmapImage x:Key="tabIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_class.png"/>
									<BitmapImage x:Key="tabIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_class_h.png"/>
								</ListBoxItem.Resources>
							</ListBoxItem>

							<ListBoxItem x:Name="featTab" Tag="feat" Visibility="{Binding CanSelectFeat, Converter={StaticResource BoolToVisibleConverter} }">
								<ListBoxItem.Resources>
									<BitmapImage x:Key="tabIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_origin.png"/>
									<BitmapImage x:Key="tabIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_origin_h.png"/>
								</ListBoxItem.Resources>
							</ListBoxItem>                            
							
						</ListBox>

					</Grid>

					<ls:LSButton x:Name="CloseLevelUpButton" Opacity="0" Template="{StaticResource FrameWithIconButtonTemplate}" Command="{Binding CustomEvent}" CommandParameter="CloseWidget" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,20,20,0" SoundID="UI_HUD_LevelUp_Cancel" ToolTipService.Placement="Bottom" ToolTipService.VerticalOffset="-20">
						<ls:LSButton.Resources>
							<BitmapImage x:Key="FrameNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
							<BitmapImage x:Key="FrameHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_h.png"/>
							<BitmapImage x:Key="FramePressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
							<BitmapImage x:Key="FrameDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_roundBig_d.png"/>
							<BitmapImage x:Key="IconNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_close_big_d.png"/>
							<BitmapImage x:Key="IconHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_close_big_h.png"/>
							<BitmapImage x:Key="IconPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_close_big_d.png"/>
							<BitmapImage x:Key="IconDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/ico_close_big_d.png"/>
						</ls:LSButton.Resources>
						<ls:LSButton.ToolTip>
							<ls:LSTooltip>
								<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h9d3b37a6gf7e3g40a8g87d3g21b1d1732512, Converter={StaticResource TranslatedStringConverter}}" TextWrapping="Wrap"/>
							</ls:LSTooltip>
						</ls:LSButton.ToolTip>
					</ls:LSButton>

					<StackPanel x:Name="PanelControls" Orientation="Horizontal" Opacity="0" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,1040,50" >

						<Control Template="{StaticResource cameraModeControlsTemplate}"/>

						<StackPanel Margin="0,-136,0,0">
							<ls:LSNineSliceImage x:Name="MissingRequirementsError" Visibility="Hidden" Style="{StaticResource MissingRequirementsErrorStyle}" Margin="0,48,0,-48" ContentTemplate="{StaticResource MissingRequirementsErrorTemplate}"/>

							<Grid x:Name="finishLevelUp">
								<Grid.Resources>
									<BitmapImage x:Key="ButtonBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btnAppearance_bg.png"/>
								</Grid.Resources>
								<Image Source="{StaticResource ButtonBackground}" Stretch="None"/>

								<ls:LSButton Content="{Binding Source='ha7867654g6f71g41ccgbd0bgba956a682293', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource CCNextButtonStyle}" VerticalAlignment="Center" Width="500" IsEnabled="{Binding IsLevelUpComplete}" Command="{Binding PlayDummyVFX}" CommandParameter="VFX_UI_LevelUp_01">
									<b:Interaction.Triggers>
										<b:EventTrigger EventName="Click" >
											<b:ChangePropertyAction TargetName="levelUp" PropertyName="Visibility" Value="Collapsed" />
											<b:InvokeCommandAction Command="{Binding SetCameraMode}" CommandParameter="Overview"/>
											<b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedIndex" Value="1" />
										</b:EventTrigger>
										<b:TimerTrigger EventName="Click" MillisecondsPerTick="1400" TotalTicks="1">
											<b:InvokeCommandAction Command="{Binding FinishLevelUp}" CommandParameter="Overview"/>
										</b:TimerTrigger>
										<b:TimerTrigger EventName="Click" MillisecondsPerTick="2000" TotalTicks="1">
											<b:ChangePropertyAction TargetName="levelUp" PropertyName="Visibility" Value="Visible" />
										</b:TimerTrigger>
									</b:Interaction.Triggers>
								</ls:LSButton>
							</Grid>
						</StackPanel>

						<Control Template="{StaticResource rotateDummyControlsTemplate}"/>

					</StackPanel>

					<!-- 
				
					Animated LevelUp Intro
				
					-->
					<StackPanel x:Name="LevelUpIntroPanel" HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="False">
						<StackPanel.RenderTransform>
							<TranslateTransform Y="0"/>
						</StackPanel.RenderTransform>

						<Grid x:Name="LevelUpTextAndBanner">
							<Grid.RenderTransform>
								<!-- 1324x364 -> 1080x297 -->
								<ScaleTransform CenterX="540" CenterY="148"/>
							</Grid.RenderTransform>

							<Image x:Name="LevelUpBanner" Source="{StaticResource LevelUpBanner}" Stretch="Uniform" Width="1080"/>

							<TextBlock x:Name="LevelUpText" Text="{Binding Source='h52d7c409g26d3g4c9bg9608g40fee0630ee5', Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_specialTxtColor}" FontSize="100" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,50,0,0"/>

							<ls:AnimatedImage x:Name="LevelUpTrail" Style="{StaticResource trailVfx}" Margin="0,0,0,-300">
								<ls:AnimatedImage.RenderTransform>
									<TransformGroup>
										<RotateTransform Angle="90"/>
										<ScaleTransform ScaleX="1.3" ScaleY="1.3"/>
										<TranslateTransform X="500" Y="50"/>
									</TransformGroup>
								</ls:AnimatedImage.RenderTransform>
							</ls:AnimatedImage>
						</Grid>

						<!-- Tav Level N -->
						<TextBlock x:Name="characterLevelText" Visibility="Collapsed" FontSize="{StaticResource MassiveFontSize}" HorizontalAlignment="Center" Opacity="{Binding Opacity, ElementName=ClassText}">
							<TextBlock.Text>
								<MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
									<Binding Source="hc76e785eg7837g43a5g9cb5g55d46ed41522"/>
									<Binding Path="DummyCharacter.Name"/>
									<Binding Path="AvailableCharacterLevel"/>
								</MultiBinding>
							</TextBlock.Text>
						</TextBlock>

						<!-- Class Lv N -->
						<TextBlock x:Name="ClassText" Foreground="{StaticResource LS_specialTxtColor}" FontSize="{StaticResource TitleFontSize}" HorizontalAlignment="Center" Opacity="0" Margin="0,20,0,0">
							<TextBlock.Text>
								<MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
									<Binding Source="h1a47a847g893eg4cb2ga87bgaa23ee47055b"/>
									<Binding Path="SelectedMultiClass.Name"/>
									<Binding Path="SelectedMultiClass.Level" Converter="{StaticResource AddConverter}" ConverterParameter="1"/>
								</MultiBinding>
							</TextBlock.Text>
						</TextBlock>

					</StackPanel>

					<Control x:Name="SetCameraControl"/>


					<!-- Skip LevelUp Animations -->
					<ls:LSInputBinding x:Name="SkipAnimationInput" BoundEvent="UISkipDialog">
						<b:Interaction.Triggers>
							<b:EventTrigger EventName="LSInputBindingPressed">
								<b:InvokeCommandAction Command="{Binding SetLevelUpStep}" CommandParameter="SkipAnimation"/>
							</b:EventTrigger>
						</b:Interaction.Triggers>
					</ls:LSInputBinding>


					<b:Interaction.Triggers>

						<b:EventTrigger EventName="Loaded">
							<b:InvokeCommandAction Command="{Binding SetCameraMode}" CommandParameter="Overview"/>

							<b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource LevelUpAppearStoryboard}"/>

							<ls:LSPlaySound  Sound="UI_LevelUp_Menu_SequenceStart"/>

						</b:EventTrigger>

						<b:DataTrigger Binding="{Binding LevelUpStep}" Value="SkipAnimation">
							<b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource LevelUpAppearSkipStoryboard}"/>
						</b:DataTrigger>

						<b:DataTrigger Binding="{Binding LevelUpStep}" Value="IntroComplete">
							<b:ChangePropertyAction TargetName="SkipAnimationInput" PropertyName="IsEnabled" Value="False"/>
						</b:DataTrigger>

						<b:DataTrigger Binding="{Binding Path=IsVisible, ElementName=levelUp}" Value="True">
							<ls:LSPlaySound  Sound="UI_HUD_TriggerLevelUp"/>
						</b:DataTrigger>

					</b:Interaction.Triggers>

				</Grid>

				<ControlTemplate.Triggers>

					<DataTrigger Value="False">
						<DataTrigger.Binding>
							<MultiBinding Converter="{StaticResource EqualConverter}">
								<Binding Path="AvailableCharacterLevel"/>
								<Binding Path="SelectedMultiClass.Level" Converter="{StaticResource AddConverter}" ConverterParameter="1"/>
							</MultiBinding>
						</DataTrigger.Binding>
						<Setter TargetName="characterLevelText" Property="Visibility" Value="Visible"/>
						<Setter TargetName="ClassText" Property="Margin" Value="0,0,0,20"/>
					</DataTrigger>

					<DataTrigger Binding="{Binding IsLevelUpComplete}" Value="False">
						<Setter TargetName="MissingRequirementsError" Property="Visibility" Value="Visible"/>
					</DataTrigger>

					<DataTrigger Binding="{Binding IsClassDetailsOpen}" Value="True">
						<Setter TargetName="DetailsSection" Property="ContentTemplate" Value="{StaticResource DetailsTemplate}"/>
					</DataTrigger>

					<DataTrigger Binding="{Binding FilteredItems.Count, ElementName=RaceSpellSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="raceTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding FilteredItems.Count, ElementName=RaceProgressions, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="raceTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<!-- MOD START - Race tab should also be enabled on LevelUp if there are (sub)race selections available -->
					<DataTrigger Binding="{Binding FilteredItems.Count, ElementName=SubRaceSpellSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="raceTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding FilteredItems.Count, ElementName=RaceEquipments, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="raceTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding FilteredItems.Count, ElementName=SubRaceEquipments, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="raceTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding FilteredItems.Count, ElementName=RacePassiveSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="raceTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding FilteredItems.Count, ElementName=SubRacePassiveSelectors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="raceTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<!-- MOD END -->
					<DataTrigger Binding="{Binding FilteredItems.Count, ElementName=SubRaceProgressions, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="raceTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding ProgressionData.RaceProgression.Other.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="raceTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding ProgressionData.RaceProgression.AbilityBonuses.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="raceTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding ProgressionData.RaceProgression.SaveProficiencies.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="raceTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding ProgressionData.RaceProgression.WeaponProficiencies.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="raceTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding ProgressionData.RaceProgression.ArmourProficiencies.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="raceTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding ProgressionData.RaceProgression.Skills.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="raceTab" Property="Visibility" Value="Visible"/>
						<!-- MOD START - edit skills when given by proficiency and expertise -->
						<Setter TargetName="abilityTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<!-- Subclass has a selection -->
					<DataTrigger Binding="{Binding SelectableSubClasses.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="subClassTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding RaceSkills.Skills.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="abilityTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding ClassSkills.Skills.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="abilityTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding AllSkills.ExpertiseSkills.MaxSelectedSkillCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="abilityTab" Property="Visibility" Value="Visible"/>
					</DataTrigger>
					<!-- Only show a separate Ability Tab when starting a new multiclass -->
					<!--<DataTrigger Binding="{Binding SelectedMultiClass.Level, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
						<Setter TargetName="abilityTab" Property="Visibility" Value="Collapsed"/>
					</DataTrigger>-->
					<!-- MOD END -->

					<!--
				Gameplay Panel Content 
				-->

					<!-- Level Up Class -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="levelup"/>
							<Condition Binding="{Binding SelectedMultiClass.Level, Converter={StaticResource GreaterThanConverter}, 
ConverterParameter=0}" Value="True"/>
						</MultiDataTrigger.Conditions>

						<Setter TargetName="gameplayPanel" Property="Template">
							<Setter.Value>
								<ControlTemplate>
									<!-- Main level up class screen -->
									<ControlTemplate.Resources>
										<BitmapImage x:Key="SeparatorImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/divider_levelUp.png" />
										<BitmapImage x:Key="UpArrow1Image" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/upArrow_h1.png" />
										<BitmapImage x:Key="HP1Image" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/levelUp_hp_h1.png" />
										<BitmapImage x:Key="HP2Image" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/levelUp_hp_h2.png" />
										<BitmapImage x:Key="SideArrow2Image" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/levelUp_sideArrow_h2.png" />
									</ControlTemplate.Resources>

									<Grid>
										<Grid.Resources>
											<Storyboard x:Key="levelUpAppear">
												<DoubleAnimation Storyboard.TargetName="wideSeparator" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource LevelUpShowItemsStartTime}" From="0" To="1" Duration="0:0:0.2"/>
												<DoubleAnimation Storyboard.TargetName="separatorArrow" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource LevelUpShowItemsStartTime}" From="0" To="1" Duration="0:0:0.2"/>
											</Storyboard>
										</Grid.Resources>
										<b:Interaction.Triggers>
											<b:EventTrigger EventName="Loaded">
												<b:InvokeCommandAction Command="{Binding DataContext.SetupClassesLoopingCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="Owned"/>
											</b:EventTrigger>

											<!-- Animations (Only run once, not when changing tabs) -->
											<b:DataTrigger Binding="{Binding LevelUpStep}" Value="Started">

												<b:ChangePropertyAction TargetName="worldFader" PropertyName="Opacity" Value="0.75"/>
												<b:ChangePropertyAction TargetName="upperClassPanel" PropertyName="Opacity" Value="0"/>
												<b:ChangePropertyAction TargetName="wideSeparator" PropertyName="Opacity" Value="0"/>
												<b:ChangePropertyAction TargetName="separatorArrow" PropertyName="Opacity" Value="0"/>

												<b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource levelUpAppear}"/>

											</b:DataTrigger>

											<b:DataTrigger Binding="{Binding LevelUpStep}" Value="SkipAnimation">
												<b:ControlStoryboardAction ControlStoryboardOption="Stop" Storyboard="{StaticResource levelUpAppear}"/>
												<b:ChangePropertyAction TargetName="wideSeparator" PropertyName="Opacity" Value="1"/>
												<b:ChangePropertyAction TargetName="separatorArrow" PropertyName="Opacity" Value="1"/>
											</b:DataTrigger>

										</b:Interaction.Triggers>

										<Image Source="{StaticResource BGDecoration}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,50,0,0"/>

										<StackPanel x:Name="basePanel">

											<StackPanel x:Name="upperClassPanel">
												<Image Source="{StaticResource IconClass}" Stretch="None" Margin="0,64,0,0"/>
												<TextBlock Text="{Binding Source='he3ccedd0gceaeg4b1fg8e74g9dfc6da58cd2', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>
											</StackPanel>

											<StackPanel>
												<StackPanel.Resources>
													<Style TargetType="TextBlock">
														<Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
													</Style>
												</StackPanel.Resources>

												<!-- Classes carousel -->
												<StackPanel x:Name="ClassesCarousel" Orientation="Horizontal" HorizontalAlignment="Center" Opacity="{Binding Opacity, ElementName=upperClassPanel}">
													<StackPanel.Resources>
														<ControlTemplate x:Key="IconsTemplate">
															<ControlTemplate.Resources>
																<BitmapImage x:Key="LevelBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/holder_classLevel_bg.png" />
																<ImageBrush x:Key="LevelBackgroundBrush" ImageSource="{StaticResource LevelBackground}" Stretch="None"/>
																<ImageBrush x:Key="LevelBackgroundMonochromeBrush" ImageSource="{StaticResource LevelBackground}" Stretch="None">
																	<noesis:Brush.Shader>
																		<ls:MonochromeBrushShader/>
																	</noesis:Brush.Shader>
																</ImageBrush>
															</ControlTemplate.Resources>

															<StackPanel x:Name="ClassRoot" ToolTipService.IsEnabled="True">
																<StackPanel.ToolTip>
																	<ls:LSTooltip Placement="Center" VerticalOffset="-100">
																		<TextBlock Text="{Binding DataContext.Name, ElementName=ClassRoot}" Style="{StaticResource TooltipBaseTextStyle}"/>
																	</ls:LSTooltip>
																</StackPanel.ToolTip>
																<Grid HorizontalAlignment="Center" Height="350">

																	<Rectangle x:Name="LevelBackground" Width="100" Height="140" Fill="{StaticResource LevelBackgroundBrush}" HorizontalAlignment="Center" VerticalAlignment="Bottom"/>

																	<Grid Margin="10,0" HorizontalAlignment="Center" VerticalAlignment="Top" >
																		<!-- MOD START - Use main class instead of subclass icon -->
																		<Image x:Name="icon" Style="{StaticResource MainClassIconStyle}" Stretch="None"/>
																		<!-- MOD END -->
																		<Rectangle x:Name="monochromeIcon" Height="{Binding ActualHeight, ElementName=icon}" MinWidth="{Binding ActualWidth, ElementName=icon}" Visibility="Collapsed">
																			<Rectangle.Fill>
																				<ImageBrush ImageSource="{Binding Source, ElementName=icon}" Stretch="None">
																					<noesis:Brush.Shader>
																						<ls:MonochromeBrushShader/>
																					</noesis:Brush.Shader>
																				</ImageBrush>
																			</Rectangle.Fill>
																		</Rectangle>
																	</Grid>

																	<TextBlock x:Name="level" Foreground="{StaticResource CCTextPrimary}" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,8" FontSize="{StaticResource ScaledDefaultFontSize}">
																		<TextBlock.Text>
																			<MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
																				<Binding Source="h5df00b79ga6acg4d9fgb8dag23340151fba7"/>
																				<Binding Path="DataContext.Level" RelativeSource="{RelativeSource Mode=Self}"/>
																				<Binding Source=""/>
																			</MultiBinding>
																		</TextBlock.Text>
																	</TextBlock>
																</Grid>
															</StackPanel>

															<ControlTemplate.Triggers>
																<DataTrigger Value="True">
																	<DataTrigger.Binding>
																		<MultiBinding Converter="{StaticResource EqualConverter}">
																			<Binding Path="DataContext" RelativeSource="{RelativeSource Self}"/>
																			<Binding Path="DataContext.SelectedMultiClass" ElementName="CharacterLevelUp"/>
																		</MultiBinding>
																	</DataTrigger.Binding>
																	<Setter TargetName="ClassRoot" Property="ToolTipService.IsEnabled" Value="False"/>
																	<Setter TargetName="level" Property="Text">
																		<Setter.Value>
																			<MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
																				<Binding Source="h5df00b79ga6acg4d9fgb8dag23340151fba7"/>
																				<Binding Path="DataContext.Level" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource AddConverter}" ConverterParameter="1"/>
																				<Binding Source=""/>
																			</MultiBinding>
																		</Setter.Value>
																	</Setter>
																</DataTrigger>

																<DataTrigger Binding="{Binding (ToolTipService.IsEnabled), ElementName=ClassRoot}" Value="True">
																	<Setter TargetName="LevelBackground" Property="Opacity" Value="0.75"/>
																	<Setter TargetName="LevelBackground" Property="Fill" Value="{StaticResource LevelBackgroundMonochromeBrush}"/>

																	<Setter TargetName="icon" Property="Visibility" Value="Hidden"/>
																	<Setter TargetName="monochromeIcon" Property="Opacity" Value="0.75"/>
																	<Setter TargetName="monochromeIcon" Property="Visibility" Value="Visible"/>

																	<Setter TargetName="level" Property="Opacity" Value="0.6"/>
																</DataTrigger>

																<MultiDataTrigger>
																	<MultiDataTrigger.Conditions>
																		<Condition Binding="{Binding (ToolTipService.IsEnabled), ElementName=ClassRoot}" Value="True"/>
																		<Condition Binding="{Binding IsMouseOver, ElementName=ClassRoot}" Value="True"/>
																	</MultiDataTrigger.Conditions>
																	<MultiDataTrigger.Setters>
																		<Setter TargetName="LevelBackground" Property="Opacity" Value="1"/>
																		<Setter TargetName="LevelBackground" Property="Fill" Value="{StaticResource LevelBackgroundMonochromeBrush}"/>

																		<Setter TargetName="icon" Property="Visibility" Value="Hidden"/>
																		<Setter TargetName="monochromeIcon" Property="Opacity" Value="1"/>
																		<Setter TargetName="monochromeIcon" Property="Visibility" Value="Visible"/>

																		<Setter TargetName="level" Property="Opacity" Value="0.75"/>
																	</MultiDataTrigger.Setters>
																</MultiDataTrigger>
															</ControlTemplate.Triggers>
														</ControlTemplate>
													</StackPanel.Resources>

													<Grid HorizontalAlignment="Center" Width="900">
														<Grid.Resources>
															<ControlTemplate x:Key="ClassCarouselButtonTemplate" TargetType="ls:LSButton">
																<Grid Width="80" Height="80" Background="Transparent">
																	<Image x:Name="arrow" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/input_arrow_d.png" Stretch="None"/>
																</Grid>

																<ControlTemplate.Triggers>
																	<Trigger Property="IsMouseOver" Value="True">
																		<Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/input_arrow_h.png" TargetName="arrow"/>
																	</Trigger>
																	<Trigger Property="IsPressed" Value="True">
																		<Setter TargetName="arrow" Property="Margin" Value="0,4,0,0"/>
																	</Trigger>
																</ControlTemplate.Triggers>
															</ControlTemplate>
														</Grid.Resources>

														<StackPanel x:Name="CarouselSelector" Orientation="Horizontal" HorizontalAlignment="Center">
															<Control x:Name="CarouselLeftItem" Template="{DynamicResource IconsTemplate}" DataContext="{Binding SelectedMultiClass.Prev}">
																<Control.OpacityMask>
																	<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
																		<GradientStop Offset="0" Color="Transparent" />
																		<GradientStop Offset="1" Color="Black" />
																	</LinearGradientBrush>
																</Control.OpacityMask>
																<Control.InputBindings>
																	<MouseBinding MouseAction="LeftClick"
																		Command="{Binding DataContext.SelectPrevUsedClass, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
																</Control.InputBindings>
															</Control>
															<Control Template="{DynamicResource IconsTemplate}" DataContext="{Binding SelectedMultiClass}"/>
															<Control x:Name="CarouselRightItem" Template="{DynamicResource IconsTemplate}" DataContext="{Binding SelectedMultiClass.Next}">
																<Control.OpacityMask>
																	<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
																		<GradientStop Offset="0" Color="Black" />
																		<GradientStop Offset="1" Color="Transparent" />
																	</LinearGradientBrush>
																</Control.OpacityMask>
																<Control.InputBindings>
																	<MouseBinding MouseAction="LeftClick"
																		Command="{Binding DataContext.SelectNextUsedClass, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
																</Control.InputBindings>
															</Control>
														</StackPanel>

														<ListBox x:Name="NonCarouselSelector" ItemsSource="{Binding SelectableMultiClasses}" SelectedItem="{Binding SelectedMultiClass}" Visibility="Collapsed">
															<ListBox.ItemsPanel>
																<ItemsPanelTemplate>
																	<StackPanel Orientation="Horizontal" HorizontalAlignment="Center"/>
																</ItemsPanelTemplate>
															</ListBox.ItemsPanel>

															<ListBox.ItemTemplate>
																<DataTemplate DataType="ls:VMSelectableClass">
																	<Control Template="{DynamicResource IconsTemplate}" DataContext="{Binding .}"/>
																</DataTemplate>
															</ListBox.ItemTemplate>

															<ListBox.ItemContainerStyle>
																<Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
																	<Setter Property="Visibility" Value="Collapsed"/>
																	<Style.Triggers>
																		<DataTrigger Binding="{Binding DataContext.Level, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0, RelativeSource={RelativeSource Self}}" Value="True">
																			<Setter Property="Visibility" Value="Visible"/>
																		</DataTrigger>
																	</Style.Triggers>
																</Style>
															</ListBox.ItemContainerStyle>
														</ListBox>

														<ls:LSButton x:Name="leftBtn" Template="{StaticResource ClassCarouselButtonTemplate}" 
																			 HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,0,0,0"
																			 Command="{Binding DataContext.SelectPrevUsedClass, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
																			 SoundID="{DynamicResource CarouselButtonSoundEvent}"/>

														<ls:LSButton x:Name="rightBtn" Template="{StaticResource ClassCarouselButtonTemplate}" 
																			 HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,0,0"
																			 Command="{Binding DataContext.SelectNextUsedClass, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
																			 SoundID="{DynamicResource CarouselButtonSoundEvent}">
															<ls:LSButton.RenderTransform>
																<ScaleTransform ScaleX="-1" CenterX="40"/>
															</ls:LSButton.RenderTransform>
														</ls:LSButton>
													</Grid>
												</StackPanel>

												<!-- Separator -->
												<Grid Margin="0,-20,0,-20">
													<Image x:Name="wideSeparator" Source="{StaticResource SeparatorImage}" Stretch="None"/>
													<Image x:Name="separatorArrow" Source="{StaticResource UpArrow1Image}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center">
														<Image.RenderTransform>
															<TransformGroup>
																<TranslateTransform Y="0"/>
																<ScaleTransform ScaleY="-1" CenterY="98"/>
															</TransformGroup>
														</Image.RenderTransform>
													</Image>
												</Grid>

												<ListBox x:Name="animatedLevelUpItems" IsHitTestVisible="False">
													<ListBox.Template>
														<ControlTemplate TargetType="ListBox">

															<ls:LSScrollViewer x:Name="animatedLevelUpItemsScrollViewer" Template="{StaticResource ScrollViewerTemplate}" VerticalScrollBarVisibility="Auto" Height="1106" HorizontalAlignment="Left">

																<ItemsPresenter/>

															</ls:LSScrollViewer>

															<ControlTemplate.Triggers>
																<DataTrigger Binding="{Binding LevelUpStep}" Value="Started">
																	<Setter TargetName="animatedLevelUpItemsScrollViewer" Property="VerticalScrollBarVisibility" Value="Hidden"/>
																</DataTrigger>

																<DataTrigger Binding="{Binding ElementName=levelUpItemsSequence, Path=SequenceCompleted}" Value="True">
																	<Setter TargetName="animatedLevelUpItemsScrollViewer" Property="VerticalScrollBarVisibility" Value="Auto"/>
																</DataTrigger>
															</ControlTemplate.Triggers>
														</ControlTemplate>
													</ListBox.Template>
													<ListBox.ItemsPanel>
														<ItemsPanelTemplate>
															<StackPanel IsItemsHost="True" Style="{StaticResource gameplayScrolledStackPanelStyle}" Margin="142,0,0,0"/>
														</ItemsPanelTemplate>
													</ListBox.ItemsPanel>

													<b:Interaction.Behaviors>

														<ls:SequenceBehavior x:Name="levelUpItemsSequence" TimeOffset="0:0:0.5" CompletedDelay="0:0:0.5"/>

														<ls:AutoScrollBehavior ScrollIntoView="{Binding SelectedIndex, ElementName=animatedLevelUpItems}" BringSelectionIntoView="True"/>

													</b:Interaction.Behaviors>

													<b:Interaction.Triggers>
														<b:TimerTrigger EventName="Loaded" MillisecondsPerTick="2000" TotalTicks="1">
															<b:Interaction.Behaviors>
																<b:ConditionBehavior>
																	<b:ConditionalExpression>
																		<b:ComparisonCondition LeftOperand="{Binding LevelUpStep}" Operator="Equal" RightOperand="Started"/>
																	</b:ConditionalExpression>
																</b:ConditionBehavior>
															</b:Interaction.Behaviors>
															<b:ChangePropertyAction TargetName="levelUpItemsSequence" PropertyName="Animate" Value="True"/>
														</b:TimerTrigger>

														<b:DataTrigger Binding="{Binding LevelUpStep}" Value="SkipAnimation">
															<b:ChangePropertyAction TargetName="levelUpItemsSequence" PropertyName="TimeOffset" Value="0:0:0"/>
															<b:ChangePropertyAction TargetName="levelUpItemsSequence" PropertyName="CompletedDelay" Value="0:0:0"/>
															<b:ChangePropertyAction TargetName="levelUpItemsSequence" PropertyName="Animate" Value="True"/>

															<ls:LSControlStoryboard ControlStoryboardOption="Play" Storyboard="{StaticResource LevelUpAfterItemsSkipStoryboard}" CompletedCommand="{Binding SetLevelUpStep}" CompletedCommandParameter="IntroComplete"/>
															<b:ChangePropertyAction TargetName="SetCameraControl" PropertyName="Template" Value="{StaticResource setGameplayCameraOffsets}"/>
															<b:ChangePropertyAction TargetName="levelUp" PropertyName="IsHitTestVisible" Value="True"/>
														</b:DataTrigger>

														<b:DataTrigger Binding="{Binding ElementName=levelUpItemsSequence, Path=SequenceCompleted}" Value="True">
															<ls:LSControlStoryboard ControlStoryboardOption="Play" Storyboard="{StaticResource LevelUpAfterItemsStoryboard}" CompletedCommand="{Binding SetLevelUpStep}" CompletedCommandParameter="IntroComplete"/>
															<b:ChangePropertyAction TargetName="SetCameraControl" PropertyName="Template" Value="{StaticResource setGameplayCameraOffsets}"/>

															<b:ChangePropertyAction TargetName="levelUp" PropertyName="IsHitTestVisible" Value="True"/>
														</b:DataTrigger>
													</b:Interaction.Triggers>

													<!-- These ListBoxItems animate in at the start -->
													<ListBoxItem Visibility="{Binding SelectableSubClasses.Count, Converter={StaticResource CountToVisibilityConverter}}" Template="{StaticResource levelUpListBoxItemTemplate}">
														<!-- Subclass -->
														<ContentControl x:Name="Subclasses" ContentTemplate="{StaticResource SubclassesTemplate}" Content="{Binding .}"/>
													</ListBoxItem>

													<ListBoxItem Template="{StaticResource levelUpListBoxItemTemplate}">
														<!-- HP -->
														<ContentControl Template="{StaticResource NewItemStripTemplate}">
															<StackPanel HorizontalAlignment="Center">
																<StackPanel.ToolTip>
																	<ls:LSTooltip ContentTemplate="{StaticResource HPTooltipTooltip}"/>
																</StackPanel.ToolTip>

																<TextBlock Text="{Binding Source='h7f2fb117g1f87g4849ga4b8gd864068066b8', Converter={StaticResource TranslatedStringConverter}}" />
																<StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
																	<Image Source="{StaticResource HP1Image}" Stretch="None" VerticalAlignment="Center"/>
																	<TextBlock ls:TextBlockFormatter.SourceText="{Binding DummyCharacter.Stats.Health.Value}" VerticalAlignment="Center"/>
																	<Image Source="{StaticResource SideArrow2Image}" Stretch="None" VerticalAlignment="Center" Margin="0,0,-10,0"/>
																	<Image Source="{StaticResource HP2Image}" Stretch="None" VerticalAlignment="Center"/>
																	<TextBlock ls:TextBlockFormatter.SourceText="{Binding DummyCharacter.Stats.Health.Max}" VerticalAlignment="Center"/>
																</StackPanel>
															</StackPanel>
														</ContentControl>

													</ListBoxItem>

													<ListBoxItem Visibility="{Binding ProgressionData.ClassProgression.Other.Count, Converter={StaticResource CountToVisibilityConverter}}" Template="{StaticResource levelUpListBoxItemTemplate}">
														<!-- Class features -->
														<ContentControl Template="{DynamicResource LevelUpShowFeaturesTemplate}" DataContext="{Binding ProgressionData.ClassProgression.Other}" Content="{Binding Source='h4c3d6eacgf0adg4c31gb11ag3d4736a7fac3', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center"/>
													</ListBoxItem>

													<!-- MOD START - edit skills when given by proficiency and expertise -->
													<ListBoxItem x:Name="featureSkills" Visibility="Collapsed" Template="{StaticResource levelUpListBoxItemTemplate}">
														<!-- Skill Proficiency and Expertise -->
														<ContentControl Template="{StaticResource NewItemStripTemplate}" Margin="0,0,0,50">
														<!-- MOD END -->
															<Grid>
																<StackPanel HorizontalAlignment="Stretch">
																	<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h12abe296ga0fbg44feg9451gb10a0bf92acb, Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center"/>
																	<Control Template="{StaticResource skillsEditorSummaryTemplate}" HorizontalAlignment="Center" Margin="0,0,0,20"/>
																</StackPanel>

																<ls:LSToggleButton x:Name="editSkillsButton" Template="{StaticResource EditSkillsButtonTemplate}" IsChecked="False" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,52,0,-52" SoundID="UI_HUD_CC_OpenCloseToggle"/>

															</Grid>
														</ContentControl>

													</ListBoxItem>

													<ListBoxItem x:Name="featureSpells" Template="{StaticResource levelUpListBoxItemTemplate}">
														<!-- Class Actions / Cantrips / Spells -->
														<ItemsControl ItemsSource="{Binding FilteredItems, ElementName=ClassProgressions}" ItemTemplate="{StaticResource ProgressionSpellsTemplate}"/>

													</ListBoxItem>

													<ListBoxItem Visibility="{Binding FilteredItems.Count, ElementName=ClassSpellSelectors, Converter={StaticResource CountToVisibilityConverter}}" Template="{StaticResource levelUpListBoxItemTemplate}">

														<!-- Class Spell Selectors -->
														<ItemsControl ItemsSource="{Binding FilteredItems, ElementName=ClassSpellSelectors}" ItemTemplate="{StaticResource LevelUpSpellSelectorPreviewTemplate}"/>

													</ListBoxItem>

													<ListBoxItem Visibility="{Binding ClassProgressionDetails.NotSubPassiveSelectors.Count, Converter={StaticResource CountToVisibilityConverter}}" Template="{StaticResource levelUpListBoxItemTemplate}">
														
														<!-- Class Passive Selectors -->
														<ItemsControl ItemsSource="{Binding ClassProgressionDetails.NotSubPassiveSelectors}" ItemTemplate="{StaticResource LevelUpPassiveSelectorPreviewTemplate}" ItemContainerStyle="{StaticResource UpdateStateItemStyle}"/>
														
													</ListBoxItem>

													<!--
													SubClass LevelUp Gains
													-->
													<ListBoxItem Visibility="{Binding ProgressionData.SubClassProgression.Other.Count, Converter={StaticResource CountToVisibilityConverter}}" Template="{StaticResource levelUpListBoxItemTemplate}">
														<!-- Class features -->
														<ContentControl Template="{DynamicResource LevelUpShowFeaturesTemplate}" DataContext="{Binding ProgressionData.SubClassProgression.Other}" Content="{Binding Source='ha3fe9fd2gcd03g4e0bgbb45gf60144f6aba6', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center"/>
													</ListBoxItem>

													<ListBoxItem x:Name="subClassFeatureSpells" Template="{StaticResource levelUpListBoxItemTemplate}">

														<ItemsControl  ItemsSource="{Binding FilteredItems, ElementName=SubClassProgressions}" ItemTemplate="{StaticResource ProgressionSpellsTemplate}" />
														
													</ListBoxItem>

													<ListBoxItem Visibility="{Binding FilteredItems.Count, ElementName=SubClassSpellSelectors, Converter={StaticResource CountToVisibilityConverter}}" Template="{StaticResource levelUpListBoxItemTemplate}">

														<ItemsControl ItemsSource="{Binding FilteredItems, ElementName=SubClassSpellSelectors}" ItemTemplate="{StaticResource LevelUpSpellSelectorPreviewTemplate}"/>

													</ListBoxItem>

													<ListBoxItem Visibility="{Binding ClassProgressionDetails.SubPassiveSelectors.Count, Converter={StaticResource CountToVisibilityConverter}}" Template="{StaticResource levelUpListBoxItemTemplate}">

														<ItemsControl ItemsSource="{Binding ClassProgressionDetails.SubPassiveSelectors}" ItemTemplate="{StaticResource LevelUpPassiveSelectorPreviewTemplate}" ItemContainerStyle="{StaticResource UpdateStateItemStyle}"/>

													</ListBoxItem>

													<ListBoxItem Visibility="{Binding ClassProgressionDetails.InSpellReplacement, Converter={StaticResource NullToCollapsedConverter}}" Template="{StaticResource levelUpListBoxItemTemplate}">

														<!-- Spell Replacement Available -->
														<ContentControl x:Name="spellReplaceBox" Template="{StaticResource NewItemStripTemplate}">
															<b:Interaction.Triggers>
																<b:EventTrigger EventName="MouseLeftButtonUp">
																	<b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedItem" Value="{Binding ElementName=spellReplaceTab}" />
																</b:EventTrigger>
															</b:Interaction.Triggers>
															<TextBlock x:Name="spellReplaceText" Text="{Binding Source='h000011feg0be5g4f09g978eg030b3e2e62c6', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center"/>
														</ContentControl>

													</ListBoxItem>

													<ListBoxItem Visibility="{Binding CanSelectFeat, Converter={StaticResource BoolToVisibleConverter}}" Template="{StaticResource levelUpListBoxItemTemplate}">
														
														<!-- Feat Available -->
														<ContentControl x:Name="newFeatBox" Template="{StaticResource NewItemStripTemplate}">
															<b:Interaction.Triggers>
																<b:EventTrigger EventName="MouseLeftButtonUp">
																	<b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedItem" Value="{Binding ElementName=featTab}" />
																</b:EventTrigger>
															</b:Interaction.Triggers>
															<TextBlock x:Name="newFeatText" Text="{Binding Source='h12ed73a6g2dc4g49ebg9c0ag304ca2b76196', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center"/>
														</ContentControl>
														
													</ListBoxItem>

												</ListBox>
											</StackPanel>

										</StackPanel>

										<Grid HorizontalAlignment="Left" VerticalAlignment="Top" Margin="1048,128,0,0">
											<Grid.Resources>
												<BitmapImage x:Key="ButtonNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_addClass_d.png"/>
												<BitmapImage x:Key="ButtonHighlight" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/btn_addClass_h.png"/>
											</Grid.Resources>

											<ls:LSButton x:Name="AddClassButton" Opacity="{Binding Opacity, ElementName=upperClassPanel}" 
														 Command="{Binding DataContext.SelectFirstUnusedClass, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
														 Visibility="{Binding IsMulticlassEnabled, Converter={StaticResource BoolToVisibleConverter}}">
											   
												<b:Interaction.Triggers>
													<b:EventTrigger EventName="Click">
														<b:ChangePropertyAction TargetName="gameplayTabs" PropertyName="SelectedItem" Value="{Binding ElementName=classTab}" />
													</b:EventTrigger>
												</b:Interaction.Triggers>
												<ls:LSButton.ToolTip>
													<ls:LSTooltip>
														<TextBlock x:Name="AddClassTooltipText" ls:TextBlockFormatter.SourceText="{Binding Source='hcbc3c9a8g9e80g4139g952bga971015c1f41', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
													</ls:LSTooltip>
												</ls:LSButton.ToolTip>
												<ls:LSButton.Template>
													<ControlTemplate TargetType="{x:Type ls:LSButton}">
														<Grid Background="Transparent">
															<Image x:Name="image" Source="{StaticResource ButtonNormal}" Stretch="None" IsHitTestVisible="False"/>
														</Grid>
														<ControlTemplate.Triggers>
															<Trigger Property="IsMouseOver" Value="True">
																<Setter TargetName="image" Property="Source" Value="{StaticResource ButtonHighlight}"/>
															</Trigger>
															<Trigger Property="IsPressed" Value="True">
																<Setter TargetName="image" Property="Margin" Value="0,4,0,0"/>
															</Trigger> 
														</ControlTemplate.Triggers>
													</ControlTemplate>
												</ls:LSButton.Template>
											</ls:LSButton>

											<Image x:Name="DisabledAddClassButton" Visibility="{Binding IsMulticlassEnabled, Converter={StaticResource BoolToCollapsedConverter}}" 
												   Source="{StaticResource ButtonNormal}" Stretch="None" Opacity="0.5">
												<Image.ToolTip>
													<ls:LSTooltip>
														<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h8fcb856ega2acg4a7fga12fg65567a18376e', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TooltipBaseTextStyle}"/>
													</ls:LSTooltip>
												</Image.ToolTip>
											</Image>
										</Grid>


										<Grid x:Name="skillsOverPanel" Visibility="{Binding Path=IsChecked, ElementName=editSkillsButton, Converter={StaticResource BoolToVisibleConverter}}" VerticalAlignment="Top" Margin="0,220,0,0">

											<Control Template="{StaticResource overpanelSkillsTemplate}"/>

											<ls:LSToggleButton IsChecked="{Binding IsChecked, Mode=TwoWay, ElementName=editSkillsButton}" Template="{StaticResource ToggleConfirmButtonTemplate}" VerticalAlignment="Bottom" Margin="0,0,0,-16" SoundID="UI_HUD_CC_OpenCloseToggle"/>
											
										</Grid>

									</Grid>
									<ControlTemplate.Triggers>

										<DataTrigger Binding="{Binding LevelUpStep}" Value="IntroComplete">
											<Setter TargetName="animatedLevelUpItems" Property="IsHitTestVisible" Value="True"/>
										</DataTrigger>

										<DataTrigger Binding="{Binding ElementName=spellReplaceBox, Path=IsMouseOver}" Value="True">
											<Setter TargetName="spellReplaceText" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
										</DataTrigger>
										<DataTrigger Binding="{Binding ElementName=newFeatBox, Path=IsMouseOver}" Value="True">
											<Setter TargetName="newFeatText" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
										</DataTrigger>
										
										<DataTrigger Binding="{Binding ActualHeight, ElementName=featureSpells}" Value="0">
											<Setter TargetName="featureSpells" Property="Visibility" Value="Hidden"/>
										</DataTrigger>
										<!-- MOD START - edit skills when given by proficiency and expertise -->
										<DataTrigger Binding="{Binding AllSkills.RaceProficientSkills.MaxSelectedSkillCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
											<Setter TargetName="featureSkills" Property="Visibility" Value="Visible"/>
										</DataTrigger>
										<DataTrigger Binding="{Binding AllSkills.ClassProficientSkills.MaxSelectedSkillCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
											<Setter TargetName="featureSkills" Property="Visibility" Value="Visible"/>
										</DataTrigger>
										<DataTrigger Binding="{Binding AllSkills.ExpertiseSkills.MaxSelectedSkillCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
											<Setter TargetName="featureSkills" Property="Visibility" Value="Visible"/>
										</DataTrigger>
										<!-- MOD END -->
										<DataTrigger Binding="{Binding ActualHeight, ElementName=subClassFeatureSpells}" Value="0">
											<Setter TargetName="subClassFeatureSpells" Property="Visibility" Value="Hidden"/>
										</DataTrigger>                                        

										<DataTrigger Binding="{Binding Path=IsChecked, ElementName=editSkillsButton}" Value="True">
											<Setter TargetName="basePanel" Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
											<Setter TargetName="basePanel" Property="IsEnabled" Value="False"/>
										</DataTrigger>

										<DataTrigger Binding="{Binding DataContext.UsedClassesCount, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource LessThanConverter}, ConverterParameter=3}" Value="True">
											<Setter TargetName="leftBtn" Property="Visibility" Value="Collapsed"/>
											<Setter TargetName="rightBtn" Property="Visibility" Value="Collapsed"/>
											<Setter TargetName="CarouselSelector" Property="Visibility" Value="Collapsed"/>
											<Setter TargetName="NonCarouselSelector" Property="Visibility" Value="Visible"/>
										</DataTrigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>

					</MultiDataTrigger>


					<DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="race">
						<Setter TargetName="gameplayPanel" Property="Template">
							<Setter.Value>
								<ControlTemplate>
									<StackPanel>

										<Image Style="{StaticResource PanelHeaderIconStyle}"/>
										<TextBlock Text="{Binding DummyCharacter.Stats.Race.DisplayName}" Style="{StaticResource PanelHeaderText}" Margin="0,0,0,50"/>

										<ItemsControl x:Name="raceFeatureSpells" ItemsSource="{Binding FilteredItems, ElementName=RaceProgressions}" ItemTemplate="{StaticResource ProgressionSpellsTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=RaceProgressions, Converter={StaticResource CountToVisibilityConverter}}" Margin="0,0,0,20"/>

										<!-- MOD START - Race tab shows preview of spell choice on level up if available (race granted) -->
										<ItemsControl x:Name="raceSpellSelectors" ItemsSource="{Binding FilteredItems, ElementName=RaceSpellSelectors}" ItemTemplate="{StaticResource LevelUpSpellSelectorPreviewTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=RaceSpellSelectors, Converter={StaticResource CountToVisibilityConverter}}" Margin="0,0,0,20"/>
										<!-- MOD END -->

										<ItemsControl x:Name="subRaceFeatureSpells" ItemsSource="{Binding FilteredItems, ElementName=SubRaceProgressions}" ItemTemplate="{StaticResource ProgressionSpellsTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=SubRaceProgressions, Converter={StaticResource CountToVisibilityConverter}}" Margin="0,0,0,20"/>

										<!-- MOD START - Race tab shows preview of spell choice on level up if available (subrace granted) -->
										<ItemsControl x:Name="subRaceSpellSelectors" ItemsSource="{Binding FilteredItems, ElementName=SubRaceSpellSelectors}" ItemTemplate="{StaticResource LevelUpSpellSelectorPreviewTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=SubRaceSpellSelectors, Converter={StaticResource CountToVisibilityConverter}}" Margin="0,0,0,20"/>
										<!-- MOD END -->

										<!-- MOD START - Race tab shows preview of racial passive if available -->
										<ItemsControl x:Name="racePassiveSelectors" ItemsSource="{Binding FilteredItems, ElementName=RacePassiveSelectors}" ItemTemplate="{StaticResource LevelUpPassiveSelectorPreviewTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=RacePassiveSelectors, Converter={StaticResource CountToVisibilityConverter}}" Margin="0,0,0,20"/>

										<ItemsControl x:Name="subRacePassiveSelectors" ItemsSource="{Binding FilteredItems, ElementName=SubRacePassiveSelectors}" ItemTemplate="{StaticResource LevelUpPassiveSelectorPreviewTemplate}" Visibility="{Binding FilteredItems.Count, ElementName=SubRacePassiveSelectors, Converter={StaticResource CountToVisibilityConverter}}" Margin="0,0,0,20"/>
										<!-- MOD END -->

										<ContentControl Template="{DynamicResource LevelUpShowFeaturesTemplate}" DataContext="{Binding ProgressionData.RaceProgression.Other}" Content="{Binding Source='hd0d992ebg43f8g429bgbf11g0cbf54d84d4e', Converter={StaticResource TranslatedStringConverter}}" Visibility="{Binding Count, Converter={StaticResource CountToVisibilityConverter}}" HorizontalAlignment="Center" Margin="0,0,0,20"/>

									</StackPanel>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</DataTrigger>

					<!-- New Class -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="class"/>
							<Condition Binding="{Binding SelectedMultiClass.Level}" Value="0"/>
						</MultiDataTrigger.Conditions>

						<Setter TargetName="gameplayPanel" Property="Template" Value="{StaticResource classPanelTemplate}"/>

					</MultiDataTrigger>

					<!-- Subclass of a new multiclass (matches CC) -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="subclass"/>
							<Condition Binding="{Binding SelectedMultiClass.Level}" Value="0"/>
						</MultiDataTrigger.Conditions>

						<Setter TargetName="gameplayPanel" Property="Template" Value="{StaticResource subClassPanelTemplate}"/>

					</MultiDataTrigger>

					<!-- Level Up SubClass -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="subclass"/>
							<Condition Binding="{Binding SelectedMultiClass.Level, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
						</MultiDataTrigger.Conditions>

						<Setter TargetName="gameplayPanel" Property="Template" Value="{StaticResource levelUpSubClassTemplate}"/>

					</MultiDataTrigger>


					<DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="draconic">
						<Setter TargetName="gameplayPanel" Property="Template" Value="{StaticResource draconicAppearancePanelTemplate}"/>
					</DataTrigger>

					<DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="deity">
						<Setter TargetName="gameplayPanel" Property="Template" Value="{StaticResource deityTabPanelTemplate}"/>
					</DataTrigger>

					<DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="feat">
						<Setter TargetName="gameplayPanel" Property="Template" Value="{StaticResource featsPanel}"/>
					</DataTrigger>

					<DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="ability">
						<Setter TargetName="gameplayPanel" Property="Template">
							<Setter.Value>
								<ControlTemplate>
									<Grid>
										<StackPanel x:Name="basePanel">
											<Image Source="{StaticResource IconClass}" Stretch="None" Margin="0,64,0,0"/>
											<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h12abe296ga0fbg44feg9451gb10a0bf92acb', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>

											<Grid x:Name="skillSection" Visibility="Collapsed" HorizontalAlignment="Center" Margin="0,50,0,0">
												<Image Source="{StaticResource DetailsBoxBig}" Stretch="None"/>

												<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h14f4a0e4gb495g4a75gb318g6d5d322fd738, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}" VerticalAlignment="Center" Margin="0,-114,0,114"/>

												<Control Template="{StaticResource skillsEditorSummaryTemplate}" Width="610"  VerticalAlignment="Center" Margin="0,-10,0,10"/>

												<ls:LSToggleButton x:Name="editSkillsButton" Template="{StaticResource EditSkillsButtonTemplate}" IsChecked="False" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,-8" SoundID="UI_HUD_CC_OpenCloseToggle"/>
											</Grid>

										</StackPanel>

										<Grid x:Name="skillsOverPanel" Visibility="{Binding Path=IsChecked, ElementName=editSkillsButton, Converter={StaticResource BoolToVisibleConverter}}" VerticalAlignment="Top" Margin="0,220,0,0">

											<Control Template="{StaticResource overpanelSkillsTemplate}"/>

											<ls:LSToggleButton IsChecked="{Binding IsChecked, Mode=TwoWay, ElementName=editSkillsButton}" Template="{StaticResource ToggleConfirmButtonTemplate}" VerticalAlignment="Bottom" Margin="0,0,0,-16" SoundID="UI_HUD_CC_OpenCloseToggle"/>
											
										</Grid>

									</Grid>
									<ControlTemplate.Triggers>
										<DataTrigger Binding="{Binding RaceSkills.Skills.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
											<Setter TargetName="skillSection" Property="Visibility" Value="Visible"/>
										</DataTrigger>
										<DataTrigger Binding="{Binding ClassSkills.Skills.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
											<Setter TargetName="skillSection" Property="Visibility" Value="Visible"/>
										</DataTrigger>
										<DataTrigger Binding="{Binding AllSkills.ExpertiseSkills.MaxSelectedSkillCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
											<Setter TargetName="skillSection" Property="Visibility" Value="Visible"/>
										</DataTrigger>

									</ControlTemplate.Triggers>

								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</DataTrigger>

					<DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="spellreplace">
						<Setter TargetName="gameplayPanel" Property="Template">
							<Setter.Value>
								<ControlTemplate>

									<Grid>

										<StackPanel x:Name="basePanel">

											<Image Source="{StaticResource IconClass}" Stretch="None" Margin="0,64,0,0"/>
											<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h000011feg0be5g4f09g978eg030b3e2e62c6', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}"/>

											<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h7d40d764gac52g4ccbgb18eg136c928dd69e', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}" Margin="0,20,0,0"/>

											<ls:LSNineSliceImage Slices="50,50,50,50" ImageSource="{StaticResource DetailsBoxBig}" HorizontalAlignment="Center"  MinWidth="708" MinHeight="252" Margin="0,50,0,0">
												<Grid>
													<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=hd19b7627gc9c3g4ff4ga827g5d68b0ce1409, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}" VerticalAlignment="Top" Margin="0,-10,0,0"/>

													<StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,50,0,70">
														<Grid>
															<Image Source="{StaticResource SpellReplaceFrame}" Stretch="None"/>
															<Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding ClassProgressionDetails.OutSpellReplacement.Spell}"/>
															<Image Source="{StaticResource SpellReplaceOutOverlay}" Stretch="None" IsHitTestVisible="False"/>
														</Grid>

														<TextBlock Text="{Binding ClassProgressionDetails.OutSpellReplacement.Spell.Name}"/>
													</StackPanel>

													<ls:LSToggleButton x:Name="editOutSpellButton" Template="{StaticResource ChangeButtonTemplate}" IsChecked="False" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,-8" SoundID="UI_HUD_CC_OpenCloseToggle"/>
												</Grid>
											</ls:LSNineSliceImage>


											<Image x:Name="downArrow" Stretch="None" HorizontalAlignment="Center">
												<Image.RenderTransform>
													<ScaleTransform ScaleY="-1" CenterY="98"/>
												</Image.RenderTransform>
												<Image.Triggers>
													<EventTrigger RoutedEvent="FrameworkElement.Loaded">
														<BeginStoryboard>
															<Storyboard RepeatBehavior="Forever" Duration="0:0:0.5">
																<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Image.Source)" Storyboard.TargetName="downArrow">
																	<DiscreteObjectKeyFrame KeyTime="0:0:0">
																		<DiscreteObjectKeyFrame.Value>
																			<BitmapImage UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterLevelup/upArrow_h1.png" />
																		</DiscreteObjectKeyFrame.Value>
																	</DiscreteObjectKeyFrame>
																	<DiscreteObjectKeyFrame KeyTime="0:0:0.25">
																		<DiscreteObjectKeyFrame.Value>
																			<BitmapImage UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterLevelup/upArrow_h2.png" />
																		</DiscreteObjectKeyFrame.Value>
																	</DiscreteObjectKeyFrame>
																</ObjectAnimationUsingKeyFrames>
															</Storyboard>
														</BeginStoryboard>
													</EventTrigger>
												</Image.Triggers>
											</Image>


											<ls:LSNineSliceImage Slices="50,50,50,50" ImageSource="{StaticResource DetailsBoxBig}" HorizontalAlignment="Center"  MinWidth="708" MinHeight="252">
												<Grid>
													<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source=h19bc3d6bg4c93g413fga949g4db364084cf4, Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}" VerticalAlignment="Top" Margin="0,-10,0,0"/>

													<StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,50,0,70">
														<Grid>
															<Image Source="{StaticResource SpellReplaceFrame}" Stretch="None"/>
															<Control Template="{StaticResource SpellIconTemplate}" DataContext="{Binding ClassProgressionDetails.InSpellReplacement.Spell}"/>
														</Grid>

														<TextBlock Text="{Binding ClassProgressionDetails.InSpellReplacement.Spell.Name}"/>
													</StackPanel>

													<ls:LSToggleButton x:Name="editInSpellButton" Template="{StaticResource ChangeButtonTemplate}" IsChecked="False" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,-8" SoundID="UI_HUD_CC_OpenCloseToggle"/>
												</Grid>
											</ls:LSNineSliceImage>

										</StackPanel>

										<Grid x:Name="outSpellOverPanel" Visibility="{Binding Path=IsChecked, ElementName=editOutSpellButton, Converter={StaticResource BoolToVisibleConverter}}" VerticalAlignment="Top" Margin="0,200,0,0">

											<ls:LSNineSliceImage Padding="0,20,0,60" Slices="64,300,64,100" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/overPane_appearance.png" Width="820">

												<ls:LSScrollViewer Style="{StaticResource overpanelScrollViewerStyle}" VerticalScrollBarVisibility="Auto">
													<StackPanel Style="{StaticResource overpanelScrolledStackPanelStyle}">

														<Control Template="{StaticResource spellSelectionHeaderInfoTemplate}" HorizontalAlignment="Center" Margin="0,50,0,0"/>

														<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hba1cb211gedb1g47d3g9bc8g275f30e0dc6d', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}" Margin="0,50,0,0"/>

														<ContentControl Template="{StaticResource decoratedHeader}" Margin="0,64,0,0">
															<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h46206b54gae33g4546ga5dfg13de4a4c66aa', Converter={StaticResource TranslatedStringConverter}}"/>
														</ContentControl>

														<ls:LSButton Template="{StaticResource selectedSpellTemplate}" DataContext="{Binding ClassProgressionDetails.OutSpellReplacement}" Command="{Binding DataContext.SelectSpell,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
															<ls:LSButton.CommandParameter>
																<MultiBinding Converter="{StaticResource PassThroughConverter}">
																	<Binding Source="OutReplacement"/>
																	<Binding Path="."/>
																</MultiBinding>
															</ls:LSButton.CommandParameter>
														</ls:LSButton>

														<ContentControl Template="{StaticResource decoratedHeader}" Margin="0,64,0,0">
															<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h76bfc212gcdd9g4c2ag899eg6bbeaf84f1e5', Converter={StaticResource TranslatedStringConverter}}"/>
														</ContentControl>

														<!-- List of old spells for out -->
														<ItemsControl ItemsSource="{Binding ClassProgressionDetails.OutSpellsAvailable}" Style="{StaticResource spellSelectorSpellListStyle}">
															<ItemsControl.ItemTemplate>
																<DataTemplate DataType="{x:Type ls:VMSpellReference}">
																	<ls:LSButton Template="{StaticResource availableSpellTemplate}" DataContext="{Binding}" Command="{Binding DataContext.SelectSpell,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
																		<ls:LSButton.CommandParameter>
																			<MultiBinding Converter="{StaticResource PassThroughConverter}">
																				<Binding Source="OutReplacement"/>
																				<Binding Path="."/>
																			</MultiBinding>
																		</ls:LSButton.CommandParameter>
																	</ls:LSButton>
																</DataTemplate>
															</ItemsControl.ItemTemplate>
														</ItemsControl>

													</StackPanel>
												</ls:LSScrollViewer>

											</ls:LSNineSliceImage>

											<ls:LSToggleButton IsChecked="{Binding IsChecked, Mode=TwoWay, ElementName=editOutSpellButton}" Template="{StaticResource ToggleConfirmButtonTemplate}" Command="{Binding DataContext.ApplySpellReplacement,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" VerticalAlignment="Bottom" Margin="0,0,0,-16" SoundID="UI_HUD_CC_OpenCloseToggle"/>
										</Grid>

										<Grid x:Name="inSpellOverPanel" Visibility="{Binding Path=IsChecked, ElementName=editInSpellButton, Converter={StaticResource BoolToVisibleConverter}}" VerticalAlignment="Top" Margin="0,200,0,0">

											<ls:LSNineSliceImage Padding="0,20,0,60" Slices="64,300,64,100" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC/overPane_appearance.png" Width="820">

												<ls:LSScrollViewer Style="{StaticResource overpanelScrollViewerStyle}" VerticalScrollBarVisibility="Auto">
													<StackPanel Style="{StaticResource overpanelScrolledStackPanelStyle}">

														<Control Template="{StaticResource spellSelectionHeaderInfoTemplate}" HorizontalAlignment="Center" Margin="0,50,0,0"/>

														<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h693e8082g6817g4136gb51cg131b3310f24a', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelDescriptionText}" Margin="0,50,0,0"/>

														<ContentControl Template="{StaticResource decoratedHeader}" Margin="0,64,0,0">
															<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h46206b54gae33g4546ga5dfg13de4a4c66aa', Converter={StaticResource TranslatedStringConverter}}"/>
														</ContentControl>

														<ls:LSButton Template="{StaticResource selectedSpellTemplate}" DataContext="{Binding ClassProgressionDetails.InSpellReplacement}" Command="{Binding DataContext.SelectSpell,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
															<ls:LSButton.CommandParameter>
																<MultiBinding Converter="{StaticResource PassThroughConverter}">
																	<Binding Source="InReplacement"/>
																	<Binding Path="."/>
																</MultiBinding>
															</ls:LSButton.CommandParameter>
														</ls:LSButton>

														<ContentControl Template="{StaticResource decoratedHeader}" Margin="0,64,0,0">
															<TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h76bfc212gcdd9g4c2ag899eg6bbeaf84f1e5', Converter={StaticResource TranslatedStringConverter}}"/>
														</ContentControl>

														<!-- List of new spells for in -->
														<ItemsControl ItemsSource="{Binding ClassProgressionDetails.InSpellsAvailable}" Style="{StaticResource spellSelectorSpellListStyle}">
															<ItemsControl.ItemTemplate>
																<DataTemplate DataType="{x:Type ls:VMSpellReference}">
																	<ls:LSButton Template="{StaticResource availableSpellTemplate}" DataContext="{Binding}" Command="{Binding DataContext.SelectSpell,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
																		<ls:LSButton.CommandParameter>
																			<MultiBinding Converter="{StaticResource PassThroughConverter}">
																				<Binding Source="InReplacement"/>
																				<Binding Path="."/>
																			</MultiBinding>
																		</ls:LSButton.CommandParameter>
																	</ls:LSButton>
																</DataTemplate>
															</ItemsControl.ItemTemplate>
														</ItemsControl>

													</StackPanel>
												</ls:LSScrollViewer>

											</ls:LSNineSliceImage>

											<ls:LSToggleButton IsChecked="{Binding IsChecked, Mode=TwoWay, ElementName=editInSpellButton}" Template="{StaticResource ToggleConfirmButtonTemplate}" Command="{Binding DataContext.ApplySpellReplacement,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" VerticalAlignment="Bottom" Margin="0,0,0,-16" SoundID="UI_HUD_CC_OpenCloseToggle"/>
										</Grid>

									</Grid>
									<ControlTemplate.Triggers>
										<DataTrigger Binding="{Binding Path=IsChecked, ElementName=editOutSpellButton}" Value="True">
											<Setter TargetName="basePanel" Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
											<Setter TargetName="basePanel" Property="IsEnabled" Value="False"/>
										</DataTrigger>
										<DataTrigger Binding="{Binding Path=IsChecked, ElementName=editInSpellButton}" Value="True">
											<Setter TargetName="basePanel" Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
											<Setter TargetName="basePanel" Property="IsEnabled" Value="False"/>
										</DataTrigger>
									</ControlTemplate.Triggers>

								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</DataTrigger>

					<DataTrigger Binding="{Binding ElementName=gameplayTabs, Path=SelectedItem.Tag}" Value="spellprep">

						<Setter TargetName="gameplayPanel" Property="Template" Value="{StaticResource spellPrepTemplate}"/>

					</DataTrigger>


				</ControlTemplate.Triggers>
			</ControlTemplate>

		</ResourceDictionary>

	</ls:UIWidget.Resources>

	<b:Interaction.Behaviors>

		<ls:CollectionFilterBehavior x:Name="RaceProgressions" ItemsSource="{Binding RaceProgressionDetails.Progressions}" Predicate="{Binding IsNotSubProgressionPredicate}"/>
		<ls:CollectionFilterBehavior x:Name="SubRaceProgressions" ItemsSource="{Binding RaceProgressionDetails.Progressions}" Predicate="{Binding IsSubProgressionPredicate}"/>
		<ls:CollectionFilterBehavior x:Name="ClassProgressions" ItemsSource="{Binding ClassProgressionDetails.Progressions}" Predicate="{Binding IsNotSubProgressionPredicate}"/>
		<ls:CollectionFilterBehavior x:Name="SubClassProgressions" ItemsSource="{Binding ClassProgressionDetails.Progressions}" Predicate="{Binding IsSubProgressionPredicate}"/>

		<ls:CollectionFilterBehavior x:Name="RaceSpellSelectors" ItemsSource="{Binding RaceProgressionDetails.SpellSelectors}" Predicate="{Binding IsNotSubProgressionPredicate}"/>
		<ls:CollectionFilterBehavior x:Name="SubRaceSpellSelectors" ItemsSource="{Binding RaceProgressionDetails.SpellSelectors}" Predicate="{Binding IsSubProgressionPredicate}"/>
		<ls:CollectionFilterBehavior x:Name="ClassSpellSelectors" ItemsSource="{Binding ClassProgressionDetails.SpellSelectors}" Predicate="{Binding IsNotSubProgressionPredicate}"/>
		<ls:CollectionFilterBehavior x:Name="SubClassSpellSelectors" ItemsSource="{Binding ClassProgressionDetails.SpellSelectors}" Predicate="{Binding IsSubProgressionPredicate}"/>

		<!-- MOD START - Filter racial passives and racial equipment -->
		<ls:CollectionFilterBehavior x:Name="RacePassiveSelectors" ItemsSource="{Binding RaceProgressionDetails.NotSubPassiveSelectors}"/>
		<ls:CollectionFilterBehavior x:Name="SubRacePassiveSelectors" ItemsSource="{Binding RaceProgressionDetails.SubPassiveSelectors}"/>
		<ls:CollectionFilterBehavior x:Name="RaceEquipments" ItemsSource="{Binding RaceProgressionDetails.NotSubEquipmentSelectors}" Predicate="{Binding IsNotSubProgressionPredicate}"/>
		<ls:CollectionFilterBehavior x:Name="SubRaceEquipments" ItemsSource="{Binding RaceProgressionDetails.SubEquipmentSelectors}" Predicate="{Binding IsSubProgressionPredicate}"/>
		<!-- MOD END -->

		<ls:CollectionFilterBehavior x:Name="ClassPassiveFeatures" ItemsSource="{Binding PassiveFeatures}" Predicate="{Binding IsNotSubProgressionPredicate}"/>
		<ls:CollectionFilterBehavior x:Name="SubClassPassiveFeatures" ItemsSource="{Binding PassiveFeatures}" Predicate="{Binding IsSubProgressionPredicate}"/>

		<ls:CollectionSortBehavior x:Name="SortedRaceSkills" ItemsSource="{Binding AllSkills.RaceProficientSkills.Skills}" Comparer="{Binding SkillSortComparer}" />
		<ls:CollectionSortBehavior x:Name="SortedClassSkills" ItemsSource="{Binding AllSkills.ClassProficientSkills.Skills}" Comparer="{Binding SkillSortComparer}" />
		<ls:CollectionSortBehavior x:Name="SortedExpertiseSkills" ItemsSource="{Binding AllSkills.ExpertiseSkills.Skills}" Comparer="{Binding SkillSortComparer}" />

		<ls:CollectionSortBehavior x:Name="SortedSummarySkills" ItemsSource="{Binding ProgressionData.AllProgressions.Skills}" Comparer="{Binding SkillSortComparer}" />

		<ls:CollectionSortBehavior x:Name="SortedPreparableSpells" ItemsSource="{Binding SpellPrepare.Preparable}" Comparer="{Binding SpellByLevelSortComparer}" />
		<ls:CollectionSortBehavior x:Name="SortedPreparableSpellGroupsByLevel" ItemsSource="{Binding SpellPrepare.PreparableByLevel}" Comparer="{Binding SpellGroupByLevelSortComparer}" />
	</b:Interaction.Behaviors>


	<b:Interaction.Triggers>
		<b:EventTrigger EventName="Loaded">
			<!-- Don't start in add new multiclass mode -->
			<b:InvokeCommandAction Command="{Binding SelectFirstUsedClass}"/>

			<!-- Tutorial UI Event - Level Up Opened-->
			<b:InvokeCommandAction Command="{Binding TutorialEvent}" CommandParameter="a9b0d917-809d-43bc-a3fb-6da86e6f517d"/>

			<!-- Center Dummy Character with Overview Camera at first -->
			<b:InvokeCommandAction Command="{Binding SetCameraMode}" CommandParameter="Overview"/>
			<b:ChangePropertyAction TargetName="SetCameraControl" PropertyName="Template" Value="{StaticResource clearCameraOffsets}"/>
		</b:EventTrigger>

		<b:DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.AllowInteraction, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False">
			<b:InvokeCommandAction Command="{Binding CustomEvent}" CommandParameter="CloseWidget"/>
		</b:DataTrigger>

	</b:Interaction.Triggers>

	<ls:UIWidget.ContentTemplate>
		<DataTemplate>
			<Control x:Name="levelUpControl" Template="{StaticResource LevelUpTemplate}"/>
			<DataTemplate.Triggers>
				<MultiDataTrigger>
					<MultiDataTrigger.Conditions>
						<Condition Binding="{Binding LevelUpStep}" Value="Started"/>
						<Condition Binding="{Binding CurrentPlayer.IsScreenFadeActive}" Value="True"/>
					</MultiDataTrigger.Conditions>
					<!-- Wait for fade to finish before starting animations -->
					<Setter TargetName="levelUpControl" Property="Template" Value="{StaticResource LevelUpFadeInTemplate}"/>
				</MultiDataTrigger>
				<DataTrigger Binding="{Binding LevelUpStep}" Value="Finishing">
					<Setter TargetName="levelUpControl" Property="Template" Value="{StaticResource LevelUpFinishingTemplate}"/>
				</DataTrigger>
			</DataTemplate.Triggers>
		</DataTemplate>
	</ls:UIWidget.ContentTemplate>

</ls:UIWidget>