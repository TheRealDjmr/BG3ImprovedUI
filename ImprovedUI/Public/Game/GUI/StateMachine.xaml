<ls:StateMachine RootState = "Root" xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
              xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ls:StateMachine.States>

        <!--STATE: Root-->
        <ls:State Name = "Root" Layout = "Common" Owner = "All">
            <ls:State.InitialSubstates>
                <ls:InitialSubstate Name="EditorRoot"/>
                <ls:InitialSubstate Name="GameRoot"/>
                <ls:InitialSubstate Name="SystemRoot"/>
            </ls:State.InitialSubstates>
        </ls:State>

        <ls:State Name = "EditorRoot" Layout = "Common" Owner = "All">
            <ls:State.Events>
                <ls:StateEvent Name = "GE.EditorMode">
                    <ls:StateEvent.Actions>
                        <ls:RemoveAllSubstates/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <ls:State Name = "SystemRoot" Layout = "Common" Owner = "All">
            <ls:State.Events>
                <!-- MOD START - Remove story message -->
				<!--<ls:StateEvent Name = "OpenSystemMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="SystemMessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent> -->
				<!-- MOD END -->
            </ls:State.Events>
        </ls:State>

        <ls:State Name = "GameRoot" Layout = "Common" Owner = "All">
            <ls:State.Events>
                <ls:StateEvent Name = "GE.OnStateMainMenu">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="Eula"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "GE.OnStateLoadingStart">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="Loading"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "GE.OnStateRunning">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="Running"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "GE.OnStateLobby">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="Lobby"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "GE.OnBusyShow">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Busy"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "GE.OnSaveShow">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Saving"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "GE.OnMovieShow">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Movie"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "GE.EditorMode">
                    <ls:StateEvent.Actions>
                        <ls:RemoveAllSubstates/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseCursor">
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: SplashScreen-->
        <ls:State Name = "SplashScreen" DisableStatesBelow = "True" Layout = "Common" Owner = "All">
            <ls:State.Widgets>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
                <ls:StateWidget Filename="SplashScreen.xaml" Layer="Default"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "OpenMainMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="MainMenu"/>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: ScreenFade-->
        <ls:State Name = "ScreenFadePlayer" DisableStatesBelow = "False" HideStatesBelow = "False" Layout="Player" Owner="Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
            </ls:State.Widgets>
        </ls:State>
        <ls:State Name = "ScreenFadeGlobal" DisableStatesBelow = "False" HideStatesBelow = "False" Layout="Common" Owner="All">
            <ls:State.Widgets>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
            </ls:State.Widgets>
        </ls:State>

        <!--STATE: Eula-->
        <ls:State Name = "Eula" DisableStatesBelow = "True" Layout = "Common" Owner = "All">
            <ls:State.Widgets>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
                <ls:StateWidget Filename="Eula.xaml"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <!--Change to SignUp once the UI is done for KB+M-->
                <ls:StateEvent Name = "OpenSignUp">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="SensitiveSettings"/>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenSensitiveSettings">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="SensitiveSettings"/>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenSplashScreen">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="SplashScreen"/>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: SensitiveSettings-->
        <ls:State Name="SensitiveSettings" DisableStatesBelow = "True" Layout = "Common" Owner = "All">
            <ls:State.Widgets>
                <ls:StateWidget Filename="SensitiveSettings.xaml"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "OpenGammaCalibration">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="GammaCalibration"/>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "OpenHDR">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="HDRCalibration"/>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: MainMenu-->
        <ls:State Name = "MainMenu" DisableStatesBelow = "False" HideStatesBelow = "True" Layout = "Common" Owner = "All" DisableSoundLayersAbove="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
                <ls:StateWidget Filename="MainMenu.xaml" Layer="Default"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "OpenCredits">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Credits"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenOptions">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="Options"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ProfileSelectOpen">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="ProfileSelect"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenLobbyBrowser">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="LobbyBrowser"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenLobby">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="Lobby"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "LoadGameOpen">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MainMenu.LoadGame"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenHDR">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="HDRCalibration"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenGammaCalibration">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="GammaCalibration"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name="OpenDMSettings">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="GameSettings"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: HDRCalibration -->
        <ls:State Name = "HDRCalibration" HideStatesBelow = "True" Layout = "Common" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="HDRCalibration.xaml" Layer="MessageBox"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "OpenSplashScreen">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="SplashScreen"/>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: GammaCalibration -->
        <ls:State Name = "GammaCalibration" HideStatesBelow = "True" IsModal = "True" Layout = "Common" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="GammaCalibration.xaml" Layer="MessageBox"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "OpenSplashScreen">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="SplashScreen"/>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: CharacterCreation -->
        <ls:State Name = "CharacterCreation" HideStatesBelow = "True" DisableStatesBelow = "True" Layout = "Player" Owner = "Player" ForceSplitscreen="True">
            <ls:State.Widgets>
                <!-- MOD START - Remove CC tutorial message -->
				<!--<ls:StateWidget Filename="AlwaysOnTopOverlay.xaml" Layer="MessageBox"/>-->
                <ls:StateWidget Filename="Notification.xaml" Layer="Default"/>
                <ls:StateWidget Filename="CharacterCreation.xaml" Layer="HUD"/>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <!-- MOD START - Remove CC tutorial message -->
				<!--<ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>-->
				<ls:StateEvent Name = "IUI_OpenMainMenuPrompt">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="IUI_CharacterCreationMainMenuPrompt"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
				<ls:StateEvent Name = "OpenSplashScreen">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="SplashScreen"/>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
				<!-- MOD END -->
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>
		
		<!-- MOD START - Custom state for main menu prompt -->
		<ls:State Name = "IUI_CharacterCreationMainMenuPrompt" DisableStatesBelow = "False" HideStatesBelow = "False" Layout="Player" Owner="Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="AlwaysOnTopOverlay.xaml" Layer="MessageBox"/>
				<ls:StateWidget Filename="IUI_CharacterCreationMainMenuPrompt.xaml" Layer="HUD"/>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
            </ls:State.Widgets>
			
			<ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>
		<!-- MOD END -->

        <!--STATE: CharacterLevelUp -->
        <ls:State Name = "CharacterLevelUp" HideStatesBelow = "True" IsModalCameraControlAllowed="True" Layout = "Player" Owner = "Player" ForceSplitscreen="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Notification.xaml" Layer="Default"/>
                <ls:StateWidget Filename="CharacterLevelUp.xaml" Layer="HUD"/>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "OpenCharacterLevelUp"/>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.UICancel">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "GE.OnDialogueShow">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                        <ls:PushState Name="Dialogue"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: CharacterFullRespec -->
        <ls:State Name = "CharacterFullRespec" HideStatesBelow = "True" DisableStatesBelow = "True" Layout = "Player" Owner = "Player" ForceSplitscreen="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Notification.xaml" Layer="Default"/>
                <ls:StateWidget Filename="CharacterFullRespec.xaml" Layer="HUD"/>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: CharacterRespec -->
        <ls:State Name = "CharacterRespec" HideStatesBelow = "True" DisableStatesBelow = "True" Layout = "Player" Owner = "Player" ForceSplitscreen="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="AlwaysOnTopOverlay.xaml" Layer="MessageBox"/>
                <ls:StateWidget Filename="Notification.xaml" Layer="Default"/>
                <ls:StateWidget Filename="CharacterRespec.xaml" Layer="HUD"/>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: CharacterChangeAppearance -->
        <ls:State Name = "CharacterChangeAppearance" HideStatesBelow = "True" DisableStatesBelow = "True" Layout = "Player" Owner = "Player" ForceSplitscreen="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="AlwaysOnTopOverlay.xaml" Layer="MessageBox"/>
                <ls:StateWidget Filename="Notification.xaml" Layer="Default"/>
                <ls:StateWidget Filename="CharacterChangeAppearance.xaml" Layer="HUD"/>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>        
        
        <!--STATE: Henchmen -->
        <ls:State Name = "Henchmen" HideStatesBelow = "True" DisableStatesBelow = "True" Layout = "Common" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="AlwaysOnTopOverlay.xaml" Layer="MessageBox"/>
                <ls:StateWidget Filename="Notification.xaml" Layer="Default"/>
                <ls:StateWidget Filename="Henchmen.xaml" Layer="HUD"/>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Loading-->
        <ls:State Name = "Loading" DisableStatesBelow = "True" Layout = "Common" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="LoadingScreen.xaml" Layer="Default" BlockedLoading="True"/>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
            </ls:State.Widgets>
        </ls:State>

        <!--STATE: Credits -->
        <ls:State Name = "Credits" IsModal="True" HideStatesBelow = "True" DisableStatesBelow = "True" Layout = "Common" Owner = "All">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Credits.xaml"/>
				<ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
			</ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>


        <!--STATE: Paused-->
        <ls:State Name = "Paused" DisableStatesBelow = "True" Layout = "Player" Owner = "Player" HideStatesBelow = "True" IsModal="True" ForceSplitscreen="True" TutorialLayer="Paused">
            <ls:State.Widgets>
                <ls:StateWidget Filename="AlwaysOnTopOverlay.xaml" Layer="MessageBox"/>
                <ls:StateWidget Filename="GameMenu.xaml" Layer="Pause" SoundLayer="EscapeMenu"/>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenGameOverMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="GameOverMessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenOptions">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Options"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenDifficultySettings">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="GameSettings"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "LoadGameOpen">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="Paused.LoadGame"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "SaveGameOpen">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="Paused.SaveGame"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CharacterAssignOpen">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="CharacterAssign"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ConnectivityMenuOpen">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="ConnectivityMenu"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "GE.OnDialogueShow">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                        <ls:PushState Name="Dialogue"/>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenReactionsPopup">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                        <ls:PushState Name="ReactionsPopup"/>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenCharacterCreation">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="CharacterCreation"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseCursor">
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <ls:State Name="ShortcutMenu" Layout = "Player" Owner = "Player"/>
        <ls:State Name="JournalCombatLog" Layout = "Player" Owner = "Player" TutorialLayer="JournalCombatLog"/>

        <!--STATE: Running-->
        <ls:State Name = "Running" Layout = "Common" Owner = "All">
            <ls:State.InitialSubstates>
                <ls:InitialSubstate Name="PlayerUIs"/>
                <ls:InitialSubstate Name="OverlayShared"/>
                <ls:InitialSubstate Name="ScreenFadeGlobal"/>
            </ls:State.InitialSubstates>
            <ls:State.Events>
                <!-- eat GE.OnStateRunning to avoid restarting the Running state (for example, when autosaving ends) -->
                <ls:StateEvent Name = "GE.OnStateRunning" />
                <ls:StateEvent Name = "ProfileSelectOpen">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="ProfileSelect"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenGameOverMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="GameOverMessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "LoadGameOpen">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused.LoadGame"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ShowBook">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Book"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenTutorial">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="Tutorial"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenActOver">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="ActOver"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
				<ls:StateEvent Name = "OpenEndGameCredits">
					<ls:StateEvent.Actions>
						<ls:PushState Name="Credits" Metadata="Ending"/>
					</ls:StateEvent.Actions>
				</ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: PlayerUIsHolder-->
        <ls:State Name ="PlayerUIsHolder" Layout ="Player" Owner="Player">
            <ls:State.InitialSubstates>
                <ls:InitialSubstate Name="PlayerHUD"/>
                <ls:InitialSubstate Name="PlayerWorldContextMenu"/>
                <ls:InitialSubstate Name="PlayerPanelsHolder"/>
            </ls:State.InitialSubstates>

            <ls:State.Events>
                <ls:StateEvent Name = "ToggleGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "GE.OnDialogueShow">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Dialogue"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "PreloadDialogue">
                    <ls:StateEvent.Actions>
                        <ls:PreloadState Name="Dialogue"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ClearPreloadDialogue">
                    <ls:StateEvent.Actions>
                        <ls:ClearPreloadState Name="Dialogue"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenContainerInventory">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="ContainerInventory"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenCombine">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Combine"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenInsert">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Insert"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPickpocket">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="Pickpocket"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenExamine">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Examine"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ActiveRollOpen">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="ActiveRoll"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenRewardPanel">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="RewardPanel"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenLongRest">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="LongRest"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name="OpenMakeCamp">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="MakeCamp"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenTrade">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Trade"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenCharacterCreation">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="CharacterCreation"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenHenchmen">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Henchmen"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenCharacterLevelUp">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="CharacterLevelUp"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenCharacterFullRespec">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="CharacterFullRespec"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenCharacterRespec">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="CharacterRespec"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenReactionsPopup">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="ReactionsPopup"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenCharacterChangeAppearance">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="CharacterChangeAppearance"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>                
            </ls:State.Events>
        </ls:State>

        <!--STATE: PlayerUIs-->
        <ls:State Name = "PlayerUIs" Layout = "Player" Owner = "Player">
            <ls:State.InitialSubstates>
                <ls:InitialSubstate Name="PlayerUIsHolder" />
                <ls:InitialSubstate Name="PlayerNotifications"/>
                <ls:InitialSubstate Name="ScreenFadePlayer"/>
            </ls:State.InitialSubstates>
        </ls:State>

        <!--STATE: PlayerPortraits-->
        <!-- Empty state for controller so it doesn't get purged swapping between them -->
        <ls:State Name = "PlayerPortraits" Layout = "Player" Owner = "Player"/>

        <!--STATE: PlayerWorldContextMenu-->
        <ls:State Name = "PlayerWorldContextMenu" Layout = "Player" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="WorldContextMenu.xaml" Layer="Notifications"/>
            </ls:State.Widgets>
        </ls:State>

        <!--STATE: PlayerHUD-->
        <ls:State Name = "PlayerHUD" Layout = "Player" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Overlay.xaml" Layer="Notifications"/>
                <ls:StateWidget Filename="HudIndicator.xaml" Layer="HUD" IgnoreHitTest="True"/>
                <ls:StateWidget Filename="OverheadInfo.xaml" Layer="HUD" IgnoreHitTest="True"/>
                <ls:StateWidget Filename="WorldTooltips.xaml" Layer="HUD"/>
                <ls:StateWidget Filename="HotBar.xaml" Layer="HUDTop"/>
                <ls:StateWidget Filename="Minimap.xaml" Layer="HUD"/>
                <ls:StateWidget Filename="TargetInfo.xaml" Layer="HUD" IgnoreHitTest="True"/>
                <ls:StateWidget Filename="PlayerPortraits.xaml" Layer="PopupPanels"/>
                <ls:StateWidget Filename="TurnModeInfo.xaml" Layer="HUD"/>
                <ls:StateWidget Filename="CombatLog.xaml" Layer="HUD"/>
                <ls:StateWidget Filename="CombatantsOverlay.xaml" Layer="HUD"/>
                <ls:StateWidget Filename="CursorText.xaml" Layer="PopupPanels"/>
                <ls:StateWidget Filename="DragAndDropPreview.xaml" Layer="DragAndDrop" IgnoreHitTest="True"/>
                <ls:StateWidget Filename="PassiveRoll.xaml" Layer="PopupPanels"/>
                <ls:StateWidget Filename="AlwaysOnTopOverlay.xaml" Layer="PopupPanels"/>
            </ls:State.Widgets>

            <ls:State.InitialSubstates>
                <ls:InitialSubstate Name="PlayerPortraits" Metadata="InHUD"/>
            </ls:State.InitialSubstates>
            
            <ls:State.Events>
                <ls:StateEvent Name = "OpenSelectionFlyOut">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="SelectionFlyOut"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>

        </ls:State>

        <!--STATE: ReactionsPopup -->
        <ls:State Name = "ReactionsPopup" Layout = "Player" Owner = "Player" DisableStatesBelow="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="ReactionDecisionPopup.xaml" Layer="PopupPanels"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseReactionsPopup">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>
        
        <!--STATE: SelectionFlyOut-->
        <ls:State Name= "SelectionFlyOut" Layout="Player" Owner="Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="SelectionFlyOut.xaml" Layer="PopupPanels"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseSelectionFlyOut">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: PlayerNotifications-->
        <ls:State Name= "PlayerNotifications" Layout="Player" Owner="Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Notification.xaml" Layer="Notifications"/>
            </ls:State.Widgets>
        </ls:State>

        <!-- STATE: PlayerPanelsHandle -->
        <ls:State Name = "PlayerPanelsHolder" Layout = "Player" Owner = "Player">
            <ls:State.InitialSubstates>
                <ls:InitialSubstate Name="PlayerPanels"/>
                <ls:InitialSubstate Name="PlayerRadials"/>
            </ls:State.InitialSubstates>
        </ls:State>

        <ls:State Name = "PlayerRadials" Layout = "Player" Owner = "Player">

        </ls:State>

        <!--STATE: PlayerPanels -->
        <ls:State Name = "PlayerPanels" Layout = "Player" Owner = "Player">
            <ls:State.Events>
                <ls:StateEvent Name = "CloseAll">
                    <ls:StateEvent.Actions>
                        <ls:RemoveAllSubstates/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleJournal">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="JournalQuests"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleJournalQuests">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="JournalQuests"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInspiration">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="JournalInspiration"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleJournalInspiration">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="JournalInspiration"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleJournalMap">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="JournalMap"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ShowJournalMap">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="JournalMap"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleWaypoints">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="JournalMap"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleJournalDialogues">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="JournalDialogues"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleJournalInfo">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="JournalInfo"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleJournalTutorial">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="JournalTutorial"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenTutorialPopup">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="TutorialPopup"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "SplitItemToggle">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="SplitItem"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleInventory">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="CharacterPanel" Metadata="ToggleInventory"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name="ToggleCharacterPanel">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="CharacterPanel" Metadata="ToggleInventory"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleSpells">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="CharacterPanel" Metadata="ToggleSpells"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "IE.UIToggleAlchemy">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="CharacterPanel" Metadata="ToggleAlchemy"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleAlchemy">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="CharacterPanel" Metadata="ToggleAlchemy"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenAlchemyFromItem">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="CharacterPanel" Metadata="ToggleAlchemy"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                
                <ls:StateEvent Name = "ToggleIllithid">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="CharacterPanel" Metadata="ToggleIllithid"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "ToggleInterrupts">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="CharacterPanel" Metadata="ToggleInterrupts"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                
                <ls:StateEvent Name="TogglePartyPanel">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="PartyPanel"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenTadpoleTree">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="TadpoleTree"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <!-- Open if not already, but don't close if it is -->
                <ls:StateEvent Name = "OpenInventory">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="CharacterPanel" Metadata="ToggleInventory"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenSpellbook">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="CharacterPanel" Metadata="ToggleSpells"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenAlchemyPanel">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="CharacterPanel" OnCreateStateEvent="OpenAlchemyPanel"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--Legacy states, they're still existing in the controller version -->
        <ls:State Name = "PartyEquipment" Layout = "Player" Owner = "Player"/>
        <ls:State Name = "PartyCharacterSheet" Layout = "Player" Owner = "Player"/>
        <ls:State Name = "PartyInventory" Layout = "Player" Owner = "Player"/>

        <ls:State Name = "SortInventory" Layout = "Player" Owner = "Player" DisableStatesBelow="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="SortInventory.xaml" Layer="MessageBox"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "IE.UICancel">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Character panel-->
        <ls:State Name="CharacterPanel" Layout="Player" Owner="Player" HideStatesBelow="False" IsModal="False">
            <ls:State.Widgets>
                <ls:StateWidget Filename="CharacterPanel.xaml" Layer="PopupPanels" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
						            <ls:RequestCloseWidget/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
              <!--RemovePanelState happens after closing animation so the widget is cleaned up-->
              <ls:StateEvent Name = "RemovePanelState">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleCharacterPanel">
                    <ls:StateEvent.Actions>
                        <ls:RequestCloseWidget/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleInterrupts">
                    <ls:StateEvent.Actions>
                        <ls:RequestCloseWidget Metadata="ToggleInterrupts"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "OpenLearnSpells">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="LearnSpellsPopupPanel"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "OpenAlchemyPanel">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="AlchemyPanel"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Learn Spells Popup Panel (PopupPanels layer for character panel) -->
        <ls:State Name="LearnSpellsPopupPanel" Layout="Player" Owner="Player" HideStatesBelow="False" IsModal="False">
            <ls:State.Widgets>
                <ls:StateWidget Filename="LearnSpells.xaml" Layer="PopupPanels"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "CloseLearnSpells">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Learn Spells Panel (Panels layer for party panels) -->
        <ls:State Name="LearnSpellsPanel" Layout="Player" Owner="Player" HideStatesBelow="False" IsModal="False">
            <ls:State.Widgets>
                <ls:StateWidget Filename="LearnSpells.xaml" Layer="Panels"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "CloseLearnSpells">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Alchemy Panel -->
        <ls:State Name="AlchemyPanel" Layout="Player" Owner="Player" HideStatesBelow="False" IsModal="False">
            <ls:State.Events>
                <ls:StateEvent Name = "CloseAlchemyPanel">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.UIToggleAlchemy">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Party panels-->
        <ls:State Name="PartyPanel" Layout="Player" Owner="Player" IsModal="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="PartyPanel.xaml" Layer="Panels" SoundLayer="NonHUDWidget"/>
                <ls:StateWidget Filename="DragAndDropPreview.xaml" Layer="DragAndDrop" IgnoreHitTest="True"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
						            <ls:RequestCloseWidget AllowToggle="False"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <!--RemovePanelState happens after closing animation so the widget is cleaned up-->
                <ls:StateEvent Name = "RemovePanelState">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "TogglePartyPanel">
                    <ls:StateEvent.Actions>
                        <ls:RequestCloseWidget/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "IE.TogglePartyCharacterView">
                    <ls:StateEvent.Actions>
                        <ls:RequestCloseWidget AllowToggle="False"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "ClosePartyPanel">
                    <ls:StateEvent.Actions>
						<ls:RequestCloseWidget AllowToggle="False"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "CloseAllFullscreen">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState />
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "IE.ToggleMap">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="JournalMap"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleJournal">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="JournalQuests"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInspiration">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="JournalInspiration"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenLearnSpells">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="LearnSpellsPanel"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                
                <!-- Events triggered in the spell book, shared with character panel. Shouldn't do anything in party panel -->
                <ls:StateEvent Name="ToggleSpells"/>
                <ls:StateEvent Name="ToggleInterrupts"/>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Tadpole tree-->
        <ls:State Name="TadpoleTree" Layout="Player" Owner="Player"  HideStatesBelow="True"  DisableStatesBelow = "True" TutorialLayer="TadpoleTree">
            <ls:State.Widgets>
                <ls:StateWidget Filename="TadpolePowersTree.xaml" Layer="PopupPanels"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.UICancel">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.UIToggleTadpolePowers">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: JournalQuests-->
        <ls:State Name = "JournalQuests" Layout = "Player" Owner = "Player" HideStatesBelow="True" TutorialLayer="JournalQuests">
            <ls:State.Widgets>
                <ls:StateWidget Filename="JournalQuests.xaml" Layer="PopupPanels" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseAllFullscreen">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleJournal">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <ls:State Name = "JournalInspiration" Layout = "Player" Owner = "Player" HideStatesBelow="True" TutorialLayer="JournalInspiration">
            <ls:State.Widgets>
                <ls:StateWidget Filename="JournalInspiration.xaml" Layer="PopupPanels" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseAllFullscreen">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInspiration">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: JournalMap-->
        <ls:State Name = "JournalMap" Layout = "Player" Owner = "Player" HideStatesBelow = "True" TutorialLayer="JournalMap">
            <ls:State.Widgets>
                <ls:StateWidget Filename="JournalMap.xaml" Layer="PopupPanels" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseAllFullscreen">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleJournalMap">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleMap">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: JournalDialogues-->
        <ls:State Name = "JournalDialogues" Layout = "Player" Owner = "Player" HideStatesBelow="True" TutorialLayer="JournalDialogues">
            <ls:State.Widgets>
                <ls:StateWidget Filename="JournalDialogues.xaml" Layer="PopupPanels" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: JournalInfo -->
        <ls:State Name = "JournalInfo" Layout = "Player" Owner = "Player" TutorialLayer="JournalInfo">
            <ls:State.Widgets>
                <ls:StateWidget Filename="JournalInfo.xaml" Layer="PopupPanels" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: JournalTutorial -->
        <ls:State Name = "JournalTutorial" Layout = "Player" Owner = "Player" HideStatesBelow="True" TutorialLayer="JournalTutorial">
            <ls:State.Widgets>
                <ls:StateWidget Filename="JournalTutorials.xaml" Layer="PopupPanels" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: TutorialPopup -->
        <ls:State Name = "TutorialPopup" Layout = "Player" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="TutorialPopup.xaml" Layer="PopupPanels" SoundLayer="TutorialPanel"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Trade-->
        <ls:State Name = "Trade" HideStatesBelow = "True" DisableStatesBelow = "True" Layout = "Player" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Trade.xaml" Layer="Panels" SoundLayer="NonHUDWidget"/>
                <ls:StateWidget Filename="DragAndDropPreview.xaml" Layer="DragAndDrop" IgnoreHitTest="True"/>
                <ls:StateWidget Filename="AlwaysOnTopOverlay.xaml" Layer="MessageBox"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "SplitItemToggle">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="SplitItem"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenExamine">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Examine"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseAll">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseAllFullscreen">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: ProfileSelect-->
        <ls:State Name = "ProfileSelect" DisableStatesBelow = "True" Layout = "Player" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="ProfileSelect.xaml" Layer="PopupPanels"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Messagebox-->
        <ls:State Name = "MessageBox" DisableStatesBelow = "True" IsModal="True" Layout = "Common" Owner = "Player" TutorialLayer="MessageBox">
            <ls:State.Widgets>
                <ls:StateWidget Filename="MessageBox.xaml" Layer="MessageBox" BlockedLoading="True" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "TestAction">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "LoadGameOpen">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused.LoadGame"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenHDR">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="HDRCalibration"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenGammaCalibration">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="GammaCalibration"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltipsFromMessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: GameOverMessagebox-->
        <ls:State Name = "GameOverMessageBox" DisableStatesBelow = "True" IsModal = "True" Layout = "Common" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="MessageBox.xaml" Layer="Pause" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "LoadGameOpen">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused.LoadGame"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Messagebox-->
        <ls:State Name = "SystemMessageBox" DisableStatesBelow = "True" IsModal="True" Layout = "Common" Owner = "DefaultPlayer" ForceVisible="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="MessageBox.xaml" Layer="MessageBox" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Book -->
        <ls:State Name = "Book" DisableStatesBelow = "True" Layout = "Common" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Book.xaml" Layer="MessageBox" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseAllFullscreen">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Dialogue-->
        <ls:State Name = "Dialogue"  DisableStatesBelow = "True" HideStatesBelow="True"  Layout = "Player" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Dialogue.xaml" Layer="HUD" >
                    <ls:StateWidget.Libraries>
                        <ls:StateLibrary Filename="Library/DialogueTemplates.xaml"/>
                    </ls:StateWidget.Libraries>
                </ls:StateWidget>
                <ls:StateWidget Filename="Overlay.xaml" Layer="Notifications"/>
                <ls:StateWidget Filename="AlwaysOnTopOverlay.xaml" Layer="MessageBox"/>
            </ls:State.Widgets>

            <ls:State.InitialSubstates>
                <ls:InitialSubstate Name="PlayerPortraits" MetaData="InDialogue"/>
            </ls:State.InitialSubstates>

            <ls:State.Events>
                <ls:StateEvent Name = "GE.OnDialogueShow" />
                <ls:StateEvent Name = "OpenTrade">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="Trade"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "GE.OnDialogueHide">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "DialogueHide">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenDialogueHistory">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="DialogueHistory"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.OpenDialogueHistory">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="DialogueHistory"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "DialogActiveRollOpen">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="ActiveRoll"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ActiveRollOpen">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="ActiveRoll"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenTutorial">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="Tutorial"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenGameOverMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="GameOverMessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenLongRest">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="LongRest"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!-- STATE: DialogueHistory -->
        <ls:State Name = "DialogueHistory" DisableStatesBelow = "True" Layout = "Player" Owner = "Player" HideStatesBelow = "True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="DialogueHistory.xaml" Layer="HUD"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseDialogueHistory">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.CloseDialogueHistory">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: SplitItem-->
        <ls:State Name = "SplitItem" IsModal="True" DisableStatesBelow = "True" Layout = "Player" Owner = "Player" HideStatesBelow = "False" ForceSplitscreen="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="SplitItem.xaml" Layer="MessageBox" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "SplitItemToggle">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: GameSettings-->
        <ls:State Name="GameSettings" HideStatesBelow="True" IsModal="True" DisableStatesBelow="True" Layout="Common" Owner="All">
            <ls:State.Widgets>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
                <ls:StateWidget Filename="NewGameSettings.xaml" Layer="Default"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: MainMenu.LoadGame-->
        <ls:State Name = "MainMenu.LoadGame" DisableStatesBelow = "True" Layout = "Common" Owner = "All">
            <ls:State.Widgets>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
                <ls:StateWidget Filename="LoadGame.xaml"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.LoadGameClose">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Paused.LoadGame-->
        <ls:State Name = "Paused.LoadGame" DisableStatesBelow = "True" IsModal="True" Layout = "Player" Owner = "Player" HideStatesBelow = "True" ForceSplitscreen="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
                <ls:StateWidget Filename="LoadGame.xaml" Layer="Pause" SoundLayer="EscapeMenu"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.LoadGameClose">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Paused.SaveGame-->
        <ls:State Name = "Paused.SaveGame" DisableStatesBelow = "True" IsModal="True" Layout = "Player" Owner = "Player" HideStatesBelow = "True" ForceSplitscreen="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="SaveGame.xaml" Layer="Pause" SoundLayer="EscapeMenu"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.SaveGameClose">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenNewSaveDialog">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="SaveGame.InputSaveName"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: SaveGame.InputSaveName-->
        <ls:State Name = "SaveGame.InputSaveName" DisableStatesBelow = "True" Layout = "Common" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="SaveGameInputSaveNameDialog.xaml" Layer="MessageBox"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
              
            </ls:State.Events>
        </ls:State>

        <!--STATE: Container Inventory -->
        <ls:State Name = "ContainerInventory" DisableStatesBelow = "False" Layout = "Player" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Container.xaml" Layer="PopupPanels"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseAll">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenContainerInventory">

                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Pickpocket -->
        <ls:State Name = "Pickpocket" DisableStatesBelow = "False" Layout = "Player" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Pickpocket.xaml" Layer="HUD" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Combine UI-->
        <ls:State Name="Combine" DisableStatesBelow="False" Layout="Player" Owner="Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Combine.xaml" Layer="PopupPanels" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Insert UI-->
        <ls:State Name="Insert" DisableStatesBelow="False" Layout="Player" Owner="Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Insert.xaml" Layer="PopupPanels" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseInsertWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Examine-->
        <ls:State Name = "Examine" DisableStatesBelow = "False" HideStatesBelow = "False" Layout = "Player" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Examine.xaml" Layer="PopupPanels" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Options-->
        <ls:State Name = "Options" Layout = "Common" Owner = "All" DisableStatesBelow = "True" IsModal="True" HideStatesBelow = "True">
            <ls:State.InitialSubstates>
                <ls:InitialSubstate Name="GameOptions"/>
            </ls:State.InitialSubstates>

            <ls:State.Events>
                <ls:StateEvent Name = "OpenAudioOptions">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="AudioOptions"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenVideoOptions">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="VideoOptions"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenGameOptions">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="GameOptions"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenKeybindingOptions">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="KeybindingOptions"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenControllerOptions">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="ControllerOptions"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenInterfaceOptions">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="InterfaceOptions"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenAccessibilityOptions">
                    <ls:StateEvent.Actions>
                        <ls:SetSubstate Name="AccessibilityOptions"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenHDR">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="HDRCalibration"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenGammaCalibration">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="GammaCalibration"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
				<ls:StateEvent Name = "CloseGameOptions">
					<ls:StateEvent.Actions>
						<ls:RemoveState/>
					</ls:StateEvent.Actions>
				</ls:StateEvent>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: Audio Options-->
        <ls:State Name = "AudioOptions" Layout = "Common" Owner = "All">
            <ls:State.Widgets>
                <ls:StateWidget Filename="AudioOptions.xaml" Layer="Pause" SoundLayer="EscapeMenu"/>
            </ls:State.Widgets>
        </ls:State>

        <!--STATE: Video Options-->
        <ls:State Name = "VideoOptions" Layout = "Common" Owner = "All">
            <ls:State.Widgets>
                <ls:StateWidget Filename="VideoOptions.xaml" Layer="Pause" SoundLayer="EscapeMenu"/>
            </ls:State.Widgets>
        </ls:State>

        <!--STATE: Game Options-->
        <ls:State Name = "GameOptions" Layout = "Common" Owner = "All">
            <ls:State.Widgets>
                <ls:StateWidget Filename="GameOptions.xaml" Layer="Pause" SoundLayer="EscapeMenu"/>
            </ls:State.Widgets>
        </ls:State>

        <!--STATE: Keybinding Options-->
        <ls:State Name = "KeybindingOptions" Layout = "Common" Owner = "All">
            <ls:State.Widgets>
                <ls:StateWidget Filename="KeybindingOptions.xaml" Layer="Pause" SoundLayer="EscapeMenu"/>
            </ls:State.Widgets>
        </ls:State>

        <!--STATE: Controller Options-->
        <ls:State Name = "ControllerOptions" Layout = "Common" Owner = "All">
            <ls:State.Widgets>
                <ls:StateWidget Filename="ControllerOptions.xaml" Layer="Pause" SoundLayer="EscapeMenu"/>
            </ls:State.Widgets>
        </ls:State>

        <!--STATE: Interface Options-->
        <ls:State Name = "InterfaceOptions" Layout = "Common" Owner = "All">
            <ls:State.Widgets>
                <ls:StateWidget Filename="InterfaceOptions.xaml" Layer="Pause" SoundLayer="EscapeMenu"/>
            </ls:State.Widgets>
        </ls:State>

        <!--STATE: Accessibility Options-->
        <ls:State Name = "AccessibilityOptions" Layout = "Common" Owner = "All">
            <ls:State.Widgets>
                <ls:StateWidget Filename="AccessibilityOptions.xaml" Layer="Pause" SoundLayer="EscapeMenu"/>
            </ls:State.Widgets>
        </ls:State>

        <!--STATE: Active Roll -->
        <ls:State Name = "ActiveRoll" DisableStatesBelow = "True" HideStatesBelow="True"  IsModal="True" Layout = "Player" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="ActiveRoll.xaml" Layer="PopupPanels" SoundLayer="DiceRoll"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "ToggleGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="Paused"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenTutorial">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="Tutorial"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenSelectionFlyOut">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="SelectionFlyOut"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: LobbyBrowser-->
        <ls:State Name = "LobbyBrowser" HideStatesBelow="True" DisableStatesBelow = "True" Layout = "Common" Owner = "DefaultPlayer">
            <ls:State.Widgets>
                <ls:StateWidget Filename="LobbyBrowser.xaml" Layer="Panels"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.ToggleInGameMenu">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <ls:State Name = "Lobby" Layout = "Common" Owner = "All" DisableStatesBelow = "True" HideStatesBelow = "True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="AlwaysOnTopOverlay.xaml" Layer="MessageBox"/>
                <ls:StateWidget Filename="Lobby.xaml" Layer="Panels"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "GE.Lobby">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

            </ls:State.Events>
        </ls:State>

        <!--STATE: CharacterAssign -->
        <ls:State Name = "CharacterAssign" DisableStatesBelow = "True" HideStatesBelow = "True"  IsModal="True" Layout = "Player" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="CharacterAssign.xaml" Layer="Pause" SoundLayer="EscapeMenu"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "ConnectivityMenuOpen">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="ConnectivityMenu"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "CloseMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: ConnectivityMenu -->
        <ls:State Name = "ConnectivityMenu" DisableStatesBelow = "True" Layout = "Player" Owner = "Player">
            <ls:State.Widgets>
                <ls:StateWidget Filename="ConnectivityMenu.xaml" Layer="Pause"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: RewardPanel -->
        <ls:State Name = "RewardPanel" DisableStatesBelow = "False" Layout = "Player" Owner = "Player" IsModal = "True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="RewardPanel.xaml" Layer="Panels"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseRewardPanel">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!--STATE: CombatLog - empty state to switch between kb & controller-->
        <ls:State Name = "CombatLog" Layout = "Player" Owner = "Player" HideStatesBelow = "False"/>

        <!--STATE: Tutorials - The modal tutorial showing and highlighting other UIs while explaining their use-->
        <ls:State Name="Tutorial" Layout="Player" Owner="Player" IsModal="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Tutorial.xaml" Layer="PopupPanels" SoundLayer="TutorialPanel"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <ls:State Name="ActOver" DisableStatesBelow="True" Layout="Player" Owner="Player" HideStatesBelow = "True" IsModal="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="OverviewMap.xaml" Layer="Pause"/>
            </ls:State.Widgets>
            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.UICancel">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "IE.UIAccept">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <ls:State Name = "Busy" Layout = "Common" Owner = "All" DisableStatesBelow = "False" HideStatesBelow = "False" IsModal="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Busy.xaml" Layer="Pause"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "GE.OnBusyHide">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <ls:State Name = "Saving" Layout = "Common" Owner = "All" DisableStatesBelow = "False" IsModal="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="Saving.xaml" Layer="Notifications"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "GE.OnSaveHide">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <ls:State Name = "Movie" Layout = "Common" Owner = "All" DisableStatesBelow = "True" HideStatesBelow = "True" IsModal="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="AlwaysOnTopOverlay.xaml" Layer="MessageBox"/>
				<ls:StateWidget Filename="ScreenFade.xaml" Layer="ScreenFade" BlockedLoading="True"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "GE.OnMovieHide">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <ls:State Name = "LongRest" Layout = "Player" Owner = "Player" DisableStatesBelow = "True" HideStatesBelow = "True" IsModal="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="LongRest.xaml" Layer="HUD"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "HideLongRest">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <ls:State Name="MakeCamp" Layout="Player" Owner="Player" DisableStatesBelow="True" HideStatesBelow="True" IsModal="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="MakeCamp.xaml" Layer="PopupPanels" SoundLayer="NonHUDWidget"/>
                <ls:StateWidget Filename="DragAndDropPreview.xaml" Layer="DragAndDrop" IgnoreHitTest="True"/>
                <ls:StateWidget Filename="AlwaysOnTopOverlay.xaml" Layer="MessageBox"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name = "CloseWidget">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "CloseMakeCamp">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "OpenMessageBox">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="MessageBox"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>

                <ls:StateEvent Name = "SplitItemToggle">
                    <ls:StateEvent.Actions>
                        <ls:PushState Name="SplitItem"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
                <ls:StateEvent Name = "OpenPinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:AddSubstate Name="PinnedTooltips"/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <ls:State Name="PinnedTooltips" Layout="Player" Owner="Player" DisableStatesBelow="True" IsModal="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="PinnedTooltips.xaml" Layer="Notifications" BlockedLoading="True" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name="ClosePinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>
        <ls:State Name="PinnedTooltipsFromMessageBox" Layout="Player" Owner="Player" DisableStatesBelow="True" IsModal="True">
            <ls:State.Widgets>
                <ls:StateWidget Filename="PinnedTooltips.xaml" Layer="MessageBox" BlockedLoading="True" SoundLayer="NonHUDWidget"/>
            </ls:State.Widgets>

            <ls:State.Events>
                <ls:StateEvent Name="ClosePinnedTooltips">
                    <ls:StateEvent.Actions>
                        <ls:RemoveState/>
                    </ls:StateEvent.Actions>
                </ls:StateEvent>
            </ls:State.Events>
        </ls:State>

        <!-- Empty state for parity with controller UI. If it's not active in kbm, it won't exist when switching to controller -->
        <ls:State Name = "OverlayShared" DisableStatesBelow = "False" HideStatesBelow = "False" Layout="Common" Owner="All"/>
    </ls:StateMachine.States>
</ls:StateMachine>